import json
import logging

import requests

from token_generator import get_token
#
# from telegram import KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove, Update, WebAppInfo
# from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
#
# # Enable logging
# logging.basicConfig(
#     format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
# )
# # set higher logging level for httpx to avoid all GET and POST requests being logged
# logging.getLogger("httpx").setLevel(logging.WARNING)
#
# logger = logging.getLogger(__name__)
#
#
# # Define a `/start` command handler.
# async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
#     """Send a message with a button that opens a the web app."""
#     await update.message.reply_text(
#         "Please press the button below to choose a color via the WebApp.",
#         reply_markup=ReplyKeyboardMarkup.from_button(
#             KeyboardButton(
#                 text="Open the color picker!",
#                 web_app=WebAppInfo(url="https://mikforce.github.io/cdek.github.io/"),
#             )
#         ),
#     )
#
#
# # Handle incoming WebAppData
# async def web_app_data(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
#     """Print the received data and remove the button."""
#     # Here we use `json.loads`, since the WebApp sends the data JSON serialized string
#     # (see webappbot.html)
#     data = json.loads(update.effective_message.web_app_data.data)
#     await update.message.reply_html(
#         text=(
#             f"You selected the color with the HEX value <code>{data}</code>. The "
#             f"corresponding RGB value is <code>{tuple(data.values())}</code>."
#         ),
#         reply_markup=ReplyKeyboardRemove(),
#     )
#
#
# def main() -> None:
#     """Start the bot."""
#     # Create the Application and pass it your bot's token.
#     application = Application.builder().token("7020285176:AAEr9NQt7m3pljwWAMfYANb1EjdMeQKmgVQ").build()
#
#     application.add_handler(CommandHandler("start", start))
#     application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, web_app_data))
#
#     # Run the bot until the user presses Ctrl-C
#     application.run_polling(allowed_updates=Update.ALL_TYPES)
#
#
# if __name__ == "__main__":
#     main()


# import asyncio
# import logging
# from aiogram import Bot, Dispatcher
# from aiogram.types import Message, WebAppInfo, ReplyKeyboardMarkup, KeyboardButton
# from aiogram.utils.web_app import safe_parse_webapp_init_data
# from aiohttp.web import Request, json_response
#
#
# logging.basicConfig(level=logging.INFO)
# API_TOKEN = '7020285176:AAEr9NQt7m3pljwWAMfYANb1EjdMeQKmgVQ'
#
# # Define a handler to start the bot and send the web app
# bot = Bot(token=API_TOKEN)
# dp = Dispatcher(bot)
#
#
# # Define a handler to start the bot and send the web app
# @dp.message_handler(commands=['start'])
# async def send_welcome(message: Message):
#     keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
#     web_app_info = WebAppInfo(url="https://mikforce.github.io/cdek.github.io/")
#     keyboard.add(KeyboardButton(text="Open Web App", web_app=web_app_info))
#     await message.answer("Click the button to open the Web App", reply_markup=keyboard)
#
#
# # Define a handler to process WebApp data
# @dp.message_handler(content_types="web_app_data")
# async def check_data_handler(request: Request):
#
#     logging.info(f"Received data: {request}")
#
#     await request.answer(request)
#
#
#
# import asyncio
# # Run the bot
# if __name__ == '__main__':
#     from aiogram import executor
#     from aiohttp import web
#
#     app = web.Application()
#     app.router.add_post('/webapp-data', check_data_handler)
#
#     loop = asyncio.get_event_loop()
#     # loop.create_task(web._run_app(app, host='localhost', port=8080))
#
#     executor.start_polling(dp, skip_updates=True)

# API_KEY = "e76077adb79ecf5925910c5a7f856f514f04429e"
# secret = "9ef0e08714737f6d36ced0170e0c17d3a10a78f3"
#
# import requests
# import json
#
# # –ë–∞–∑–æ–≤—ã–π URL API –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π
# url = "https://suggestions.dadata.ru/suggestions/api/4_1/rs/findById/party"
#
# # –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–ù–ù –∫–æ–º–ø–∞–Ω–∏–∏)
# data = {
#     "query": "5040142770",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π –ò–ù–ù, –û–ì–†–ù –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ
#     "count": 1  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
# }
#
# # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
# headers = {
#     "Content-Type": "application/json",
#     "Accept": "application/json",
#     "Authorization": f"$Token {API_KEY}"
# }
#
# # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ POST-–∑–∞–ø—Ä–æ—Å–∞ –∫ API
# try:
#     response = requests.post(url, json=data, headers=headers, timeout=1000)  # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –¥–æ 10 —Å–µ–∫—É–Ω–¥
#
#     # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –æ—Ç–≤–µ—Ç–∞
#     if response.status_code == 200:
#         # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞
#         result = response.json()
#         print("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏:", result)
#     elif response.status_code == 403:
#         print("–û—à–∏–±–∫–∞ 403: –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ API-–∫–ª—é—á–∏ –∏ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞.")
#     else:
#         print(f"–û—à–∏–±–∫–∞ {response.status_code}: {response.text}")
# except requests.exceptions.Timeout:
#     print("–û—à–∏–±–∫–∞: –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ –∏—Å—Ç–µ–∫–ª–æ.")

# import sqlite3
# import os
#
# # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.
# db_path = './data/users.db'  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#
# # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# if not os.path.exists(db_path):
#     print(f"Database file '{db_path}' does not exist.")
# else:
#     # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#     conn = sqlite3.connect(db_path)
#     cursor = conn.cursor()
#
#     # –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#     cursor.execute("SELECT name FROM sqlite_master WHERE type='table';")
#     tables = cursor.fetchall()
#
#     if tables:
#         print("Tables in the database:")
#         for table_name in tables:
#             print(f"- {table_name[0]}")
#
#             # –í—ã–≤–æ–¥–∏–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–µ–∫—É—â–µ–π —Ç–∞–±–ª–∏—Ü—ã
#             cursor.execute(f"SELECT * FROM {table_name[0]};")
#             rows = cursor.fetchall()
#
#             # –ü–µ—á–∞—Ç–∞–µ–º —Å—Ç—Ä–æ–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
#             for row in rows:
#                 print(row)
#
#             print("\n")
#     else:
#         print("No tables found in the database.")
#
#     # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
#     conn.close()


entity_info = order_info_dict['entity']
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
statuses = entity_info.get('statuses', [])
status_text = ""
moscow_tz = pytz.timezone('Europe/Moscow')

for status in statuses:
    # –£–±–∏—Ä–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ +0000
    date_time_str = status['date_time'][:-5]  # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–∏–º–≤–æ–ª–æ–≤
    # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    utc_time = datetime.strptime(date_time_str, '%Y-%m-%dT%H:%M:%S')
    # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º UTC –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
    utc_time = pytz.utc.localize(utc_time)
    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
    moscow_time = utc_time.astimezone(moscow_tz)

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
    status_text += f"üìå *–°—Ç—É—Å:* {status['name']} ({status['code']}) - {moscow_time.strftime('%Y-%m-%d %H:%M:%S')} - {status['city']}\n"

# Format the output
entity_text = (
    f"üì¶ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–∏:*\n\n"
    f"üìù *–ù–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:* {entity_info.get('cdek_number', 'N/A')}\n\n"
    f"  üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {entity_info.get('comment', 'N/A')}\n\n"
    f"üìç *–ü—É–Ω–∫—Ç –¥–æ—Å—Ç–∞–≤–∫–∏:* {entity_info.get('delivery_point', 'N/A')}\n"
    f"  üë• *–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:* {entity_info['sender'].get('company', 'N/A')} - {entity_info['sender'].get('name', 'N/A')}\n"
    f"  üë• *–ü–æ–ª—É—á–∞—Ç–µ–ª—å:* {entity_info['recipient'].get('company', 'N/A')} - {entity_info['recipient'].get('name', 'N/A')}\n"
    f"  üöö *–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: {entity_info.get('delivery_detail', {}).get('total_sum', 'N/A')} —Ä—É–±.\n\n"
    f"üë§ *–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:* {entity_info.get('sender', {}).get('name', 'N/A')}\n"
    f"  üìû *–¢–µ–ª–µ—Ñ–æ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:* {entity_info.get('sender', {}).get('phones', [{}])[0].get('number', 'N/A')}\n\n"
    # f"üè¢ *–ö–æ–º–ø–∞–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è:* {entity_info.get('recipient', {}).get('company', 'N/A')}\n"
    f"üë§ *–ü–æ–ª—É—á–∞—Ç–µ–ª—å:* {entity_info.get('recipient', {}).get('name', 'N/A')}\n"
    f"  üìû *–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è:* {entity_info.get('recipient', {}).get('phones', [{}])[0].get('number', 'N/A')}\n\n"
    f"üìå *–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑:* {entity_info.get('from_location', {}).get('country', 'N/A')}, {entity_info.get('from_location', {}).get('city', 'N/A')}, {entity_info.get('from_location', {}).get('address', 'N/A')}\n"
    f"üìå *–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤:* {entity_info.get('to_location', {}).get('country', 'N/A')}, {entity_info.get('to_location', {}).get('city', 'N/A')}, {entity_info.get('to_location', {}).get('address', 'N/A')}\n\n"
    f"üì¶ *–î–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—ã–ª–∫–∏:*\n"
)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–∫–µ—Ç–∞—Ö
for package in entity_info.get('packages', []):
    entity_text += (
        f"    - üì¶ –ù–æ–º–µ—Ä –º–µ—Å—Ç–æ: {package.get('number', 'N/A')}, "
        f"–í–µ—Å: {package.get('weight', 'N/A')} –≥, "
        f"–†–∞–∑–º–µ—Ä—ã: {package.get('length', 'N/A')}x{package.get('width', 'N/A')}x{package.get('height', 'N/A')} —Å–º\n"
        f"      *–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:*\n"
    )
    for item in package.get('items', []):
        entity_text += (
            f"        - üéÅ {item.get('name', 'N/A')}: "
            f"–í–µ—Å: {item.get('weight', 'N/A')} –≥, "
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {item.get('cost', 'N/A')} —Ä—É–±.\n"
        )

# entity_text += "üîö *–ö–æ–Ω–µ—Ü –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.*"                    # Add your code to process and send the entity information
keyboard = InlineKeyboardMarkup()
keyboard.add(
    InlineKeyboardButton("–¢–µ–ª–µ—Ñ–æ–Ω –æ—Ñ–∏—Å–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞ –≤—Ä—É—á–µ–Ω–∏–µ –ø–æ—Å—ã–ª–∫–∏",
                         callback_data='delivery_office_phone'),
    InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='go_back')
)
await bot.send_message(callback_query.from_user.id, entity_text, reply_markup=keyboard)




















