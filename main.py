# aiogram   2.23.1
import sqlite3
import os
import json
from datetime import timedelta, datetime

import requests
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import InputMediaPhoto
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import types
from aiogram.types import WebAppInfo, ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher.filters import Text
from aiogram.types import Message
from aiohttp.web import Request, json_response
import logging
from aiogram.dispatcher.filters import Command
from aiogram.utils.markdown import escape_md
from datetime import datetime
from aiogram.utils.markdown import code
from aiogram.utils.exceptions import TelegramAPIError
# 10006324754 —Å–∫–ª–∞–¥-–¥–≤–µ—Ä—å
# 10007168378 –¥–æ –ø–≤–∑
# lYV0wvt14fYGgE7MoWosaIyvOavEqqUm
# 2ABI0GEJN5giKtlgHh2ZZ1rCsz2iWoHZ
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
from token_generator import get_token
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from cedek_blizh_office import get_nearest_gdp_offices


MANAGER_ID = 6536870230

logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    filename='bot_log.log')

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è aiogram
logger = logging.getLogger('aiogram')

console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
console_handler.setFormatter(console_formatter)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫ –ª–æ–≥–≥–µ—Ä—É aiogram
logger.addHandler(console_handler)

# Initialize bot and dispatcher   7020285176:AAEr9NQt7m3pljwWAMfYANb1EjdMeQKmgVQ
# –¥–ª—è —Ç–µ—Å—Ç–∞ 7207186878:AAGGEFlLavEBD0GXGTvRIgQZ7SLwHzlDHz8
bot = Bot(token="7351691962:AAGASpTq7J-uif9R7p0bphxbqs8gmx7oPP4")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

# Database setup

conn = sqlite3.connect('users.db')    #–¥–ª—è –¥–µ–ø–ª–æ—è –¥–æ–∫–µ—Ä–∞

# conn = sqlite3.connect('users.db')
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                  id INTEGER PRIMARY KEY AUTOINCREMENT, 
                  user_id INTEGER UNIQUE, 
                  username TEXT, 
                  password TEXT)''')  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã

cursor.execute('''CREATE TABLE IF NOT EXISTS new_orders
                  (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, cdek_number TEXT, order_info TEXT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏ –∏—Ö –∑–∞–∫–∞–∑–∞—Ö
cursor.execute('''CREATE TABLE IF NOT EXISTS user_zakaz (
                  id INTEGER PRIMARY KEY AUTOINCREMENT, 
                  user_id INTEGER, 
                  weight INTEGER, 
                  name TEXT, 
                  comment TEXT, 
                  phone_number TEXT, 
                  city TEXT, 
                  address TEXT, 
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                  FOREIGN KEY (user_id) REFERENCES new_orders(user_id))''')

class Form(StatesGroup):
    login = State()
    password = State()
    order_number = State()
    order_number2 = State()
    order_number3 = State()
    fio = State()
    tel = State()
    adr = State()
    pwz = State()
    cit = State()
    inpzt = State()
    npdc = State()
    dubl = State()
    call_request = State()
    kurier = State()
    address = State()
    konsalid = State()
    date = State()
    time = State()
    change_delivery_date_date = State()
    change_delivery_date_time_from = State()
    change_delivery_date_time_to = State()
    change_delivery_date_comment = State()
    waiting_for_city = State()  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    address_confirmation = State()  # Define a new state in your Form class
    waiting_for_inn = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ò–ù–ù


async def check_user(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ user_id
def check_user_id_exists(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM users WHERE user_id = ?', (user_id,))
    count = cursor.fetchone()[0]
    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    conn.close()
    return count > 0

@dp.message_handler(commands='start')
async def start(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(row_width=1)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard.add(
        # InlineKeyboardButton("üîë –í–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="register_1"),
        InlineKeyboardButton("üìù –ó–∞–∫–ª—é—á–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä", callback_data="register_ek5"),
        InlineKeyboardButton("‚úÖ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –∫ –õ–ö", callback_data="register_1"),
        InlineKeyboardButton("üì¶ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å—ã–ª–∫–∏", callback_data="otsl"),
        InlineKeyboardButton("–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", callback_data="docs")
    )

    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç –°–î–≠–ö!\n\n"
        "üöö –ú—ã —Ä–∞–¥—ã –ø–æ–º–æ—á—å –≤–∞–º —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π. –í–æ—Ç —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å:\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üì¶ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å—ã–ª–∫–∏' –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –æ—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ—Å—ã–ª–∫—É.\n"
        "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
        # "1Ô∏è‚É£2Ô∏è Ô∏è‚É£  Ô∏è‚É£ 3Ô∏è‚É£ –£–∂–µ –µ—Å—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –Ω–∞ —Å–∞–π—Ç–µ –°–¥–µ–∫? –ù–∞–∂–º–∏—Ç–µ 'üîë –í–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'.\n"
        "1Ô∏è‚É£ –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç? –ù–∞–∂–º–∏—Ç–µ 'üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ –°–î–≠–ö'.\n"
        "2Ô∏è‚É£ –ï—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –Ω–æ –±–æ—Ç –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω? –ù–∞–∂–º–∏—Ç–µ '‚úÖ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –∫ –õ–ö'.\n\n"
        "–¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ –≤—Å–µ–º —Ñ—É–≥–∫—Ü–∏–æ–Ω–∞–ª–æ–º –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è'"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∏ –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º! üòä",
        reply_markup=keyboard
    )


@dp.callback_query_handler(lambda c: c.data == 'register_1')
async def cmd_register(callback_query: types.CallbackQuery):
    user = await check_user(callback_query.from_user.id)
    if user:
        await bot.send_message(callback_query.from_user.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã –≤–æ—à–ª–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.")
    else:
        # –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ –≤ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ
        video_path = os.path.join(os.getcwd(), 'video (video-converter.com).mp4')  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
        with open(video_path, 'rb') as video:
            await bot.send_video(callback_query.from_user.id, video,
                                 caption="–í–∏–¥–µ–æ: –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫–∞–∑–∞–Ω—ã –≤ –≤–∏–¥–µ–æ.")
        await bot.send_message(callback_query.from_user.id,
                               "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'.")

        keyboard = InlineKeyboardMarkup()
        registration_button = InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register")
        keyboard.add(registration_button)
        await bot.send_message(callback_query.from_user.id, "–ù–∞–∂–º–∏—Ç–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", reply_markup=keyboard)





    await callback_query.answer()




@dp.callback_query_handler(lambda c: c.data =='register')
async def cmd_start(callback_query: types.CallbackQuery):  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ callback_query
    user = await check_user(callback_query.from_user.id)  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ callback_query –æ—Ç –∫–æ–ª–±—ç–∫–∞
    if user:
        await bot.send_message(callback_query.from_user.id, f"–ü—Ä–∏–≤–µ—Ç, {user[2]}! –í—ã –≤–æ—à–ª–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.")  # –û—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ bot
    else:
        await bot.send_message(callback_query.from_user.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∞—à–µ–≥–æ –∫–ª—é—á–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.")  # –û—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ bot
        await Form.login.set()

@dp.message_handler(state=Form.login)
async def process_login(message: types.Message, state: FSMContext):
    login = message.text
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤
    if 32 <= len(login):  # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç 1 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤
        await state.update_data(login=login)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ü–∞—Ä–æ–ª—å –∫–ª—é—á–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.")
        await Form.password.set()
    else:
        await message.answer("–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 32 —Å–∏–º–≤–æ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –ª–æ–≥–∏–Ω–∞
        await state.finish()




@dp.message_handler(lambda message: message.text =='/main')
async def cmd_start1(message: types.Message, state: FSMContext):
    user = await check_user(message.from_user.id)

    if user:
        # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        keyboard = InlineKeyboardMarkup()
        keyboard.row(InlineKeyboardButton("–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (–Ω–∞–∫–ª–∞–¥–Ω–æ–π) üìù", callback_data='enter_waybill'))
        keyboard.row(InlineKeyboardButton("–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ üõçÔ∏è", callback_data='enter_webshop_order'))
        keyboard.row(InlineKeyboardButton("–ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—ã–ª–∫–∏ üì¶",
                                          web_app=WebAppInfo(url='https://mobile.cdek.ru/packageto')))
        keyboard.row(InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å –∫—É—Ä—å–µ—Ä–∞ (–ó–∞–±–æ—Ä –≥—Ä—É–∑–∞) üö™", callback_data='/zaborgruz'))
        keyboard.row(
            InlineKeyboardButton("–°–ø–∏—Å–∫–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤/–æ—Ñ–∏—Å–æ–≤/–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ üìç", callback_data='/lists'))
        keyboard.row(InlineKeyboardButton("–ü—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é –µ—Å–ª–∏ —É –≤–∞—Å –¥–≤–µ—Ä—å-—Å–∫–ª–∞–¥ üìù",
                                          callback_data='duplicate_waybill'))

        await message.answer("–í–∞—à–µ –º–µ–Ω—é –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü:", reply_markup=keyboard)
    else:
        await message.answer("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")



# @dp.callback_query_handler(lambda c: c.data == 'register_ek5')
# async def process_register_ek5(callback_query: types.CallbackQuery):
#     await bot.send_message(callback_query.from_user.id, "–°–∞–π—Ç –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ ek5: https://cdek.ru.net/registration/ –≤—ã —Ç–∞–∫ –∂–µ –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å /faq —á—Ç–æ –±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –∫–∞–∫ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")
@dp.callback_query_handler(lambda c: c.data == 'register_ek5', state=None) # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –æ–Ω –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–∞–∫–æ–º-—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
async def process_register_ek5_start(callback_query: types.CallbackQuery, state: FSMContext):
    """
    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ 'register_ek5'.
    –û–Ω –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ò–ù–ù –∏ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞.
    """
    await bot.answer_callback_query(callback_query.id) # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ –∫–æ–ª–±—ç–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
    await bot.send_message(
        callback_query.from_user.id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ò–ù–ù (–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ù–æ–º–µ—Ä –ù–∞–ª–æ–≥–æ–ø–ª–∞—Ç–µ–ª—å—â–∏–∫–∞):"
    )
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ò–ù–ù –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await Form.waiting_for_inn.set()
    # –ú–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å user_id –≤ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞—Ç—å –¥–∞–ª—å—à–µ
    # await state.update_data(user_id_to_notify=callback_query.from_user.id)


# 3. –°–æ–∑–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ò–ù–ù
@dp.message_handler(state=Form.waiting_for_inn)
async def process_inn_input(message: types.Message, state: FSMContext):
    """
    –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–æ–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ–≥–¥–∞ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è
    –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting_for_inn.
    """
    user_inn = message.text
    user_id = message.from_user.id
    username = message.from_user.username # –ü–æ–ª—É—á–∞–µ–º @username, –µ—Å–ª–∏ –µ—Å—Ç—å
    first_name = message.from_user.first_name # –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    # --- (–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –í–∞–ª–∏–¥–∞—Ü–∏—è –ò–ù–ù ---
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –ò–ù–ù
    # –ù–∞–ø—Ä–∏–º–µ—Ä, —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä –∏ –∏–º–µ–µ—Ç –¥–ª–∏–Ω—É 10 –∏–ª–∏ 12
    if not user_inn.isdigit() or len(user_inn) not in [10, 12]:
        await message.reply("–ò–ù–ù –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ 10 –∏–ª–∏ 12 —Ü–∏—Ñ—Ä. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return # –û—Å—Ç–∞–µ–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏, –∂–¥–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥
    # --- /–í–∞–ª–∏–¥–∞—Ü–∏—è ---

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞
    manager_message_text = (
        f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é EK5!\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {first_name}\n"
        f"üÜî User ID: {user_id}\n"
        f"@{username if username else '–ù–µ—Ç username'}\n\n"
        f"  –ò–ù–ù: `{user_inn}`" # –ò—Å–ø–æ–ª—å–∑—É–µ–º Markdown –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –ò–ù–ù
    )

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É
        await bot.send_message(MANAGER_ID, manager_message_text)
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.reply("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –ò–ù–ù –ø–æ–ª—É—á–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.")

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä—É {MANAGER_ID}: {e}")
        # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–± –æ—à–∏–±–∫–µ
        await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–Ω–µ–¥–∂–µ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.")

    finally:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞ –¥–∞–ª—å—à–µ
        await state.finish()









@dp.callback_query_handler(lambda c: c.data == 'docs')
async def process_doc(callback_query: types.CallbackQuery):
    text = '''–ö–æ–º–∞–Ω–¥—ã Telegram –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –°–î–≠–ö:

/nomer
–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞ –°–î–≠–ö.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ API: GET /orders
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.
–ë–æ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ, —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –¥—Ä—É–≥–∏–µ –¥–µ—Ç–∞–ª–∏.

/im
–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ (–ò–ú).
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ API: GET /orders
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –ò–ú –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.
–ë–æ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –¥–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –ò–ú.

/sklad_dver (—Ä–∞–Ω–µ–µ /zaborgruz)
–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ —Å—Ö–µ–º–µ "–°–∫–ª–∞–¥-–¥–≤–µ—Ä—å".
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ API: POST /orders
–ë–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ (–∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è, –≤–µ—Å, –≥–∞–±–∞—Ä–∏—Ç—ã –∏ —Ç.–¥.).
–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ—Ç—Å—è –∑–∞–∫–∞–∑ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É —Å–æ —Å–∫–ª–∞–¥–∞ –°–î–≠–ö –¥–æ –¥–≤–µ—Ä–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è.

/zaborgruza
–ó–∞–∫–∞–∑ –∑–∞–±–æ—Ä–∞ –≥—Ä—É–∑–∞.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ API: POST /intakes
–ë–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–±–æ—Ä–∞ –≥—Ä—É–∑–∞, –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.
–°–æ–∑–¥–∞–µ—Ç—Å—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞ –∫—É—Ä—å–µ—Ä–æ–º –°–î–≠–ö.

/doc
–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).
–í –±—É–¥—É—â–µ–º –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–Ω–∞–∫–ª–∞–¥–Ω—ã–µ, –∞–∫—Ç—ã –∏ —Ç.–¥.).

/faq
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–∏—Å–µ.
–ù–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ API.
–í—ã–≤–æ–¥–∏—Ç —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∏—Ö.

/lists
–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —Ä–µ–≥–∏–æ–Ω–æ–≤, –æ—Ñ–∏—Å–æ–≤, –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥—ã API: GET /location/regions, GET /deliverypoints, GET /location/cities
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤, –æ—Ñ–∏—Å–æ–≤ –°–î–≠–ö –∏–ª–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤.

/dan_zakaz
–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –∑–∞–±–æ—Ä–∞ –≥—Ä—É–∑–∞.
–ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ API: POST /intakes –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
–ë–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–∏—á–Ω–æ–º –∑–∞–±–æ—Ä–µ –≥—Ä—É–∑–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ –≤ –±—É–¥—É—â–µ–º.

/zabor_konsalid
–ó–∞–±–æ—Ä –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥—Ä—É–∑–∞.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ API: POST /intakes —Å —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
–ë–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥—Ä—É–∑–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.

/info_delivery_problem
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–±–ª–µ–º–µ –¥–æ—Å—Ç–∞–≤–∫–∏.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ API: GET /orders/{order_uuid}/statuses
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–æ–º–µ—Ä –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞, –±–æ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –∏ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö.

/human_chat
–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.
–ù–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ API –°–î–≠–ö.
–°—Ç–∞–≤–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±—â–µ–Ω–∏–µ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏.

/end_chat
–ó–∞–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.
–ù–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ API –°–î–≠–ö.
–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ—Å—Å–∏—é –æ–±—â–µ–Ω–∏—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏.

/ypakovka
–ó–∞–∫–∞–∑ —É–ø–∞–∫–æ–≤–∫–∏ –°–î–≠–ö.
–ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ API: POST /orders —Å —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ —É–ø–∞–∫–æ–≤–∫–∏
–ë–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–¥—ã —É–ø–∞–∫–æ–≤–∫–∏ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–∫–∞–∑–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é.'''
    await bot.send_message(callback_query.from_user.id, text)
@dp.callback_query_handler(lambda c: c.data == 'otsl')
async def process_register_ek5(callback_query: types.CallbackQuery):
    from ots_luboy_posilki import ots_l_p

    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Å—ã–ª–∫–∏:")

    @dp.message_handler(lambda message: message.from_user.id == callback_query.from_user.id)
    async def handle_package_number(message: types.Message):
        package_number = message.text
        response = ots_l_p(package_number)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å—ã–ª–∫–µ
        try:
            if response:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–≤–µ—Ç –≤–æ–æ–±—â–µ –µ—Å—Ç—å
                if 'result' in response and response['result']:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–∞ result
                    result = response['result']
                    if 'order' in result and 'statuses' in result:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–∫–∞–∑–∞ –∏ —Å—Ç–∞—Ç—É—Å–æ–≤
                        order = result['order']
                        # pwz = result['updateInfo']['possibleDeliveryMode'] # –≠—Ç–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è, –º–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ
                        sender = order['sender']
                        receiver = order['receiver']
                        sender_name_parts = sender['name'].split()
                        # –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–æ–≤
                        sender_initials_list = [part[0].upper() for part in sender_name_parts if
                                                part and part[0].isalpha()]
                        sender_initials = '.'.join(sender_initials_list) + '.' if sender_initials_list else sender[
                            'name']  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–º—è –µ—Å–ª–∏ –∏–Ω–∏—Ü–∏–∞–ª—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏—Å—å

                        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
                        delivery_modes = {
                            "1": "–¥–≤–µ—Ä—å-–¥–≤–µ—Ä—å",
                            "2": "–¥–≤–µ—Ä—å-—Å–∫–ª–∞–¥",
                            "3": "—Å–∫–ª–∞–¥-–¥–≤–µ—Ä—å",
                            "4": "—Å–∫–ª–∞–¥-—Å–∫–ª–∞–¥",
                            "5": "—Ç–µ—Ä–º–∏–Ω–∞–ª-—Ç–µ—Ä–º–∏–Ω–∞–ª",
                            "6": "–¥–≤–µ—Ä—å-–ø–æ—Å—Ç–∞–º–∞—Ç",
                            "7": "—Å–∫–ª–∞–¥-–ø–æ—Å—Ç–∞–º–∞—Ç",
                        }
                        delivery_mode = delivery_modes.get(order.get('trueDeliveryMode'), "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏")

                        message_text = (
                            "üì¶ *–î–ê–ù–ù–´–ï –ü–û–°–´–õ–ö–ò*\n"
                            "---\n"
                            f"üÜî *–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:* `{order.get('number', 'N/A')}`\n"
                            f"üì¶ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç:* {order.get('packagesCount', 'N/A')}\n"
                            f"üìÖ *–°–æ–∑–¥–∞–Ω:* {order.get('creationTimestamp', 'N/A')[:10]}\n"
                            f"‚öñÔ∏è *–í–µ—Å:* {order.get('weight', 'N/A')} –∫–≥\n"
                            f"üöõ *–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:* {delivery_mode}\n\n"

                            "üë§ *–û–¢–ü–†–ê–í–ò–¢–ï–õ–¨*\n"
                            "---\n"
                            f"‚îú‚îÄ *–ò–º—è:* {sender_initials}\n"
                            f"‚îî‚îÄ üèôÔ∏è *–ì–æ—Ä–æ–¥:* {sender.get('address', {}).get('city', {}).get('name', 'N/A')}\n\n"  # –î–æ–±–∞–≤–∏–ª .get –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

                            "üì¨ *–ü–û–õ–£–ß–ê–¢–ï–õ–¨*\n"
                            "---\n"
                            f"‚îú‚îÄ *–ò–Ω–∏—Ü–∏–∞–ª—ã:* {receiver.get('initials', 'N/A')}\n"
                            # –í—Å–µ–≥–¥–∞ –≤—ã–≤–æ–¥–∏–º –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                            f"‚îî‚îÄ üè† *–ê–¥—Ä–µ—Å:* {receiver.get('address', {}).get('title', 'N/A')}, {receiver.get('address', {}).get('city', {}).get('name', 'N/A')}\n\n"
                        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ‚îî‚îÄ –∑–¥–µ—Å—å
                        )

                        # --- –ò–°–¢–û–†–ò–Ø –î–û–°–¢–ê–í–ö–ò (—Ç–µ–ø–µ—Ä—å –≤—Å–µ–≥–¥–∞ –≤—ã–≤–æ–¥–∏—Ç—Å—è) ---
                        message_text += (
                            "üìä *–ò–°–¢–û–†–ò–Ø –î–û–°–¢–ê–í–ö–ò*\n"
                            "---\n"
                        )
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å—Ç–∞—Ç—É—Å—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç –∏ —ç—Ç–æ —Å–ø–∏—Å–æ–∫
                        statuses = result.get('statuses', [])
                        if statuses:
                            for status in statuses:
                                city_info = f" {status['currentCity']['name']}" if 'currentCity' in status and status[
                                    'currentCity'] else ''
                                timestamp = status.get('timestamp', 'N/A')[:10]
                                message_text += f"‚îú‚îÄ üîÑ *{status.get('name', '–°—Ç–∞—Ç—É—Å –Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}*{city_info}  {timestamp}\n"
                        else:
                            message_text += "‚îú‚îÄ –ò—Å—Ç–æ—Ä–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.\n"
                        message_text += "\n"  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –∏—Å—Ç–æ—Ä–∏–∏

                        # --- –î–ï–¢–ê–õ–ò –ü–í–ó/–û–§–ò–°–ê (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–ª—é—á 'office') ---
                        if 'office' in receiver.get('address', {}):
                            office = receiver['address']['office']
                            message_text += f"üè¢ *–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ü–£–ù–ö–¢–ï –í–´–î–ê–ß–ò ({office.get('type', '–ü–í–ó')})*\n"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–∏–ø –æ—Ñ–∏—Å–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
                            message_text += "---\n"
                            # –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–¥—Ä–µ—Å, –µ—Å–ª–∏ –æ–Ω –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
                            # message_text += f"‚îú‚îÄ *–ê–¥—Ä–µ—Å –ü–í–ó:* {receiver['address']['title']}, {receiver['address']['city']['name']}\n"
                            if office.get('comment'):
                                message_text += f"‚îú‚îÄ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {office['comment']}\n"
                            if office.get('phones'):
                                message_text += f"‚îú‚îÄ *–ö–æ–Ω—Ç–∞–∫—Ç—ã:* {office['phones'][0]['number']}\n"  # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω



                            # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π (–∫–æ—Ä–æ—Ç–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è)
                            day_map_ru = {
                                "MONDAY": "–ü–Ω",
                                "TUESDAY": "–í—Ç",
                                "WEDNESDAY": "–°—Ä",
                                "THURSDAY": "–ß—Ç",
                                "FRIDAY": "–ü—Ç",
                                "SATURDAY": "–°–±",
                                "SUNDAY": "–í—Å"
                            }

                            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
                            schedule_list = office.get('schedule', [])
                            if schedule_list:
                                message_text += "üìÖ *–ì–†–ê–§–ò–ö –†–ê–ë–û–¢–´ –ü–í–ó*\n"
                                # message_text += "---\n" # –ú–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                                for schedule in schedule_list:
                                    # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π
                                    startDay_en = schedule.get('startDay')
                                    endDay_en = schedule.get('endDay')

                                    # –ü–µ—Ä–µ–≤–æ–¥–∏–º –¥–Ω–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π, –∏—Å–ø–æ–ª—å–∑—É—è —Å–ª–æ–≤–∞—Ä—å
                                    # –ï—Å–ª–∏ –¥–Ω—è –Ω–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                                    startDay_ru = day_map_ru.get(startDay_en, startDay_en)
                                    endDay_ru = day_map_ru.get(endDay_en, endDay_en)

                                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ä—É—Å—Å–∫–∏–º–∏ –¥–Ω—è–º–∏
                                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ –¥–Ω–∏ –¥–ª—è –ª–æ–≥–∏–∫–∏
                                    if startDay_en and endDay_en and startDay_en != endDay_en:
                                        days = f"{startDay_ru} - {endDay_ru}"
                                    elif startDay_en:  # –ï—Å–ª–∏ –¥–Ω–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç –∏–ª–∏ endDay –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                                        days = startDay_ru
                                    else:  # –ï—Å–ª–∏ startDay –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                                        days = "N/A"  # –ò–ª–∏ –¥—Ä—É–≥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

                                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å —á–∞—Å–∞–º–∏ —Ä–∞–±–æ—Ç—ã (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
                                    working_hours = f"{schedule.get('startTime', 'N/A')[:5]} - {schedule.get('endTime', 'N/A')[:5]}"

                                    # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–µ
                                    message_text += f"‚îú‚îÄ ‚Ä¢ *{days}:* {working_hours}\n"

                            message_text += "\n"  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –±–ª–æ–∫–∞ –ü–í–ó




                        # --- –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ö–õ–ê–î–ï (–ø–æ —Ç–≤–æ–µ–º—É —É—Å–ª–æ–≤–∏—é) ---
                        # –ï—Å–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –ù–ï –¥–≤–µ—Ä—å-–¥–≤–µ—Ä—å ("1") –∏ –ù–ï —Å–∫–ª–∞–¥-–¥–≤–µ—Ä—å ("3")
                        if order.get('trueDeliveryMode') not in ["1", "3"]:
                            if 'warehouse' in result:
                                warehouse = result['warehouse']
                                # –ò—Å–ø–æ–ª—å–∑—É–µ–º .get() –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
                                planned_end_date = warehouse.get('acceptance', {}).get('plannedEndDate', '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')

                                storage_days = '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'
                                if 'storage' in warehouse and 'days' in warehouse['storage']:
                                    storage_days = f"{warehouse['storage']['days']} –¥–Ω–µ–π"

                                message_text += (
                                    "üè≠ *–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ö–õ–ê–î–ï –ü–†–ò–ë–´–¢–ò–Ø*\n"  # –ù–µ–º–Ω–æ–≥–æ —É—Ç–æ—á–Ω–∏–ª –∑–∞–≥–æ–ª–æ–≤–æ–∫
                                    "---\n"
                                    f"‚îú‚îÄ üìÜ *–ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è –¥–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è/–≤—ã–¥–∞—á–∏:* {planned_end_date}\n"  # –£—Ç–æ—á–Ω–∏–ª —Ç–µ–∫—Å—Ç
                                    f"‚îî‚îÄ üóÑÔ∏è *–°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è:* {storage_days}\n\n"  # –î–æ–±–∞–≤–∏–ª \n
                                )

                        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä, –æ –∫—É—Ä—å–µ—Ä–µ
                        if 'deliveryAgreement' in result and result['deliveryAgreement']:
                            agreement = result['deliveryAgreement']
                            message_text += (
                                "üöö *–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –î–û–°–¢–ê–í–ö–ï –ö–£–†–¨–ï–†–û–ú*\n"
                                "---\n"
                                f"‚îú‚îÄ *–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞:* {agreement.get('date', 'N/A')}\n"
                                f"‚îî‚îÄ *–°–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è:* {agreement.get('startTime', 'N/A')[:5]} - {agreement.get('endTime', 'N/A')[:5]}\n\n"
                            )

                        if 'courierProblem' in result and result['courierProblem']:
                            problem = result['courierProblem']
                            message_text += (
                                "‚ö†Ô∏è *–ü–†–û–ë–õ–ï–ú–ê –° –î–û–°–¢–ê–í–ö–û–ô*\n"
                                "---\n"
                                f"‚îî‚îÄ *–ü—Ä–∏—á–∏–Ω–∞:* {problem.get('reasonText', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
                            )
            # if response:
            #     order = response['result']['order']
            #     pwz = response['result']['updateInfo']['possibleDeliveryMode']
            #     sender = order['sender']
            #     receiver = order['receiver']
            #     sender_name_parts = sender['name'].split()
            #     sender_initials = ' '.join(
            #         [part[0] for part in sender_name_parts if part[0].isalpha()]) + '.' if sender_name_parts else ''
            #
            #     # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
            #     delivery_modes = {
            #         "1": "–¥–≤–µ—Ä—å-–¥–≤–µ—Ä—å",
            #         "2": "–¥–≤–µ—Ä—å-—Å–∫–ª–∞–¥",
            #         "3": "—Å–∫–ª–∞–¥-–¥–≤–µ—Ä—å",
            #         "4": "—Å–∫–ª–∞–¥-—Å–∫–ª–∞–¥",
            #         "5": "—Ç–µ—Ä–º–∏–Ω–∞–ª-—Ç–µ—Ä–º–∏–Ω–∞–ª",
            #         "6": "–¥–≤–µ—Ä—å-–ø–æ—Å—Ç–∞–º–∞—Ç",
            #         "7": "—Å–∫–ª–∞–¥-–ø–æ—Å—Ç–∞–º–∞—Ç",
            #     }
            #     delivery_mode = delivery_modes.get(order['trueDeliveryMode'], "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏")
            #
            #     message_text = (
            #         "üì¶ *–î–ê–ù–ù–´–ï –ü–û–°–´–õ–ö–ò*\n"
            #         "---\n"
            #         f"üÜî *–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:* `{order['number']}`\n"
            #         f"üì¶ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç:* {order['packagesCount']}\n"
            #         f"üìÖ *–°–æ–∑–¥–∞–Ω:* {order['creationTimestamp'][:10]}\n"
            #         f"‚öñÔ∏è *–í–µ—Å:* {order['weight']} –∫–≥\n"
            #         f"üöõ *–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:* {delivery_mode}\n\n"
            #
            #         "üë§ *–û–¢–ü–†–ê–í–ò–¢–ï–õ–¨*\n"
            #         "---\n"
            #         f"‚îú‚îÄ *–ò–º—è:* {sender_initials}\n"
            #         f"‚îî‚îÄ üèôÔ∏è *–ì–æ—Ä–æ–¥:* {sender['address']['city']['name']}\n\n"
            #
            #         "üì¨ *–ü–û–õ–£–ß–ê–¢–ï–õ–¨*\n"
            #         "---\n"
            #         f"‚îú‚îÄ *–ò–Ω–∏—Ü–∏–∞–ª—ã:* {receiver['initials']}\n"
            #     )
            #
            #     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—Ñ–∏—Å–∞
            #     if 'office' in receiver['address']:
            #         office = receiver['address']['office']
            #         message_text += (
            #             f"‚îú‚îÄ üè¢ *–ê–¥—Ä–µ—Å {office['type']}:* {receiver['address']['title']}, {receiver['address']['city']['name']}\n"
            #             f"‚îú‚îÄ *–û—Ñ–∏—Å:* {office['type']}\n"
            #             f"‚îú‚îÄ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {office['comment']}\n"
            #             f"‚îî‚îÄ *–ö–æ–Ω—Ç–∞–∫—Ç—ã:* {office['phones'][0]['number']}\n\n"
            #
            #             "üìä *–ò–°–¢–û–†–ò–Ø –î–û–°–¢–ê–í–ö–ò*\n"
            #             "---\n"
            #         )
            #
            #         for status in response['result']['statuses']:
            #             city_info = f" {status['currentCity']['name']}" if 'currentCity' in status else ''
            #             message_text += f"‚îú‚îÄ üîÑ *{status['name']}*{city_info}  {status['timestamp'][:10]}\n"
            #
            #         message_text += "\n"
            #         # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
            #         message_text += "üìÖ *–ì–†–ê–§–ò–ö –†–ê–ë–û–¢–´ –ü–í–ó*\n"
            #         message_text += "---\n"
            #         for schedule in office['schedule']:
            #             days = f"{schedule['startDay'][:3]} - {schedule['endDay'][:3]}" if schedule['startDay'] != \
            #                                                                                schedule['endDay'] else \
            #             schedule['startDay'][:3]
            #             working_hours = f"{schedule['startTime'][:5]} - {schedule['endTime'][:5]}"
            #             message_text += f"‚îú‚îÄ ‚Ä¢ *{days}:* {working_hours}\n"
            #
            #     # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–ª–∞–¥–µ
            #     if order['trueDeliveryMode'] not in ["1", "3"]:  # –ï—Å–ª–∏ –Ω–µ –¥–≤–µ—Ä-–¥–≤–µ—Ä—å –∏ –Ω–µ —Å–∫–ª–∞–¥-–¥–≤–µ—Ä—å
            #         if 'warehouse' in response['result']:
            #             warehouse = response['result']['warehouse']
            #             planned_end_date = warehouse.get('acceptance', {}).get('plannedEndDate', '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')
            #
            #             # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ö—Ä–∞–Ω–µ–Ω–∏–∏
            #             if 'storage' in warehouse and 'days' in warehouse['storage']:
            #                 storage_days = f"{warehouse['storage']['days']} –¥–Ω–µ–π"
            #             else:
            #                 storage_days = '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'
            #
            #             message_text += (
            #                 "\nüè≠ *–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ö–õ–ê–î–ï*\n"
            #                 "---\n"
            #                 f"‚îú‚îÄ üìÜ *–ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è –¥–∞—Ç–∞ –≤—ã–¥–∞—á–∏:* {planned_end_date}\n"
            #                 f"‚îî‚îÄ üóÑÔ∏è *–°—Ä–æ–∫ —Ö—Ä–∞–Ω–µ–Ω–∏—è:* {storage_days}\n"
            #             )
            #     else:
            #         message_text += ""


                def inline_keyboard():
                    keyboard = types.InlineKeyboardMarkup()
                    button = types.InlineKeyboardButton(text="–û—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ—Å—ã–ª–∫—É", callback_data='otsl')
                    keyboard.add(button)
                    return keyboard

                await message.answer(message_text,
                                    reply_markup=inline_keyboard(),
    parse_mode='Markdown')

            else:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—ã–ª–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except Exception as e:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            print(f"–û—à–∏–±–∫–∞: {e}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏



@dp.message_handler(lambda message: message.text == 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç')
async def process_zamena(message: types.Message):
    print("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã del –≤—ã–∑–≤–∞–Ω.")
    user = await check_user(message.from_user.id)
    if user:
        cursor.execute("DELETE FROM users WHERE id=?", (user[0],))
        conn.commit()
        await message.answer("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω.")
        await Form.login.set()
    else:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        await Form.login.set()


@dp.message_handler(state=Form.password)
async def process_password(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    login = user_data['login']
    password = message.text
    print(login, password)
    import requests
    import time

    def get_new_token(account, secure_password):
        auth_data = {
            'grant_type': 'client_credentials',
            'client_id': account,
            'client_secret': secure_password
        }
        headers = {
            'Content-Type': 'application/x-www-form-urlencoded'
        }
        auth_url = 'https://api.cdek.ru/v2/oauth/token?parameters'
        response = requests.post(auth_url, data=auth_data, headers=headers)
        if response.status_code == 200:
            token_info = response.json()
            print(token_info)
            return token_info
        else:
            print('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', response.json())
            return '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'


    tok = get_new_token(login, password)

    if tok == "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏":
        await message.answer(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–ª–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!")
        await state.finish()
    else:
        cursor.execute("INSERT INTO users (user_id, username, password) VALUES (?, ?, ?)",
                       (message.from_user.id, login, password))
        conn.commit()

        await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        await state.finish()

@dp.message_handler(lambda message: message.text == '/faq')
async def process_zamena(message: types.Message):
    from aiogram.types import InputMediaVideo
    # –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ –≤ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ
    video_path = os.path.join(os.getcwd(), 'video.mp4')  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ –∏ —Ç–µ–∫—Å—Ç–∞
    with open(video_path, 'rb') as video:
        media = InputMediaVideo(media=video, caption="–í–∏–¥–µ–æ: –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫–∞–∑–∞–Ω—ã –≤ –≤–∏–¥–µ–æ.")
        await message.answer_media_group([media])  # –ü–∞–∫–µ—Ç–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º send_video



# Define states for human operator chat
class HumanChatStates(StatesGroup):
    WAITING_FOR_OPERATOR = State()
    CHATTING_WITH_OPERATOR = State()


# List to store user IDs waiting for an operator
users_waiting_for_operator = []

# Dictionary to store active chats between users and operators
active_chats = {}

users_waiting_for_operator = []
operator_chat_id = 1252672778  # ID —á–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞

@dp.message_handler(Command("human_chat"))
async def request_human_chat(message: types.Message):
    user_id_to_check = message.from_user.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è

    if check_user_id_exists(user_id_to_check):
        user_id = message.from_user.id
        user_name = message.from_user.full_name
        if user_id in users_waiting_for_operator:
            await message.answer(f"{user_name}, –≤—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –∫ —á–µ–ª–æ–≤–µ–∫—É-–æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        else:
            users_waiting_for_operator.append(user_id)
            await message.answer(
                f"{user_name}, –≤–∞—Å –¥–æ–±–∞–≤–∏–ª–∏ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞-—á–µ–ª–æ–≤–µ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –û–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é.")
            await notify_operator(user_id, user_name)
    else:
        print(f'–î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚ùå')
        await message.answer(f"–î–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–æ–≥–æ–≤–æ—Ä–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º –∫–æ–º–ø–∞–Ω–∏–∏ –°–î–≠–ö. –ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏–ª–∏ –∑–∞–∫–ª—é—á–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä —Å –≥—Ä—É–ø–ø–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –°–î–≠–ö. –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚ùå")



async def notify_operator(user_id, user_name):
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–ù–∞—á–∞—Ç—å —á–∞—Ç", url=f"tg://user?id={user_id}")
    )
    try:
        await bot.send_message(
            operator_chat_id,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID: {user_id}) –∂–¥–µ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π –ø–æ–º–æ—â–∏. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —á–∞—Ç –Ω–∞–ø—Ä—è–º—É—é.",
            reply_markup=keyboard
        )
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {e}")

@dp.message_handler(Command("end_chat"))
async def end_wait(message: types.Message):
    user_id = message.from_user.id
    if user_id in users_waiting_for_operator:
        users_waiting_for_operator.remove(user_id)
        await message.answer("–í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")
    else:
        await message.answer("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ —á–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
@dp.message_handler(Command("mark_completed"))
async def mark_chat_completed(message: types.Message):
    if message.from_user.id == operator_chat_id:
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä —É–∫–∞–∑—ã–≤–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        try:
            user_id = int(message.get_args())
            if user_id in users_waiting_for_operator:
                users_waiting_for_operator.remove(user_id)
                await message.answer(f"–ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (ID: {user_id}) –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π.")
            else:
                await message.answer("–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è.")
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
    else:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤.")



# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /dan_zakaz
# @dp.message_handler(commands=['dan_zakaz'])
# async def cmd_dan_zakaz(message: types.Message):
#     # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
#     user_id_to_check = message.from_user.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
#
#     if check_user_id_exists(user_id_to_check):
#         await message.reply(
#             "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –≤–µ—Å –≤ –∫–≥ (5), –§–ò–û (–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á), –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–≤–≤–æ–¥ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏—è –±–µ–∑ –∑–∞–ø—è—Ç—ã—Ö), –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (7XXXXXXXXXX), –≥–æ—Ä–æ–¥ (–ú–æ—Å–∫–≤–∞), —É–ª–∏—Ü–∞ (—É–ª–∏—Ü–∞ –∫–æ—Å–º–∏—á–µ—Å–∫–∞—è 75)")
#         await Form.address.set()
#     else:
#         print(f'–î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚ùå')
#         await message.answer(f"–î–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–æ–≥–æ–≤–æ—Ä–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º –∫–æ–º–ø–∞–Ω–∏–∏ –°–î–≠–ö. –ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏–ª–∏ –∑–∞–∫–ª—é—á–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä —Å –≥—Ä—É–ø–ø–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –°–î–≠–ö. –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚ùå")
# –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
def get_cancel_inline_markup():
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥", callback_data="cancel_input"))
    return markup


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /dan_zakaz
@dp.message_handler(commands=['dan_zakaz'])
async def cmd_dan_zakaz(message: types.Message):
    user_id_to_check = message.from_user.id

    if check_user_id_exists(user_id_to_check):
        await message.reply(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–≤–µ—Å –≤ –∫–≥ (5), –§–ò–û (–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á), –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–≤–≤–æ–¥ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏—è –±–µ–∑ –∑–∞–ø—è—Ç—ã—Ö), "
            "–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (7XXXXXXXXXX), –≥–æ—Ä–æ–¥ (–ú–æ—Å–∫–≤–∞), —É–ª–∏—Ü–∞ (—É–ª–∏—Ü–∞ –∫–æ—Å–º–∏—á–µ—Å–∫–∞—è 75)\n\n"
            "–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
            reply_markup=get_cancel_inline_markup()
        )
        await Form.address.set()
    else:
        print(f'–î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚ùå')
        await message.answer(
            "–î–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–æ–≥–æ–≤–æ—Ä–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º –∫–æ–º–ø–∞–Ω–∏–∏ –°–î–≠–ö.\n"
            "–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ:\n"
            "1. –í–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n"
            "2. –ó–∞–∫–ª—é—á–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä —Å –≥—Ä—É–ø–ø–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –°–î–≠–ö\n\n"
            f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚ùå"
        )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞ (–∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞)
@dp.callback_query_handler(lambda c: c.data == "cancel_input", state='*')
async def cancel_input(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    current_state = await state.get_state()
    if current_state is None:
        return

    await state.finish()
    await bot.send_message(
        callback_query.from_user.id,
        "–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /dan_zakaz"
    )

@dp.message_handler(state=Form.address)
async def process_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_id = message.from_user.id
    data = message.text.split(',')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø—è—Ç—É—é –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–∞–Ω–Ω—ã—Ö
    if len(data) < 6:
        await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–µ–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
        return

    weight = data[0].strip()+"000" # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    name = data[1].strip()  # –§–∞–º–∏–ª–∏—è –ò–º—è
    comment = data[2].strip()
    phone_number = data[3].strip()
    city = data[4].strip()
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–ª–æ–≤–∞ –≤ –∞–¥—Ä–µ—Å
    address = data[5].strip()  # –í—Å–µ —Å–ª–æ–≤–∞ –ø–æ—Å–ª–µ –≥–æ—Ä–æ–¥–∞

    # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É user_zakaz
    cursor.execute('''INSERT INTO user_zakaz (user_id, weight, name, comment, phone_number, city, address) 
                          VALUES (?, ?, ?, ?, ?, ?, ?)''',
                   (user_id, weight, name, comment, phone_number, city, address))
    conn.commit()

    await message.reply("–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! üéâ")
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.finish()

# –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
cancel_button = InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥", callback_data='cancel')
cancel_keyboard = InlineKeyboardMarkup().add(cancel_button)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞
@dp.callback_query_handler(lambda c: c.data == 'cancel', state='*')
async def cancel_input(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback_query.message.edit_text("‚úÖ –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=None) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback_query.answer() # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏"

# def get_date_keyboard():
#     keyboard = InlineKeyboardMarkup(row_width=1)
#     today = datetime.now()
#     for i in range(1, 6):  # Next 5 days
#         date = today + timedelta(days=i)
#         date_str = date.strftime("%Y-%m-%d")
#         keyboard.add(InlineKeyboardButton(date_str, callback_data=f"date_{date_str}"))
#     return keyboard
#
#
# def get_time_keyboard():
#     keyboard = InlineKeyboardMarkup(row_width=1)
#     for hour in range(10, 14):  # From 10 to 13
#         time_str = f"{hour:02d}:00"
#         keyboard.add(InlineKeyboardButton(time_str, callback_data=f"time_{time_str}"))
#     return keyboard
#
#
# @dp.message_handler(commands=['zabor_konsalid'])
# async def zabor_konsalid(message: types.Message):
#     user_id_to_check = message.from_user.id
#     if check_user_id_exists(user_id_to_check):
#         await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=get_date_keyboard())
#         await Form.date.set()
#     else:
#         await message.answer(f"–î–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–æ–≥–æ–≤–æ—Ä–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º –∫–æ–º–ø–∞–Ω–∏–∏ –°–î–≠–ö. –ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏–ª–∏ –∑–∞–∫–ª—é—á–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä —Å –≥—Ä—É–ø–ø–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –°–î–≠–ö. –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚ùå")
#
#
# @dp.callback_query_handler(lambda c: c.data.startswith('date_'), state=Form.date)
# async def process_date(callback_query: types.CallbackQuery, state: FSMContext):
#     await bot.answer_callback_query(callback_query.id)
#     selected_date = callback_query.data.split('_')[1]
#     await state.update_data(date=selected_date)
#     await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:", reply_markup=get_time_keyboard())
#     await Form.time.set()
#
#
# @dp.callback_query_handler(lambda c: c.data.startswith('time_'), state=Form.time)
# async def process_time(callback_query: types.CallbackQuery, state: FSMContext):
#     await bot.answer_callback_query(callback_query.id)
#     selected_time = callback_query.data.split('_')[1]
#     data = await state.get_data()
#     selected_date = data['date']
#
#     # Assume the duration is 5 hours
#     start_time = datetime.strptime(selected_time, "%H:%M")
#     end_time = (start_time + timedelta(hours=5)).strftime("%H:%M")
#
#     full_data = f"{selected_date} {selected_time} {end_time}"
#     await state.update_data(konsalid=full_data)
#     print("------")
#     await bot.send_message(
#         callback_query.from_user.id,
#         f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ: {full_data}. –û–∂–∏–¥–∞–π—Ç–µ, –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
#     )
#     print("------")
#     # Process the data
#     user_id = callback_query.from_user.id
#     cursor.execute("""
#         SELECT weight, name, comment, phone_number, city, address
#         FROM user_zakaz
#         WHERE user_id = ?
#         ORDER BY created_at DESC
#         LIMIT 1
#     """, (user_id,))
#     user_data = cursor.fetchone()
#     print("------")
#     if user_data:
#         from dublikat_zayavki import create_call_request_kurier_konsol
#         weight, name, comment, phone_number, city, address = user_data
#         konsol = create_call_request_kurier_konsol(weight, name, comment, phone_number, city, address, selected_date,
#                                                    selected_time, end_time, user_id)
#         await bot.send_message(callback_query.from_user.id, konsol)
#     else:
#         await bot.send_message(callback_query.from_user.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É /dan_zakaz –∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —ç—Ç–æ –º–µ–Ω—é")
#
#     await state.finish()
def get_date_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    today = datetime.now()
    for i in range(1, 6):  # Next 5 days
        date = today + timedelta(days=i)
        date_str = date.strftime("%Y-%m-%d")
        keyboard.add(InlineKeyboardButton(date_str, callback_data=f"date_{date_str}"))
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥", callback_data="cancel_input"))
    return keyboard


def get_time_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    for hour in range(10, 14):  # From 10 to 13
        time_str = f"{hour:02d}:00"
        keyboard.add(InlineKeyboardButton(time_str, callback_data=f"time_{time_str}"))
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    keyboard.add(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥", callback_data="cancel_input"))
    return keyboard


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞
@dp.callback_query_handler(lambda c: c.data == "cancel_input", state='*')
async def cancel_input(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    await state.finish()
    await bot.send_message(
        callback_query.from_user.id,
        "‚ùå –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω. –î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /zabor_konsalid"
    )


@dp.message_handler(commands=['zabor_konsalid'])
async def zabor_konsalid(message: types.Message):
    user_id_to_check = message.from_user.id
    if check_user_id_exists(user_id_to_check):
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
            reply_markup=get_date_keyboard()
        )
        await Form.date.set()
    else:
        await message.answer(
            "–î–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–æ–≥–æ–≤–æ—Ä–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º –∫–æ–º–ø–∞–Ω–∏–∏ –°–î–≠–ö. "
            "–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç "
            "–∏–ª–∏ –∑–∞–∫–ª—é—á–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä —Å –≥—Ä—É–ø–ø–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –°–î–≠–ö.\n\n"
            f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚ùå"
        )


@dp.callback_query_handler(lambda c: c.data.startswith('date_'), state=Form.date)
async def process_date(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    selected_date = callback_query.data.split('_')[1]
    await state.update_data(date=selected_date)
    await bot.send_message(
        callback_query.from_user.id,
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:",
        reply_markup=get_time_keyboard()
    )
    await Form.time.set()


@dp.callback_query_handler(lambda c: c.data.startswith('time_'), state=Form.time)
async def process_time(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    selected_time = callback_query.data.split('_')[1]
    data = await state.get_data()
    selected_date = data['date']

    # Assume the duration is 5 hours
    start_time = datetime.strptime(selected_time, "%H:%M")
    end_time = (start_time + timedelta(hours=3)).strftime("%H:%M")

    full_data = f"{selected_date} {selected_time} {end_time}"
    await state.update_data(konsalid=full_data)

    await bot.send_message(
        callback_query.from_user.id,
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ: {full_data}. –û–∂–∏–¥–∞–π—Ç–µ, –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
    )

    # Process the data
    user_id = callback_query.from_user.id
    cursor.execute("""
        SELECT weight, name, comment, phone_number, city, address 
        FROM user_zakaz 
        WHERE user_id = ? 
        ORDER BY created_at DESC 
        LIMIT 1
    """, (user_id,))
    user_data = cursor.fetchone()

    if user_data:
        from dublikat_zayavki import create_call_request_kurier_konsol
        weight, name, comment, phone_number, city, address = user_data
        konsol = create_call_request_kurier_konsol(
            weight, name, comment, phone_number,
            city, address, selected_date,
            selected_time, end_time, user_id
        )
        await bot.send_message(callback_query.from_user.id, konsol)
    else:
        await bot.send_message(
            callback_query.from_user.id,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. "
            "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É /dan_zakaz –∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —ç—Ç–æ –º–µ–Ω—é"
        )

    await state.finish()


@dp.message_handler(lambda message: message.text == '/nomer')
async def handle_enter_waybill(message: types.Message, state: FSMContext):
    user_id_to_check = message.from_user.id

    if check_user_id_exists(user_id_to_check):
        print(f'–î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–∞–π–¥–µ–Ω—ã! ‚úÖ')
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        cancel_button = InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_order")
        keyboard = InlineKeyboardMarkup().add(cancel_button)


        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (–Ω–∞–∫–ª–∞–¥–Ω–æ–π):", reply_markup=keyboard)
        await Form.order_number.set()
    else:
        print(f'–î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚ùå')
        await message.answer(f"–î–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–æ–≥–æ–≤–æ—Ä–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º –∫–æ–º–ø–∞–Ω–∏–∏ –°–î–≠–ö. –ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏–ª–∏ –∑–∞–∫–ª—é—á–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä —Å –≥—Ä—É–ø–ø–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –°–î–≠–ö. –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚ùå")


@dp.callback_query_handler(lambda c: c.data == 'cancel_order', state=Form.order_number)
async def cancel_order_number(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback_query.answer()  # –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏
    await bot.send_message(callback_query.from_user.id, "–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞.", reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(lambda message: message.text == '/im')
async def handle_enter_webshop_order(message: types.Message, state: FSMContext):
    user_id_to_check = message.from_user.id

    if check_user_id_exists(user_id_to_check):
        print(f'–î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–∞–π–¥–µ–Ω—ã! ‚úÖ')


        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        cancel_button = InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_order_im")
        keyboard = InlineKeyboardMarkup().add(cancel_button)

        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:", reply_markup=keyboard)
        await Form.order_number2.set()
    else:
        print(f'–î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚ùå')
        await message.answer(f"–î–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–æ–≥–æ–≤–æ—Ä–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º –∫–æ–º–ø–∞–Ω–∏–∏ –°–î–≠–ö. –ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏–ª–∏ –∑–∞–∫–ª—é—á–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä —Å –≥—Ä—É–ø–ø–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –°–î–≠–ö. –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚ùå")


@dp.callback_query_handler(lambda c: c.data == 'cancel_order_im', state=Form.order_number2)
async def cancel_order_webshop(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback_query.answer()  # –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏
    await bot.send_message(callback_query.from_user.id, "–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞.",
                           reply_markup=types.ReplyKeyboardRemove())

@dp.callback_query_handler(lambda c: c.data == 'list_offices')
async def handle_list_offices(message: types.Message, state: FSMContext):
    user_id_to_check = message.from_user.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    if check_user_id_exists(user_id_to_check):
        print(f'–î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–∞–π–¥–µ–Ω—ã! ‚úÖ')
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
        await Form.order_number3.set()
    else:
        print(f'–î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚ùå')
        await message.answer(f"–î–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–æ–≥–æ–≤–æ—Ä–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º –∫–æ–º–ø–∞–Ω–∏–∏ –°–î–≠–ö. –ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏–ª–∏ –∑–∞–∫–ª—é—á–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä —Å –≥—Ä—É–ø–ø–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –°–î–≠–ö. –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚ùå")


# –°–æ–∑–¥–∞–µ–º –æ–±—â—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
cancel_button = InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥", callback_data='cancel_input')
cancel_keyboard = InlineKeyboardMarkup().add(cancel_button)

@dp.callback_query_handler(lambda c: c.data == 'change_fullname')
async def handle_change_fullname(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û:", reply_markup=cancel_keyboard)
    await Form.fio.set()

@dp.callback_query_handler(lambda c: c.data == 'change_phone')
async def handle_change_phone(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=cancel_keyboard)
    await Form.tel.set()

@dp.callback_query_handler(lambda c: c.data == 'address')
async def handle_address(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—ã–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏. –û–±—Ä–∞—â–∞–µ–º –≤–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ —á—Ç–æ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ–ª–∂–µ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –∫–æ–Ω–µ—á–Ω–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–≥–æ –ø—É–Ω–∫—Ç–∞ (–≥–æ—Ä–æ–¥–∞) –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ—Å—ã–ª–∫–∏. –í  —Ñ–æ—Ä–º–∞—Ç–µ (–ú–æ—Å–∫–≤–∞, —É–ª–∏—Ü–∞ –ö–æ—Å–º–æ–Ω–∞–≤—Ç–æ–≤ 1):", reply_markup=cancel_keyboard)
    await Form.adr.set()

@dp.callback_query_handler(lambda c: c.data == 'change_city')
async def handle_change_city(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥. –ü—Ä–∏–º–µ—Ä (–ú–æ—Å–∫–≤–∞):", reply_markup=cancel_keyboard)
    await Form.cit.set()



@dp.callback_query_handler(lambda c: c.data == 'change_pickup_point', state='*')
async def handle_change_pickup_point(callback_query: types.CallbackQuery, state: FSMContext):
    # –î–æ—Å—Ç–∞–µ–º order_info –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–∫–∞–∫ —ç—Ç–æ –¥–µ–ª–∞–µ—Ç–µ –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö)
    connection = sqlite3.connect('users.db') #–°–æ–∑–¥–∞–µ–º –∫–æ–Ω–Ω–µ–∫—Ç
    cursor = connection.cursor() #–°–æ–∑–¥–∞–µ–º –∫—É—Ä—Å–æ—Ä
    cursor.execute("SELECT order_info FROM new_orders WHERE user_id = ? ORDER BY id DESC LIMIT 1", (callback_query.from_user.id,)) #–î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –≤ –ë–î
    order_info = cursor.fetchone() #–ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    connection.close() #–ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ

    if order_info:
        order_info_str = order_info[0]
        try:
            order_info_dict = ast.literal_eval(order_info_str)
            uuid = order_info_dict['entity']['uuid']
            await state.update_data(uuid=uuid) #–°–æ—Ö—Ä–∞–Ω—è–µ–º uuid –≤ state
        except (ValueError, SyntaxError, KeyError) as e:
            await bot.send_message(callback_query.from_user.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞: {e}")
            await state.finish()
            return
        await bot.send_message(callback_query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–ú–æ—Å–∫–≤–∞, —É–ª–∏—Ü–∞ –ö–æ—Å–º–æ–Ω–∞–≤—Ç–æ–≤ 1):", reply_markup=cancel_keyboard)
        await Form.waiting_for_city.set()
    else:
        await bot.send_message(callback_query.from_user.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.finish()



async def api_address(address):
    #  Replace with your actual Dadata token and secret
    token = "28f0c46ebf7a04748add3fc4f2990d2b2b979d44"  # Replace with your Dadata token
    secret = "576db248eb70b56c0f1649f1242cddeecabc9d92"

    #  Replace with your actual Dadata token and secret
    from dadata import Dadata  # Import here to avoid global scope issues if dadata is not always needed

    dadata = Dadata(token, secret)
    try:
        result = dadata.clean("address", address)
        return json.dumps(result, ensure_ascii=False, indent=2), result
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞ '{address}': {e}")
        return None, None


@dp.message_handler(content_types=types.ContentType.TEXT, state=Form.waiting_for_city)
async def gdp_city(message: types.Message, state: FSMContext):
    """Handles the city input for GDP, using Dadata to standardize the address and offering confirmation buttons."""
    print(f"gdp_city called with state: {await state.get_state()}")
    address = message.text

    # –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    loading_symbols = ["\u25D0", "\u25D1", "\u25D2", "\u25D3"]
    loading_message = await bot.send_message(
        message.chat.id,
        "–ò–¥–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞...",
    )

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        async def animate_loading():
            index = 0
            while True:
                await asyncio.sleep(0.5)  # –ú–µ–Ω—è–µ–º —Å–∏–º–≤–æ–ª –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫—É–Ω–¥—ã
                index = (index + 1) % len(loading_symbols)
                new_text = "‚è≥ –ò–¥–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞..." + loading_symbols[index]
                try:
                    await bot.edit_message_text(
                        chat_id=message.chat.id,
                        message_id=loading_message.message_id,
                        text=new_text,
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        animation_task = asyncio.create_task(animate_loading())

        # Call Dadata API to standardize address
        api_response, api_result = await api_address(address)  # Use await here
        animation_task.cancel()

        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=loading_message.message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

        if api_response:

            # Extract relevant information from the api_result
            city = api_result.get("settlement") or api_result.get("city") or api_result.get("region") or ""
            if api_result.get("settlement"):
                city_type = api_result.get("settlement_type_full") or "–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç"
                city = f"{city}"
            elif api_result.get("city"):
                city_type = api_result.get("city_type_full") or "–≥–æ—Ä–æ–¥"
                city = f"{city}"
            elif api_result.get("region"):
                city_type = api_result.get("region_type_full") or "—Ä–µ–≥–∏–æ–Ω"
                city = f"{api_result.get('region')}"
            street = api_result.get("street")
            house = api_result.get("house")

            formatted_address = f"{city}, —É–ª {street}, –¥ {house}" if house else f"–≥ {city}, —É–ª {street}"



            # Create inline keyboard for confirmation
            keyboard = InlineKeyboardMarkup()
            yes_button = InlineKeyboardButton(text="–î–∞", callback_data="address_yes")
            no_button = InlineKeyboardButton(text="–ù–µ—Ç", callback_data="address_no")
            cancel_button = InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="address_cancel")  # Add cancel button

            keyboard.add(yes_button, no_button, cancel_button)

            # Send the standardized address with confirmation buttons
            await bot.send_message(
                message.chat.id,
                f"–ú—ã —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–æ–≤–∞–ª–∏ –≤–∞—à –∞–¥—Ä–µ—Å:\n\n{formatted_address}\n\n–≠—Ç–æ –≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å?",
                reply_markup=keyboard,
            )
            print(api_result)
            # Store the standardized address and original address in the state
            await state.update_data(standardized_address=api_result)
            await state.update_data(original_address=address)
            await Form.address_confirmation.set()  # Set state for address confirmation
            print(f"State set to Form.address_confirmation")

        else:
            await bot.send_message(
                message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–¥—Ä–µ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
            await state.finish()

    except Exception as e:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=loading_message.message_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ Dadata:")
        await bot.send_message(
            message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞: {e}. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )
        await state.finish()
    print(f"gdp_city finished")


@dp.callback_query_handler(state=Form.address_confirmation)
async def address_confirmation_callback(query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±—Ä–∞—Ç–Ω—ã–π –≤—ã–∑–æ–≤ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å."""
    if query.data == "address_yes":
        # User confirmed the address
        data = await state.get_data()
        print(data.get("standardized_address"))
        standardized_address = data.get("standardized_address")
        if standardized_address:
            city = standardized_address.get("settlement") or standardized_address.get("city")
            if standardized_address.get("settlement"):
                city_type = standardized_address.get("settlement_type_full") or "–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç"
                city = f"{city}"
            elif standardized_address.get("city"):
                city_type = standardized_address.get("city_type_full") or "–≥–æ—Ä–æ–¥"
                city = f"{city}"
            elif standardized_address.get("region"):
                city_type = standardized_address.get("region_type_full") or "—Ä–µ–≥–∏–æ–Ω"
                city = f"{standardized_address.get('region')}"

            street = standardized_address.get("street") or ""  # get street
            house = standardized_address.get("house") or ""  # get house number
            # Combine street and house number (if available)
            full_street = f"{street} {house}" if street and house else street if street else ""

            print('===================', city, full_street)

            await state.update_data(city=city)
            await state.update_data(street=full_street)

            # Proceed with getting nearest offices
            await query.message.edit_text("–°–ø–∞—Å–∏–±–æ! –ù–∞—á–∏–Ω–∞—é –ø–æ–∏—Å–∫ –±–ª–∏–∂–∞–π—à–∏—Ö –ü–í–ó...")  # Update the message
            await get_nearest_offices_and_display(query.message, state, city, full_street) # Call function to handle the rest
        else:
            await query.message.edit_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –°—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.finish()


    elif query.data == "address_no":
        # User rejected the address
        await query.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –µ—â–µ —Ä–∞–∑.")
        await Form.waiting_for_city.set()  # Go back to waiting for city input
        print(f"State set back to Form.waiting_for_city")



    elif query.data == "address_cancel":
        # User cancelled the operation
        await query.message.edit_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.finish() #finish the state

    await query.answer()  # Acknowledge the callback


async def get_nearest_offices_and_display(message: types.Message, state: FSMContext, city: str, street: str):
    """Helper function to get nearest offices and display them."""
    id = message.from_user.id
    # –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    loading_symbols = ["\u25D0", "\u25D1", "\u25D2", "\u25D3"]  # ‚ó∞ ‚ó± ‚ó≤ ‚ó≥
    loading_message = await bot.send_message(
        message.chat.id,
        "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫ –ü–í–ó. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—Ç 5 —Å–µ–∫—É–Ω–¥ –¥–æ 1 –º–∏–Ω—É—Ç—ã, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ü–í–ó." + loading_symbols[0],  # –ù–∞—á–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª
    )

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞
        async def animate_loading():
            index = 0
            while True:
                await asyncio.sleep(0.01)  # –ú–µ–Ω—è–µ–º —Å–∏–º–≤–æ–ª –∫–∞–∂–¥—ã–µ 0.5 —Å–µ–∫—É–Ω–¥—ã
                index = (index + 1) % len(loading_symbols)
                new_text = "üîé –ò—â–µ–º –ü–í–ó... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—Ç 5 —Å–µ–∫—É–Ω–¥ –¥–æ 1 –º–∏–Ω—É—Ç—ã, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ü–í–ó." + loading_symbols[index]
                try:
                    await bot.edit_message_text(
                        chat_id=message.chat.id,
                        message_id=loading_message.message_id,
                        text=new_text,
                    )
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}") #–õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å

        animation_task = asyncio.create_task(animate_loading()) #–ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é

        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–ª–∏–∂–∞–π—à–∏—Ö –æ—Ñ–∏—Å–æ–≤ CDEK
        nearest_offices = await get_nearest_gdp_offices(id, city, street)  # await —Ç—É—Ç
        animation_task.cancel() #–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–Ω–∏–º–∞—Ü–∏—é –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö

        if nearest_offices:
            #–°–æ—Ö—Ä–∞–Ω—è–µ–º nearest_offices –≤ state
            await state.update_data(nearest_offices=nearest_offices)
            keyboard = types.InlineKeyboardMarkup(row_width=1)

            def extract_street_and_number(address_string):
                parts = address_string.split(',')
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ —á–∞—Å—Ç–µ–π, —á—Ç–æ–±—ã —É–ª–∏—Ü–∞ –∏ –Ω–æ–º–µ—Ä —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª–∏
                if len(parts) >= 5:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–ª–∏—Ü—É –∏ –Ω–æ–º–µ—Ä –¥–æ–º–∞ (–æ–Ω–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ 4-–º —ç–ª–µ–º–µ–Ω—Ç–µ)
                    street_part = parts[4].strip()  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã

                    # –¢–µ–ø–µ—Ä—å —Ä–∞–∑–¥–µ–ª—è–µ–º street_part, —á—Ç–æ–±—ã –æ—Ç–¥–µ–ª–∏—Ç—å —É–ª–∏—Ü—É –æ—Ç –Ω–æ–º–µ—Ä–∞ –¥–æ–º–∞
                    street_parts = street_part.split(', ')  # –†–∞–∑–¥–µ–ª—è–µ–º –ø–æ –∑–∞–ø—è—Ç–æ–π –∏ –ø—Ä–æ–±–µ–ª—É

                    if len(street_parts) >= 1:
                        street = street_parts[0].strip()
                        number = None

                        # –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–º–µ—Ä –¥–æ–º–∞
                        if len(street_parts) > 1:
                            number = street_parts[1].strip()  # –Ω–æ–º–µ—Ä –¥–æ–º–∞
                        elif len(parts) >= 6:
                            number = parts[5].strip()

                        return street, number
                    else:
                        return street_part, None
                else:
                    return None, None  # –ò–ª–∏ –∫–∞–∫–æ–µ-—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ, –µ—Å–ª–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∞–¥—Ä–µ—Å–∞ –Ω–µ–≤–µ—Ä–Ω–∞


            for office in nearest_offices:
                office_code = office['code']
                print(office['address'][2:-1])
                city_code = office['city_code']
                button_text = f"{office['address']}"
                address = office['address']
                street, number = extract_street_and_number(address)  # –ü–æ–ª—É—á–∞–µ–º –∏ —É–ª–∏—Ü—É, –∏ –Ω–æ–º–µ—Ä –¥–æ–º–∞

                if street and number:
                    button_text = f"{street}, –¥. {number}"  # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –∫–Ω–æ–ø–∫–∏
                elif street:
                    button_text = street
                else:
                    button_text = "–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω"
                callback_data = f"gdp_office:{office_code}:{city_code}"
                keyboard.add(types.InlineKeyboardButton(text=button_text , callback_data=callback_data))

            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=loading_message.message_id)
            except Exception as e:
                 logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

            await bot.send_message(
                message.chat.id,
                "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–∏–∂–∞–π—à–µ–µ –ü–í–ó:",
                reply_markup=keyboard
            )
            await Form.pwz.set()
            print(f"State set to Form.pwz")

        else:
            try:
                await bot.delete_message(chat_id=message.chat.id, message_id=loading_message.message_id)
            except Exception as e:
                 logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
            await bot.send_message(message.chat.id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ—Ñ–∏—Å—ã CDEK –≤ –≥–æ—Ä–æ–¥–µ {city}.")
            await state.finish()

    except Exception as e:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=loading_message.message_id)
        except Exception as e:
             logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ñ–∏—Å–æ–≤ CDEK:")
        await bot.send_message(message.chat.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ñ–∏—Å–æ–≤ CDEK: {e}")
        await state.finish()
    print(f"gdp_city finished")


@dp.callback_query_handler(lambda c: c.data.startswith('gdp_office:'), state=Form.pwz)
async def process_entering_pwz(callback_query: types.CallbackQuery, state: FSMContext):
    id = callback_query.from_user.id
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ü–í–ó –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ."""
    print(f"process_entering_pwz called with data: {callback_query.data} and state: {await state.get_state()}")
    try:
        office_data = callback_query.data.split(':')
        office_code = office_data[1]
        city_code = office_data[2]

        data = await state.get_data()
        city = data.get('city')
        street = data.get('street')

        # –ü–æ–ª—É—á–∞–µ–º UUID –∏–∑ FSM
        uuid = data.get('uuid')  # –î–æ—Å—Ç–∞—Ç—å uuid –∏–∑ state
        if uuid is None:
            await bot.send_message(callback_query.from_user.id,
                                   "UUID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ FSM. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            await state.finish()
            return

        # –ù–∞—Ö–æ–¥–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ñ–∏—Å –≤ nearest_offices
        nearest_offices = data.get('nearest_offices', [])

        logger.info(f"callback_query.data: {callback_query.data}")
        logger.info(f"office_code –∏–∑ callback_data: {office_code}")
        logger.info(f"city_code –∏–∑ callback_data: {city_code}")
        logger.info(f"nearest_offices –∏–∑ state: {nearest_offices}")

        selected_office = None
        for office in nearest_offices:
            logger.info(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ: office['code'] == office_code: {office['code']} == {office_code}, office['city_code'] == city_code: {office['city_code']} == {city_code}")
            if office['code'] == office_code and str(office['city_code']) == city_code: #<----–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å—Ç—Ä–æ–∫—É
                selected_office = office
                break


        if selected_office:
            # Save the selected office data to the state
            await state.update_data(selected_office=selected_office)

            # Extract address from selected_office
            full_address = selected_office.get('address', '–ê–¥—Ä–µ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω')

            print(f"Calling change_delivery_point with uuid: {uuid}, office_code: {office_code}, city_code: {city_code}, street: {street}, city: {city}")  # –õ–æ–≥
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑–º–µ–Ω–µ–Ω–∏—è –ü–í–ó –∏ –ø–µ—Ä–µ–¥–∞–µ–º office_code –∏ city_code
            api_response = await change_delivery_point(id, uuid, office_code, city_code, full_address)  # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é change_delivery_point –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç

            if api_response:  # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–µ–Ω
                #–ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ api_response
                #–ü—Ä–∏–º–µ—Ä (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞ API)
                try:
                    new_pvz_code = api_response['entity']['delivery_point']
                    #full_address = api_response['entity']['to_location']['address'] #–µ—Å–ª–∏ –∞–¥—Ä–µ—Å –µ—Å—Ç—å –≤ –æ—Ç–≤–µ—Ç–µ
                    #work_time = api_response['entity']['work_time'] #–µ—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
                except (KeyError, TypeError):
                    new_pvz_code = office_code  #–ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–∑ –æ—Ç–≤–µ—Ç–∞, –±–µ—Ä–µ–º office_code
                    #full_address = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–¥—Ä–µ—Å"
                    #work_time = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã"

                message_text = (
                    "–ü–í–ó —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!\n"
                    f"–ù–æ–≤—ã–π –ü–í–ó: {new_pvz_code}\n"
                    f"–ê–¥—Ä–µ—Å: {full_address}\n" #  <----  –í–æ—Ç –≥–¥–µ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ –∞–¥—Ä–µ—Å
                   # f"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {work_time}\n"

                )


                await bot.send_message(
                    callback_query.from_user.id,
                    message_text,
                    reply_markup=types.ReplyKeyboardRemove()
                )
                # –∑–¥–µ—Å—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ü–í–ó
            else:  # –ï—Å–ª–∏ –Ω–µ—É—Å–ø–µ—à–µ–Ω
                await bot.send_message(
                    callback_query.from_user.id,
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –ü–í–ó. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=types.ReplyKeyboardRemove()
                )
        else:
            await bot.send_message(callback_query.from_user.id,
                                   "–í—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ñ–∏—Å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
            await state.finish()
            return
        await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –ü–í–ó
    except Exception as e:  # –õ–æ–≤–∏–º –æ—à–∏–±–∫—É
        print(f"Error in process_entering_pwz: {e}")  # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ


import aiohttp
import json
import logging

logger = logging.getLogger(__name__)


async def change_delivery_point(id, uuid: str, delivery_point_code: str, city_code: str, new_address: str = None):
    token = get_token(id) #  –í–æ–∑–≤—Ä–∞—â–∞–µ–º await
    print('===========', uuid, delivery_point_code, city_code, new_address, "=================")
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∏–∑–º–µ–Ω—è–µ—Ç –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –∑–∞–∫–∞–∑–æ–≤ (–ü–í–ó) –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∑–∞–∫–∞–∑–∞,
    –∏—Å–ø–æ–ª—å–∑—É—è delivery_point –∏ city_code.

    Args:
        uuid (str): UUID –∑–∞–∫–∞–∑–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å.
        delivery_point_code (str): –ö–æ–¥ –Ω–æ–≤–æ–≥–æ –ü–í–ó.
        city_code (str): –ö–æ–¥ –≥–æ—Ä–æ–¥–∞.

    Returns:
        dict: –û—Ç–≤–µ—Ç –æ—Ç API –°–î–≠–ö (JSON). None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏.
    """
    url = f"https://api.cdek.ru/v2/orders?im_number={uuid}"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {token}"
    }

    # –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä—É–∫—Ç—É—Ä—ã payload (–Ω—É–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—ã–π API –°–î–≠–ö)
    payload = {
        "uuid": uuid,  # –î–æ–±–∞–≤–ª—è–µ–º UUID
        "type": 1, # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –≤–∞—Å —Ç–∏–ø –∑–∞–∫–∞–∑–∞ 1
        "delivery_point": delivery_point_code, # –ö–æ–¥ –ü–í–ó
        "tariff_code": 136,
    }

    logger.debug(f"URL: {url}")
    logger.debug(f"Headers: {headers}")
    logger.debug(f"Payload: {payload}")


    async with (aiohttp.ClientSession() as session):
        try:
            async with session.patch(url, headers=headers, data=json.dumps(payload)) as response:
                response_text = await response.text()
                logger.debug(f"Response status: {response.status}")
                logger.debug(f"Response text: {response_text}")

                if response.status == 202:
                    pvz_response = await response.json()
                    print(pvz_response)
                    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∞–¥—Ä–µ—Å–∞
                    if new_address:
                        street = ""
                        house_number = ""
                        import re

                        match = new_address


                        if new_address:
                            street_and_house = new_address
                            print(street_and_house)
                        else:
                            print("–£–ª–∏—Ü–∞ –∏ –¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                        await asyncio.sleep(3)  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –≤ 2 —Å–µ–∫—É–Ω–¥—ã
                        address_payload = {
                            "uuid": uuid,  # –î–æ–±–∞–≤–ª—è–µ–º UUID
                            # "type": 1,  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –≤–∞—Å —Ç–∏–ø –∑–∞–∫–∞–∑–∞ 1
                            "to_location": {
                                "address": street_and_house,
                                # "code": city_code  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å city_code –∏–ª–∏ city
                            },
                        }

                        logger.debug(f"URL (–ê–¥—Ä–µ—Å): {url}")
                        logger.debug(f"Payload (–ê–¥—Ä–µ—Å): {address_payload}")

                        async with session.patch(url, headers=headers,
                                                 data=json.dumps(address_payload)) as address_response:
                            address_response_text = await address_response.text()
                            logger.debug(f"Response status (–ê–¥—Ä–µ—Å): {address_response.status}")
                            logger.debug(f"Response text (–ê–¥—Ä–µ—Å): {address_response_text}")

                            if address_response.status == 202:
                                address_response_json = await address_response.json()
                                print(address_response_json)
                                return address_response_json  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–¥—Ä–µ—Å–∞
                            else:
                                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–∞: {address_response.status}")
                                print(f"Response text (–ê–¥—Ä–µ—Å): {address_response_text}")
                                return None  # –ò–ª–∏ –º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å pvz_response, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –ü–í–ó –±—ã–ª–æ —É—Å–ø–µ—à–Ω—ã–º

                    return pvz_response  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∑–∞–ø—Ä–æ—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ü–í–ó

                else:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ü–í–ó: {response.status}")
                    print(f"Response text (–ü–í–ó): {response_text}")
                    return None
        except aiohttp.ClientError as e:
            print(f"–û—à–∏–±–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ aiohttp: {e}")
            return None
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            return None





@dp.callback_query_handler(lambda c: c.data == 'izmenit_za_tovar')
async def handle_izmenit_za_tovar(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –ù–æ–≤–∞—è —Å—É–º–º–∞ –Ω–∞–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ —Ç–æ–≤–∞—Ä:", reply_markup=cancel_keyboard)
    await Form.inpzt.set()

@dp.callback_query_handler(lambda c: c.data == 'izmenit_za_dop')
async def handle_izmenit_za_dop(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–ø —Å–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ (–ø—Ä–∏–º–µ—Ä 1000):", reply_markup=cancel_keyboard)
    await Form.npdc.set()

@dp.callback_query_handler(lambda c: c.data == 'duplicate_waybill')
async def handle_duplicate_waybill(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π CDEK:", reply_markup=cancel_keyboard)
    await Form.dubl.set()

@dp.callback_query_handler(lambda c: c.data == '–ó–∞–∫–∞–∑–∞—Ç—å –∫—É—Ä—å–µ—Ä–∞')
async def handle_zakazati_kyriera(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π CDEK, –¥–∞—Ç—É, –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞, –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏ –∞–¥—Ä–µ—Å. –ù–∞–ø—Ä–∏–º–µ—Ä: 10006324754 2024-07-10 10:00 15:00 —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 1", reply_markup=cancel_keyboard)
    await Form.kurier.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞
@dp.callback_query_handler(lambda c: c.data == 'cancel_input')
async def cancel_input(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await bot.send_message(callback_query.from_user.id, "‚úÖ –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")



async def process_order_info(message: types.Message, state: FSMContext, info_function, inline_buttons_data):
    order_number = message.text
    current_time = datetime.now()
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ–∏—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä
    if not order_number.isdigit():
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")
        await state.finish()
        return  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π

    # Check if user has entered data within the last 15 minutes
    cursor.execute("SELECT * FROM new_orders WHERE user_id = ? AND created_at > ?",
                   (user_id, current_time - timedelta(minutes=15)))
    recent_order = cursor.fetchone()

    print(user_id)

    # Use recent order info if available, otherwise fetch new order info
    if recent_order:
        order_info = recent_order[2]
    else:
        order_info = info_function(order_number, user_id)

    if order_info:
        order_info_str = str(order_info)
        cursor.execute("INSERT INTO new_orders (user_id, cdek_number, order_info) VALUES (?, ?, ?)",
                       (message.from_user.id, order_number, order_info_str))
        conn.commit()

        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é —Å –æ–ø—Ü–∏—è–º–∏
        inline_keyboard = InlineKeyboardMarkup(row_width=2)
        for button_text, callback_data in inline_buttons_data:
            inline_keyboard.add(InlineKeyboardButton(button_text, callback_data=callback_data))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if isinstance(order_info, dict) and order_info.get('entity', {}).get('delivery_problem'):
            inline_keyboard.add(InlineKeyboardButton("–ü—Ä–æ–±–ª–µ–º—ã –¥–æ—Å—Ç–∞–≤–∫–∏ ‚ö†Ô∏è", callback_data="delivery_problems"))

        await message.answer("–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –ø–æ —Ä–∞–±–æ—Ç–µ –≤ –Ω–∞–∫–ª–∞–¥–Ω–æ–π. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                             reply_markup=inline_keyboard)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    await state.finish()

@dp.message_handler(state=Form.order_number)
async def process_order_number(message: types.Message, state: FSMContext):
    from info import info
    await process_order_info(message, state, info, [
        ("–û—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ—Å—ã–ª–∫—É üì¶", "track_parcel"),
        ("–î–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—Å—ã–ª–∫–µ üìù", "parcel_data"),
        ("–í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–∫–∞–∑ (–Ω–∞–∫–ª–∞–¥–Ω—É—é) üìù", "change_order"),
        ("–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ üóëÔ∏è", "delete_order"),  # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑"
        ("–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É ‚ùå", "cancel_delivery"),
        ("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ üìÜ", "change_delivery_date"),
        ("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É –Ω–∞–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ üí∏", "edit_cod_amount"),
    ])




@dp.message_handler(state=Form.order_number2)
async def process_order_number2(message: types.Message, state: FSMContext):
    from info import info2
    print(message)
    await process_order_info(message, state, info2, [
        ("–û—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ—Å—ã–ª–∫—É üì¶", "track_parcel"),
        ("–î–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—Å—ã–ª–∫–µ üìù", "parcel_data"),
        ("–í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–∫–∞–∑ (–Ω–∞–∫–ª–∞–¥–Ω—É—é) üìù", "change_order"),
        ("–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑ üóëÔ∏è", "delete_order"),  # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑"
        ("–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É ‚ùå", "cancel_delivery"),
        ("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ üìÜ", "change_delivery_date"),
        ("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É –Ω–∞–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ üí∏", "edit_cod_amount"),
    ])

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
@dp.callback_query_handler(lambda c: c.data == 'delete_order')
async def delete_order(callback_query: types.CallbackQuery):
    # –°–æ–∑–¥–∞–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–î–∞" –∏ "–ù–µ—Ç"
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.add(
        InlineKeyboardButton("–î–∞", callback_data="confirm_delete_order"),
        InlineKeyboardButton("–ù–µ—Ç", callback_data="cancel_delete_order")
    )
    await callback_query.message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑? ‚ö†Ô∏è –£—Å–ª–æ–≤–∏–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –≥—Ä—É–∑–∞ (—Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ¬´–°–æ–∑–¥–∞–Ω¬ª).‚ö†Ô∏è", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data == 'confirm_delete_order')
async def confirm_delete_order(callback_query: types.CallbackQuery):
    from izmeneniya import delete_order
    id = callback_query.from_user.id
    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()

    cursor.execute('SELECT cdek_number, order_info FROM new_orders WHERE user_id = ? ORDER BY id DESC LIMIT 1',
                   (callback_query.from_user.id,))
    order_data = cursor.fetchone()

    if order_data:
        order_number = order_data[0]
        order_info_str = order_data[1]

        try:
            order_info_dict = ast.literal_eval(order_info_str)
            order_uuid = order_info_dict['entity']['uuid']  # –ü–æ–ª—É—á–∞–µ–º UUID –∑–∞–∫–∞–∑–∞
            # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ API –°–î–≠–ö
            response = delete_order(id, order_uuid)
            if response and response.status_code == 202:  #–£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω
                # –£–¥–∞–ª—è–µ–º –∑–∞–∫–∞–∑ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ API –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
                cursor.execute("DELETE FROM new_orders WHERE user_id = ? AND cdek_number = ?",
                               (callback_query.from_user.id, order_number))
                conn.commit()
                await callback_query.message.answer(f"–ó–∞–∫–∞–∑ —Å –Ω–æ–º–µ—Ä–æ–º {order_number} –∏ UUID {order_uuid} –±—ã–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", reply_markup=types.ReplyKeyboardRemove())
            else:
                await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ API –°–î–≠–ö.  –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞:{response.status_code}, —Ç–µ–∫—Å—Ç:{response.text}", reply_markup=types.ReplyKeyboardRemove())


        except Exception as e:
            await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}", reply_markup=types.ReplyKeyboardRemove())
    else:
        await callback_query.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=types.ReplyKeyboardRemove())

    connection.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã —É–¥–∞–ª–µ–Ω–∏—è
@dp.callback_query_handler(lambda c: c.data == 'cancel_delete_order')
async def cancel_delete_order(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())







@dp.callback_query_handler(lambda c: c.data == 'delivery_problems')
async def process_delivery_problems(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    async with state.proxy() as data:
        order_info = data.get('order_info')

    if order_info and 'entity' in order_info and 'delivery_problem' in order_info['entity']:
        delivery_problems = order_info['entity']['delivery_problem']
        if delivery_problems:
            problems_text = "\n".join([f"- {problem}" for problem in delivery_problems])
            await callback_query.message.answer(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π:\n{problems_text}")
        else:
            await callback_query.message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ–±–ª–µ–º —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
    else:
        await callback_query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π.")

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
    await callback_query.answer()




# dp.callback_query_handler(lambda c: c.data == 'cancel_delivery')
async def otmena_zakaza(callback_query: types.CallbackQuery):
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –æ—Ç–º–µ–Ω—ã
    confirmation_keyboard = InlineKeyboardMarkup(row_width=2)
    confirm_button = InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ç–º–µ–Ω—É", callback_data="confirm_cancel1")
    cancel_button = InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="decline_cancel1")
    confirmation_keyboard.add(confirm_button, cancel_button)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await callback_query.message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑? ‚ö†Ô∏è–û–±—Ä–∞—â–∞–µ–º –≤–∞—à–µ –≤–Ω–∏–º–∞–Ω–∏–µ —á—Ç–æ –Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∑–∞–∫–∞–∑–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ —Å—Ç–∞—Ç—É—Å–µ '–°–æ–∑–¥–∞–Ω' –∏ –Ω–µ –ø–ª–∞–Ω–∏—Ä—É—é—Ç—Å—è –∫ –æ—Ç–≥—Ä—É–∑–∫–µ –Ω–∞ —Å–∫–ª–∞–¥—ã –°–î–≠–ö. –î–ª—è –æ—Ç–º–µ–Ω—ã –∑–∞–∫–∞–∑–∞ –≤ —Å—Ç–∞—Ç—É—Å–µ '–°–æ–∑–¥–∞–Ω' –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–µ–π '–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑'.‚ö†Ô∏è", reply_markup=confirmation_keyboard)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º callback_query, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
    await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == 'confirm_cancel1')
async def confirm_otmena_zakaza(callback_query: types.CallbackQuery):
    from otmena_zakaz import otmena  # –ò–º–ø–æ—Ä—Ç –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–∏—á–µ—Å–∫–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞
    id = callback_query.from_user.id
    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()

    try:
        cursor.execute('SELECT order_info FROM new_orders WHERE user_id = ? ORDER BY id DESC LIMIT 1', (callback_query.from_user.id,))
        order_info = cursor.fetchone()

        if order_info:
            order_info_str = order_info[0]
            order_info_dict = ast.literal_eval(order_info_str)

            try:
                uuid = order_info_dict['entity']["statuses"][0]['code']
                if uuid == "CREATED":
                    await callback_query.message.answer(f"–í–∞—à –∑–∞–∫–∞–∑ –≤ —Å—Ç–∞—Ç—É—Å–µ –°–æ–∑–¥–∞–Ω –∏ –ø–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω")
                else:
                    uuid = order_info_dict['entity']['uuid']
                    otmen = otmena(uuid, id)

                    if 'status' in otmen and otmen['status'] != 202:
                        print(otmen)
                        await callback_query.message.answer(f"–û—à–∏–±–∫–∞: {otmen['error']}")
                    else:
                        print(otmen)
                        await callback_query.message.answer(f"–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.")
            except KeyError as e:
                await callback_query.message.answer(f"–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞. –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∫–ª—é—á: {e}")
            except Exception as e:
                await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–∫–∞–∑–∞: {e}")

        else:
            await callback_query.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
        await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

    finally:
        connection.close()
        await callback_query.answer()


@dp.callback_query_handler(lambda c: c.data == 'decline_cancel1')
async def decline_otmena_zakaza(callback_query: types.CallbackQuery):
    await callback_query.message.answer("–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback_query.answer()  # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏"


@dp.message_handler(Text(equals='/sklad_dver'))
async def zaborgruz(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_id_to_check = message.from_user.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    if check_user_id_exists(user_id_to_check):
        print(f'–î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–∞–π–¥–µ–Ω—ã! ‚úÖ')
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        web_app_info = WebAppInfo(url="https://mikforce.github.io/cdek.github.io/")
        keyboard.add(KeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=web_app_info))
        await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.", reply_markup=keyboard)
    else:
        print(f'–î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚ùå')
        await message.answer(f"–î–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–æ–≥–æ–≤–æ—Ä–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º –∫–æ–º–ø–∞–Ω–∏–∏ –°–î–≠–ö. –ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏–ª–∏ –∑–∞–∫–ª—é—á–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä —Å –≥—Ä—É–ø–ø–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –°–î–≠–ö. –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚ùå")


@dp.callback_query_handler(text='close_web_app')
async def close_web_app(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.edit_reply_markup(reply_markup=None)
    await callback_query.message.answer("–ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.")


logging.basicConfig(level=logging.INFO)
@dp.message_handler(content_types="web_app_data")
async def web_app_data_handler(request: Request):
    logging.info(f"Received data: {request}")
    # –ò–∑–≤–ª–µ–∫–∞–µ–º "web_app_data" –∏ –∑–∞—Ç–µ–º "data"
    web_app_data = request.web_app_data


    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if web_app_data and 'data' in web_app_data:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏ —Ä–∞—Å–ø–∞—Ä—Å–∏–≤–∞–µ–º –µ–µ
        data_str = web_app_data.data
        try:
            data = json.loads(data_str)
        except json.JSONDecodeError:
            data = {}  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, —Å—Ç–∞–≤–∏–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å

        data = json.loads(data_str)
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        values = list(data.values())
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è –≤—ã–≤–æ–¥–∞
        values_str = [str(value) for value in values]
        # –°–æ–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –∑–∞–ø—è—Ç—ã–º–∏
        output = ", ".join(values_str)
        await request.answer(f"–í—ã –≤–≤–µ–ª–∏: {output}")

        await request.answer(f"–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞")
        # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é process_web_app_data, –µ—Å–ª–∏ –æ–Ω–∞ –≤–∞–º –Ω—É–∂–Ω–∞
        await process_web_app_data(data_str, request)



async def process_web_app_data(web_app_data, message):
    from zakaz import zakaz1
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Å—Ç—Ä–æ–∫–∏ –≤ Python –æ–±—ä–µ–∫—Ç
    parsed_data = json.loads(web_app_data)
    print(parsed_data)
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    type_ = parsed_data.get('type_')
    tariff_code = parsed_data.get('tariff_code')
    from_city = parsed_data.get('from_city')
    from_address = parsed_data.get('from_address')
    to_city = parsed_data.get('to_city')
    to_address = parsed_data.get('to_address')
    recipient_name = parsed_data.get('recipient_name')
    recipient_phone = parsed_data.get('recipient_phone')
    sender_name = parsed_data.get('sender_name')
    sender_company = parsed_data.get('sender_company')
    sender_phone = parsed_data.get('sender_phone')
    package_number = parsed_data.get('package_number')
    package_weight = parsed_data.get('package_weight')
    package_length = parsed_data.get('package_length')
    package_width = parsed_data.get('package_width')
    package_height = parsed_data.get('package_height')
    package_comment = parsed_data.get('package_comment')
    items = parsed_data.get('items', [])

    # Validate and convert the items to the correct format if needed
    item_names = [item['name'] for item in items]
    ware_keys = [item['ware_key'] for item in items]
    costs = [item['cost'] for item in items]
    item_weights = [item['weight'] for item in items]
    amounts = [item['amount'] for item in items]

    print(type_, tariff_code, from_city, from_address, to_city, to_address,
          recipient_name, recipient_phone, sender_name, sender_company,
          sender_phone, package_number, package_weight, package_length,
          package_width, package_height, package_comment, item_names,
          ware_keys, costs, item_weights, amounts)
    zak, uuid = zakaz1(
        type_, tariff_code, from_city, from_address, to_city, to_address,
        recipient_name, recipient_phone, sender_name, sender_company,
        sender_phone, package_number, package_weight, package_length,
        package_width, package_height, package_comment, item_names,
        ware_keys,costs, item_weights,
        amounts
    )

    if zak == "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω":
        print(zak)
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ UUID –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –µ–≥–æ –∫–∞–∫ –∫–æ–¥
        escaped_uuid = escape_md(str(uuid))
        copyable_uuid = f'`{escaped_uuid}`'
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ—á–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        escaped_message = escape_md("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ø–∏—Ä—É–µ–º—ã–º UUID
        await message.answer(
            f"–í–∞—à –°–î–≠–ö –Ω–æ–º–µ—Ä {copyable_uuid}\\. {escaped_message}\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ\\.",
            parse_mode="MarkdownV2"
        )
    else:
        if 'requests' in uuid:
            first_request = uuid['requests'][0]
            if 'errors' in first_request and first_request['errors']:
                error_message = first_request['errors'][0]['message']
                await message.answer(f"–û—à–∏–±–∫–∞: {error_message}", parse_mode=None)
            else:
                await message.answer("–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–æ –æ—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.", parse_mode=None)
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–∞—Ö –≤ –æ—Ç–≤–µ—Ç–µ.", parse_mode=None)




# –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
cancel_button = InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥", callback_data='cancel')
cancel_keyboard = InlineKeyboardMarkup().add(cancel_button)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞
@dp.callback_query_handler(lambda c: c.data == 'cancel', state='*')
async def cancel_input(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback_query.message.edit_text("‚úÖ –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.", reply_markup=None) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback_query.answer() # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏"



@dp.message_handler(Text(equals='/zaborgruza'))
async def zaborgruz(message: types.Message):
        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        user_id_to_check = message.from_user.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        if check_user_id_exists(user_id_to_check):
            print(f'–î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–∞–π–¥–µ–Ω—ã! ‚úÖ')
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π CDEK, –¥–∞—Ç—É, –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞, "
                "–≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏ –∞–¥—Ä–µ—Å. –ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ (10006324754 2024-07-10 10:00 15:00 —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 1)",
                reply_markup=cancel_keyboard
            )
            await Form.kurier.set()
        else:
            print(f'–î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚ùå')
            await message.answer(f"–î–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–æ–≥–æ–≤–æ—Ä–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º –∫–æ–º–ø–∞–Ω–∏–∏ –°–î–≠–ö. –ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏–ª–∏ –∑–∞–∫–ª—é—á–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä —Å –≥—Ä—É–ø–ø–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –°–î–≠–ö. –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚ùå")


@dp.callback_query_handler(Text(equals='cancel'), state=Form.kurier)
async def cancel_input(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()  # –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏
    await callback_query.message.answer("–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /zaborgruza.")
    await state.finish()

@dp.message_handler(state=Form.kurier)
async def process_kurier(message: types.Message, state: FSMContext):
    data = message.text.split()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if len(data) < 5:
        await message.answer("–û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä, –¥–∞—Ç—É, –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞, –≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞ –∏ –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ï—Å–ª–∏ –≤—ã –∂–µ–ª–∞–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω–∞")
        return

    nomer = data[0]
    date = data[1]
    time_begin = data[2]
    time_end = data[3]
    address = data[4]
    from dublikat_zayavki import create_call_request_kurier
    # kurier = create_call_request_kurier(nomer, date, time_begin, time_end, address)
    status_code, response_data, state1 = create_call_request_kurier(nomer, date, time_begin, time_end, address)


    if state1 == "SUCCESSFUL":
        await message.answer(f'–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!{state1}')
    else:
        await message.answer(
            f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É. –ö–æ–¥ –æ—à–∏–±–∫–∏: {state1}.')
    await state.finish()


@dp.message_handler(state=Form.dubl)
async def process_dubl(message: types.Message, state: FSMContext):
    text = message.text
    from dublikat_zayavki import create_order
    uuid = create_order(text)
    await state.update_data(uuid=uuid)
    await Form.next()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞, –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏ –∞–¥—Ä–µ—Å. –ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª 2024-07-10 10:00 15:00 —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 1', reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(state=Form.call_request)
async def process_call_request(message: types.Message, state: FSMContext):
    data = message.text.split()
    date = data[0]
    time_begin = data[1]
    time_end = data[2]
    address = data[3]
    uuid = await state.get_data()
    from dublikat_zayavki import create_call_request
    import asyncio
    await asyncio.sleep(360)
    create = create_call_request(1, date, time_begin, time_end, address, uuid['uuid'])
    await message.answer(f'–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! {create}')
    await state.finish()





@dp.callback_query_handler(lambda c: c.data == 'go_back_menu')
async def go_back_menu(callback_query: types.CallbackQuery, state: FSMContext):
    await cmd_start1(callback_query.message, state)


# @dp.message_handler(state=Form.npdc)
# async def process_izmenit_za_dop(message: types.Message, state: FSMContext):
#     try:
#         from izmeneniya import nalozh_pay_dop_cbor
#         text = message.text
#         if int(text) >= 0:
#             connection = sqlite3.connect('users.db')
#             cursor = connection.cursor()
#
#             cursor.execute('SELECT order_info FROM new_orders WHERE user_id = ? ORDER BY id DESC LIMIT 1', (message.from_user.id,))
#             order_info = cursor.fetchone()
#             order_info_str = order_info[0]
#
#             order_info_dict = ast.literal_eval(order_info_str)
#             uuid = order_info_dict['entity']['uuid']
#             result = nalozh_pay_dop_cbor(uuid, text)
#             keyboard = InlineKeyboardMarkup()
#             keyboard.add(
#                 InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='go_back_menu')
#             )
#             print(result['requests'])
#             await bot.send_message(message.from_user.id, f"–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ", reply_markup=keyboard)
#             await state.finish()
#         else:
#             await bot.send_message(message.from_user.id, f"–°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
#
#
#     except Exception as e:
#         keyboard = InlineKeyboardMarkup()
#         keyboard.add(
#             InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='go_back_menu')
#         )
#         await bot.send_message(message.from_user.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}",
#                                reply_markup=keyboard)
#         await state.finish()

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è callback_data 'cancel_input'
@dp.callback_query_handler(lambda c: c.data == 'cancel_input_1', state='*')
async def process_cancel_input(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞."""
    await bot.answer_callback_query(callback_query.id)
    await bot.send_message(callback_query.from_user.id, "–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.")
    await state.finish()


@dp.message_handler(state=Form.npdc)
async def process_izmenit_za_dop(message: types.Message, state: FSMContext):
    try:
        from izmeneniya import nalozh_pay_dop_cbor  # –ü–æ–¥ –≤–æ–ø—Ä–æ—Å–æ–º: –ª—É—á—à–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞

        text = message.text

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data='cancel_input_1')
        )

        try:
            amount = int(text)  # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ —á–∏—Å–ª–æ
        except ValueError:
            await bot.send_message(message.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.", reply_markup=keyboard)
            return  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞, –µ—Å–ª–∏ –≤–≤–æ–¥ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.

        if amount >= 0:
            connection = sqlite3.connect('users.db')
            cursor = connection.cursor()

            cursor.execute('SELECT order_info FROM new_orders WHERE user_id = ? ORDER BY id DESC LIMIT 1', (message.from_user.id,))
            order_info = cursor.fetchone()

            if order_info:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ order_info –Ω–µ None
                order_info_str = order_info[0]

                order_info_dict = ast.literal_eval(order_info_str)
                uuid = order_info_dict['entity']['uuid']
                result = nalozh_pay_dop_cbor(uuid, text) # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è text, –∞ –Ω–µ amount
                keyboard = InlineKeyboardMarkup()
                keyboard.add(
                    InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='go_back_menu')
                )
                print(result['requests'])
                await bot.send_message(message.from_user.id, f"–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ", reply_markup=keyboard)
                await state.finish()
            else:
                await bot.send_message(message.from_user.id, "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=keyboard)
                await state.finish()


        else:
            await bot.send_message(message.from_user.id, f"–°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", reply_markup=keyboard)
    except Exception as e:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='go_back_menu')
        )
        await bot.send_message(message.from_user.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}",
            reply_markup=keyboard)
        await state.finish()




@dp.message_handler(state=Form.inpzt)
async def process_izmenit_za_tovar(message: types.Message, state: FSMContext):
    try:
        from izmeneniya import nalozh_pay
        text = message.text
        value = text

        connection = sqlite3.connect('users.db')
        cursor = connection.cursor()

        cursor.execute('SELECT order_info FROM new_orders WHERE user_id = ? ORDER BY id DESC LIMIT 1', (message.from_user.id,))
        order_info = cursor.fetchone()
        order_info_str = order_info[0]

        order_info_dict = ast.literal_eval(order_info_str)
        uuid = order_info_dict['entity']['uuid']
        result = nalozh_pay(uuid, value)
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='go_back_menu')
        )
        await bot.send_message(message.from_user.id, f"–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.{result}", reply_markup=keyboard)
        await state.finish()
    except Exception as e:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='go_back_menu')
        )
        await bot.send_message(message.from_user.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}",
                               reply_markup=keyboard)
        await state.finish()

@dp.message_handler(state=Form.order_number3)
async def process_list_offices(message: types.Message, state: FSMContext):
    city = message.text
    from spisok_ofise import city_info
    city_data = city_info(city)
    if city_data:
        response_text = f"–°–ø–∏—Å–æ–∫ –æ—Ñ–∏—Å–æ–≤ –≤ –≥–æ—Ä–æ–¥–µ {city}:\n\n"
        office_info = ""
        for office in city_data:
            office_info += f"üè¢ –û—Ñ–∏—Å: {office['name']}\n"
            office_info += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {office['phones'][0]['number']}\n"
            office_info += f"üïí –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: {office['work_time']}\n"
            if 'address_comment' in office:
                office_info += f"üìç –ê–¥—Ä–µ—Å: {office['address_comment']}\n"
            office_info += "--------------------------------------\n"

        if len(response_text + office_info) <= 4096:  # Telegram message character limit
            response_text += office_info
            await message.answer(response_text)
        else:
            from datetime import datetime
            # Create a meaningful filename for the temporary file
            timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
            filename = f"office_info_{city}_{timestamp}.txt"

            # Save detailed information to the temporary file
            with open(filename, 'w', encoding='utf-8') as temp_file:
                temp_file.write(response_text + office_info)

            # Send the temporary file
            with open(filename, 'rb') as document:
                await message.answer_document(document)

            # Remove the temporary file
            os.remove(filename)
            # os.unlink(temp_file.name)

    else:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ñ–∏—Å–∞—Ö –≤ –¥–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
    await state.finish()

async def process_entering_info(message: types.Message, state: FSMContext, info_function):
    await bot.send_message(message.from_user.id, "–ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞... ‚è≥")
    id = message.from_user.id

    entered_text = message.text
    print("=-=-=-=-=-=")
    print(id, entered_text)
    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()

    cursor.execute('SELECT order_info FROM new_orders WHERE user_id = ? ORDER BY id DESC LIMIT 1', (message.from_user.id,))
    order_info = cursor.fetchone()

    if order_info:
        order_info_str = order_info[0]
        try:
            order_info_dict = ast.literal_eval(order_info_str)
            uuid = order_info_dict['entity']['uuid']
            result = info_function(id, uuid, entered_text)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API
            if result and 'requests' in result and len(result['requests']) > 0:
                reez = result['requests'][0]['state']
                await bot.send_message(message.from_user.id, f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {reez}")
            else:
                await bot.send_message(message.from_user.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        except (ValueError, SyntaxError) as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ü–µ–Ω–∏—Ç—å order_info_str –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å: {e}")
            await bot.send_message(message.from_user.id, "üö´ –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            await bot.send_message(message.from_user.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    else:
        print("–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ order_info")
        await bot.send_message(message.from_user.id, "üì≠ –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.")

    connection.close()
    await state.finish()
# SELECT order_info FROM new_orders WHERE user_id = ? ORDER BY id DESC LIMIT 1
@dp.message_handler(state=Form.fio)
async def process_entering_fullname(message: types.Message, state: FSMContext):
    from izmeneniya import fio
    await process_entering_info(message, state, fio)

@dp.message_handler(state=Form.tel)
async def process_entering_tel(message: types.Message, state: FSMContext):
    from izmeneniya import fone
    await process_entering_info(message, state, fone)

@dp.message_handler(state=Form.adr)
async def process_entering_adr(message: types.Message, state: FSMContext):
    from izmeneniya import adres
    print(adres,"++++++++++++++++++++++++++++")
    await process_entering_info(message, state, adres)

@dp.message_handler(state=Form.cit)
async def process_entering_cit(message: types.Message, state: FSMContext):
    print("----------------")
    entered_text = message.text
    id = message.from_user.id
    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()

    cursor.execute('SELECT order_info FROM new_orders WHERE user_id = ? ORDER BY id DESC LIMIT 1', (message.from_user.id,))
    order_info = cursor.fetchone()
    print(order_info)
    if order_info:
        order_info_str = order_info[0]
        print("info")
        try:
            print('try')
            order_info_dict = ast.literal_eval(order_info_str)
            uuid = order_info_dict['entity']['uuid']
            address = order_info_dict['entity']['to_location']['address']
            print(address)
            from izmeneniya import change_city
            city = [entered_text, address]
            print(uuid, city)
            result = change_city(id, uuid, city)
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON –≤ –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç
            if result:
                try:
                    result_dict = json.loads(json.dumps(result))  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Å–ª–æ–≤–∞—Ä—å
                    formatted_result = format_json_response(result_dict)  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º
                    await bot.send_message(message.from_user.id, formatted_result, parse_mode=types.ParseMode.MARKDOWN)
                except (TypeError, json.JSONDecodeError) as e:
                    await bot.send_message(message.from_user.id, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}\n{result}")
            else:
                await bot.send_message(message.from_user.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥.")

        except (ValueError, SyntaxError) as e:
            print(f"Failed to evaluate order_info_str as dictionary: {e}")
        else:
            print("No order_info found for the user")

        connection.close()
        await state.finish()

def format_json_response(data: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç JSON-–æ—Ç–≤–µ—Ç –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram."""
    output = ""
    if 'entity' in data:
        output += "*Entity:*\n"
        for key, value in data['entity'].items():
            output += f"  *{key}:* `{value}`\n"
    if 'requests' in data:
        output += "\n*Requests:*\n"
        for request in data['requests']:
            output += "  *Request:*\n"
            for key, value in request.items():
                output += f"    *{key}:* `{value}`\n"
            if 'warnings' in request:
                output += "    *Warnings:*\n"
                for warning in request['warnings']:
                    for key, value in warning.items():
                        output += f"      *{key}:* `{value}`\n"
    if 'related_entities' in data:
        output += "\n*Related Entities:*\n"
        output += "  (–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)\n"  # –ò–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ, –µ—Å–ª–∏ –µ—Å—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
    return output




@dp.message_handler(commands=['lists'])
async def cmd_lists(message: types.Message):
    inline_keyboard = InlineKeyboardMarkup(row_width=1)
    inline_keyboard.add(
        # InlineKeyboardButton("–°–ø–∏—Å–∫–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤", callback_data='list_regions'),
        InlineKeyboardButton("–°–ø–∏—Å–∫–∏ –æ—Ñ–∏—Å–æ–≤", callback_data='list_offices')
        # InlineKeyboardButton("–°–ø–∏—Å–∫–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤", callback_data='list_settlements')
    )
    await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=inline_keyboard)

from aiogram import types
import ast
from aiogram import types

@dp.callback_query_handler(lambda c: c.data)
async def process_callback(callback_query: types.CallbackQuery):
    id = callback_query.from_user.id
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–æ–¥–æ–≤ —Å—Ç–∞—Ç—É—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∏—Å–∫–ª—é—á–∏—Ç—å
    EXCLUDED_STATUS_CODES = {"CREATED", "ACCEPTED"}
    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()
    # ... (–Ω–∞—á–∞–ª–æ process_callback) ...
    print("–Ω–∞—á–∞–ª–æ process_callback")
    if callback_query.data == 'track_parcel':
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å, –µ—Å–ª–∏ —Ö–æ—á–µ—à—å)
        try:
            await callback_query.message.delete()
        except Exception as e:
            logger.warning(f"User {id}: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ track_parcel: {e}")

        import datetime
        import pytz
        # import ast  # –£–±–µ–¥–∏—Å—å, —á—Ç–æ ast –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω
        from collections import defaultdict
        print("–∑–∞–ø—Ä–æ—Å –≤ –±–¥")

        # Fetch order info from the database
        cursor.execute("SELECT order_info FROM new_orders WHERE user_id = ? ORDER BY id DESC LIMIT 1",
                       (callback_query.from_user.id,))
        order_info = cursor.fetchone()
        print(order_info)
        if order_info:
            order_info_str = order_info[0]
            logger.debug(
                f"User {id}: Fetched order info for tracking: {order_info_str[:200]}...")  # –õ–æ–≥–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Å—Ç—Ä–æ–∫–∏

            try:
                order_info_dict = ast.literal_eval(
                    order_info_str)  # –ë–µ–∑–æ–ø–∞—Å–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å json.loads, –µ—Å–ª–∏ —Ö—Ä–∞–Ω–∏—Ç–µ JSON

                # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ ---
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º .get() –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
                statuses = order_info_dict.get('entity', {}).get('statuses', [])
                print(statuses)
                if not statuses:
                    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤ –ø—É—Å—Ç –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                    await bot.answer_callback_query(callback_query.id)
                    await bot.send_message(callback_query.from_user.id,
                                           "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–∞—Ö –ø–æ–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
                    logger.info(
                        f"User {id}: No statuses found for order {order_info_dict.get('entity', {}).get('cdek_number', 'N/A')}")

                else:
                    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å—Ç—å –ª–∏ –¢–û–õ–¨–ö–û CREATED/ACCEPTED ---
                    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥—ã –≤—Å–µ—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
                    status_codes = {status.get('code') for status in statuses if status.get('code')}  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–æ–¥–æ–≤

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∏–º–µ—é—â–∏–µ—Å—è –∫–æ–¥—ã –≤—Ö–æ–¥—è—Ç –≤ EXCLUDED_STATUS_CODES
                    # –ò–õ–ò, –ø—Ä–æ—â–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ù–ï–¢ –∫–æ–¥–æ–≤, –ù–ï –≤—Ö–æ–¥—è—â–∏—Ö –≤ EXCLUDED_STATUS_CODES
                    has_only_excluded = all(code in EXCLUDED_STATUS_CODES for code in status_codes)

                    if has_only_excluded:
                        # –ï—Å–ª–∏ –≤—Å–µ —Å—Ç–∞—Ç—É—Å—ã —Ç–æ–ª—å–∫–æ CREATED –∏–ª–∏ ACCEPTED
                        await bot.answer_callback_query(callback_query.id)
                        await bot.send_message(callback_query.from_user.id,
                                               "‚úÖ –ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω, –æ–∂–∏–¥–∞–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏.")
                        logger.info(
                            f"User {id}: Order {order_info_dict.get('entity', {}).get('cdek_number', 'N/A')} has only CREATED/ACCEPTED status.")

                    else:
                        # --- –ï—Å–ª–∏ –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ —Å—Ç–∞—Ç—É—Å—ã, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é ---
                        logger.info(
                            f"User {id}: Displaying tracking history for {order_info_dict.get('entity', {}).get('cdek_number', 'N/A')}")

                        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã –¥–ª—è –ø–æ–∫–∞–∑–∞ (—É–±–∏—Ä–∞–µ–º CREATED/ACCEPTED)
                        filtered_statuses = [
                            status for status in statuses if status.get('code') not in EXCLUDED_STATUS_CODES
                        ]

                        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —á—Ç–æ-—Ç–æ –æ—Å—Ç–∞–ª–æ—Å—å (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
                        if filtered_statuses:
                            statuses_by_date = defaultdict(list)
                            moscow_tz = pytz.timezone('Europe/Moscow')

                            for status in reversed(filtered_statuses):  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
                                # --- –¢–≤–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ ---
                                date_time_str = status.get('date_time')
                                if not date_time_str: continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å –±–µ–∑ –¥–∞—Ç—ã

                                city = status.get('city', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≥–æ—Ä–æ–¥')  # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥
                                status_name = status.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å')  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å—Ç–∞—Ç—É—Å–∞

                                dt_format = None
                                if isinstance(date_time_str, str):
                                    if '+' in date_time_str:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å–º–µ—â–µ–Ω–∏—è
                                        try:  # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å —Å —á–∞—Å–æ–≤—ã–º –ø–æ—è—Å–æ–º
                                            # –£–±–∏—Ä–∞–µ–º ':' –≤ —Å–º–µ—â–µ–Ω–∏–∏ –¥–ª—è Python < 3.7, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                                            if len(date_time_str) > 6 and date_time_str[-3] == ':':
                                                date_time_str = date_time_str[:-3] + date_time_str[-2:]
                                            dt_format = '%Y-%m-%dT%H:%M:%S%z'
                                            utc_time = datetime.datetime.strptime(date_time_str, dt_format)
                                        except ValueError:
                                            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º –±–µ–∑ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥
                                            try:
                                                date_time_str_no_ms = date_time_str.split('.')[0] + date_time_str[-6:]
                                                if len(date_time_str_no_ms) > 6 and date_time_str_no_ms[-3] == ':':
                                                    date_time_str_no_ms = date_time_str_no_ms[
                                                                          :-3] + date_time_str_no_ms[-2:]
                                                utc_time = datetime.datetime.strptime(date_time_str_no_ms, dt_format)
                                            except ValueError:
                                                logger.warning(f"Could not parse date with timezone: {date_time_str}")
                                                continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —Å—Ç–∞—Ç—É—Å
                                    else:  # –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ UTC (—Å 'Z' –∏–ª–∏ –±–µ–∑)
                                        try:
                                            if date_time_str.endswith('Z'):
                                                dt_format = '%Y-%m-%dT%H:%M:%SZ'
                                                utc_time = datetime.datetime.strptime(date_time_str, dt_format)
                                            else:  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º UTC –±–µ–∑ 'Z' –∏ –±–µ–∑ —Å–º–µ—â–µ–Ω–∏—è
                                                dt_format = '%Y-%m-%dT%H:%M:%S'
                                                utc_time = datetime.datetime.strptime(date_time_str, dt_format)
                                            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∑–æ–Ω—É UTC —è–≤–Ω–æ
                                            utc_time = pytz.utc.localize(utc_time)
                                        except ValueError:
                                            logger.warning(f"Could not parse date as UTC: {date_time_str}")
                                            continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —Å—Ç–∞—Ç—É—Å

                                else:  # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π
                                    logger.warning(f"Unexpected date format: {date_time_str}")
                                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º

                                # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
                                moscow_time = utc_time.astimezone(moscow_tz)

                                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å—Ç–∞—Ç—É—Å–∞
                                # –ò—Å–ø–æ–ª—å–∑—É–µ–º escape_md –¥–ª—è –≥–æ—Ä–æ–¥–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
                                status_str = f"{moscow_time.strftime('%H:%M:%S')} {escape_md(status_name)} –≤ {escape_md(city)}"

                                # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø–æ –¥–∞—Ç–µ
                                date_key = moscow_time.strftime('%d.%m.%Y')
                                statuses_by_date[date_key].append(status_str)
                                # --- /–ö–æ–Ω–µ—Ü —Ç–≤–æ–µ–≥–æ –∫–æ–¥–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã ---

                            # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                            output_lines = []
                            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–º –ø–æ—Ä—è–¥–∫–µ
                            for date_key in sorted(statuses_by_date.keys()):
                                output_lines.append(f"*{date_key}*")  # –î–ê–¢–ê –ñ–ò–†–ù–´–ú
                                for status_entry in statuses_by_date[date_key]:
                                    output_lines.append(f"  - {status_entry}")  # –û—Ç—Å—Ç—É–ø –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤

                            status_text = "\n".join(output_lines)

                            await bot.answer_callback_query(callback_query.id)
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º parse_mode=types.ParseMode.MARKDOWN_V2 –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º escape_md
                            await bot.send_message(callback_query.from_user.id, status_text,
                                                    parse_mode="Markdown")
                            #                 await bot.answer_callback_query(callback_query.id)
                            #                 await bot.send_message(callback_query.from_user.id, status_text, parse_mode="Markdown")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                            #             else:
                            #                 await bot.send_message(callback_query.from_user.id,
                            #                                        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Å—ã–ª–∫–∏ –ø–æ —Å–≤–æ–µ–º—É –¥–æ–≥–æ–≤–æ—Ä—É.")
                        else:
                            # –ï—Å–ª–∏ –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Å—Ç–∞–ª–æ—Å—å (–Ω–µ –¥–æ–ª–∂–Ω–æ —Å–ª—É—á–∏—Ç—å—Å—è –∏–∑-–∑–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ has_only_excluded)
                            await bot.answer_callback_query(callback_query.id)
                            await bot.send_message(callback_query.from_user.id, "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏.")
                            logger.info(
                                f"User {id}: No statuses left after filtering for order {order_info_dict.get('entity', {}).get('cdek_number', 'N/A')}")
    # if callback_query.data == 'track_parcel':
    #     await callback_query.message.delete()
    #     import datetime
    #     import pytz
    #     # import ast
    #     from collections import defaultdict
    #     # Fetch order info from the database
    #     cursor.execute("SELECT order_info FROM new_orders WHERE user_id = ? ORDER BY id DESC LIMIT 1", (callback_query.from_user.id,))
    #     order_info = cursor.fetchone()
    #     if order_info:
    #         order_info_str = order_info[0]
    #         print(f"Debug: Fetched order info: {order_info_str}")  # Debugging line
    #
    #         try:
    #             order_info_dict = ast.literal_eval(order_info_str)  # Safely evaluate the string as a Python dictionary
    #             print(order_info_dict)
    #             if 'entity' in order_info_dict and 'statuses' in order_info_dict['entity']:
    #                 statuses = order_info_dict['entity']['statuses']
    #                 # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø–æ –∫–æ–¥—É.
    #                 filtered_statuses = [
    #                     status for status in statuses if status['code'] not in EXCLUDED_STATUS_CODES
    #                 ]
    #
    #                 statuses_by_date = defaultdict(list)
    #                 moscow_tz = pytz.timezone('Europe/Moscow')
    #                 print("---")
    #                 print(filtered_statuses)
    #                 for status in reversed(filtered_statuses):  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
    #                     date_time_str = status['date_time']
    #                     print("222222222")
    #                     # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–º–µ—â–µ–Ω–∏–µ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –≤ —Å—Ç—Ä–æ–∫–µ –¥–∞—Ç—ã
    #                     if date_time_str.endswith('+0000'):
    #                         date_time_str = date_time_str[:-5]  # –£–¥–∞–ª—è–µ–º —Å–º–µ—â–µ–Ω–∏–µ +0000
    #                         dt_format = '%Y-%m-%dT%H:%M:%S'
    #                         print("%Y-%m-%dT%H:%M:%S")
    #                     else:
    #                         dt_format = '%Y-%m-%dT%H:%M:%SZ'  # –ò–∑–º–µ–Ω–µ–Ω–æ –∑–¥–µ—Å—å!
    #                         print("%Y-%m-%dT%H:%M:%SZ")
    #
    #                     print("2222222")
    #
    #                     try:
    #                         # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
    #                         utc_time = datetime.datetime.strptime(date_time_str, dt_format)
    #
    #                         # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º UTC –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)
    #                         if dt_format == '%Y-%m-%dT%H:%M:%S':
    #                             utc_time = pytz.utc.localize(utc_time)
    #
    #                         # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
    #                         moscow_time = utc_time.astimezone(moscow_tz)
    #
    #                         # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É —Å—Ç–∞—Ç—É—Å–∞ (—Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è)
    #                         status_str = f"{moscow_time.strftime('%H:%M:%S')} {status['name']} –≤ {status['city']}"
    #
    #                         # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã –ø–æ –¥–∞—Ç–µ
    #                         date_key = moscow_time.strftime('%d.%m.%Y')  # <<<=== –ò–ó–ú–ï–ù–ï–ù –§–û–†–ú–ê–¢ –ö–õ–Æ–ß–ê
    #                         statuses_by_date[date_key].append(status_str)
    #                         print("-------------------")
    #                     except ValueError as e:
    #                         print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –¥–∞—Ç—ã: {e}")
    #                         await bot.send_message(callback_query.from_user.id,
    #                                                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã —Å—Ç–∞—Ç—É—Å–∞: {e}.  –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    #                         return  # –ü—Ä–µ–∫—Ä–∞—â–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É, —á—Ç–æ–±—ã –Ω–µ –≤—ã–∑–≤–∞—Ç—å –¥–∞–ª—å–Ω–µ–π—à–∏–µ –æ—à–∏–±–∫–∏
    #
    #                 # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    #                 output_lines = []
    #                 for date, status_list in statuses_by_date.items():
    #                     output_lines.append(f"*{date}*") # <<<=== –î–ê–¢–ê –ñ–ò–†–ù–´–ú
    #                     for status in status_list:
    #                         output_lines.append(f"  - {status}")  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø –¥–ª—è —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞.
    #
    #                 status_text = "\n".join(output_lines)  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç
    #
    #                 print(status_text)
    #                 await bot.answer_callback_query(callback_query.id)
    #                 await bot.send_message(callback_query.from_user.id, status_text, parse_mode="Markdown")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    #             else:
    #                 await bot.send_message(callback_query.from_user.id,
    #                                        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Å—ã–ª–∫–∏ –ø–æ —Å–≤–æ–µ–º—É –¥–æ–≥–æ–≤–æ—Ä—É.")
            except (ValueError, SyntaxError) as e:
                await bot.send_message(callback_query.from_user.id,
                                       "Error decoding order information. Please try again later.")
                print(f"Error: {e}")
        else:
            await bot.send_message(callback_query.from_user.id, "No order information found.")


    elif callback_query.data == 'track_parcel2':
        await callback_query.message.delete()
        # Fetch order info from the database
        cursor.execute("SELECT order_info FROM new_orders WHERE user_id = ? ORDER BY id DESC LIMIT 1", (callback_query.from_user.id,))
        order_info = cursor.fetchone()

        if order_info:
            order_info_str = order_info[0]
            print(f"Debug: Fetched order info: {order_info_str}")  # Debugging line

            try:
                order_info_dict = ast.literal_eval(order_info_str)  # Safely evaluate the string as a Python dictionary

                if 'entity' in order_info_dict and 'statuses' in order_info_dict['entity']:
                    statuses = order_info_dict['entity']['statuses']
                    status_text = "\n".join(f"{status['name']} –≤ {status['city']}" for status in statuses)
                    await bot.send_message(callback_query.from_user.id, status_text)
                else:
                    await bot.send_message(callback_query.from_user.id, "No status information available.")
            except (ValueError, SyntaxError) as e:
                await bot.send_message(callback_query.from_user.id, "Error decoding order information. Please try again later.")
                print(f"Error: {e}")
        else:
            await bot.send_message(callback_query.from_user.id, "No order information found.")




    elif callback_query.data == 'parcel_data':
        await callback_query.message.delete()
        import datetime
        import pytz

        def calculate_overdue_days(planned_delivery_date, actual_delivery_date):
            """
            –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä–æ—Å—Ä–æ—á–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏.

            –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            planned_delivery_date (str –∏–ª–∏ datetime): –ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏ ISO 8601 –∏–ª–∏ –æ–±—ä–µ–∫—Ç datetime.
            actual_delivery_date (str –∏–ª–∏ datetime): –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏ ISO 8601 –∏–ª–∏ –æ–±—ä–µ–∫—Ç datetime.

            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            int: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –ø—Ä–æ—Å—Ä–æ—á–∫–∏ (–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ, –µ—Å–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞, 0 –∏–ª–∏ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ, –µ—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞ –±—ã–ª–∞ –≤–æ–≤—Ä–µ–º—è).
            None: –ï—Å–ª–∏ –æ–¥–Ω–∞ –∏–∑ –¥–∞—Ç –Ω–µ —É–∫–∞–∑–∞–Ω–∞.
            """

            print(planned_delivery_date, actual_delivery_date)
            if not planned_delivery_date or not actual_delivery_date:
                return None  # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –¥–∞—Ç–∞—Ö, —Ç–æ –∏ –ø—Ä–æ—Å—Ä–æ—á–∫—É –Ω–µ –ø–æ—Å—á–∏—Ç–∞—Ç—å

            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –≤ datetime, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                if isinstance(planned_delivery_date, str):
                    planned_delivery_date = datetime.datetime.strptime(planned_delivery_date, "%d.%m.%Y")
                if isinstance(actual_delivery_date, str):
                    actual_delivery_date = datetime.datetime.strptime(actual_delivery_date, "%d.%m.%Y")

                # –†–∞—Å—á–µ—Ç —Ä–∞–∑–Ω–∏—Ü—ã –≤ –¥–Ω—è—Ö
                overdue_days = (actual_delivery_date - planned_delivery_date).days

                return overdue_days if overdue_days > 0 else 0  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º 0 –µ—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–∫–∏ –∏–ª–∏ –¥–æ—Å—Ç–∞–≤–∫–∞ —Ä–∞–Ω—å—à–µ —Å—Ä–æ–∫–∞

            except ValueError:
                print("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã.  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
                return None  # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None

        def calculate_delivery_time(sender_city_code, recipient_city_code, weight, length, width, height,
                                    cost, id):  # Add cost
            """
            –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ä–æ–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º API –°–î–≠–ö (tarifflist).
            """
            url = "https://api.cdek.ru/v2/calculator/tarifflist"
            headers = {
                "Content-Type": "application/json",
                'Authorization': f'Bearer {get_token(id)}'
            }

            # Get current date and time in the format required by the API
            current_time = datetime.datetime.now(datetime.timezone.utc).strftime('%Y-%m-%dT%H:%M:%S+0000')

            data = {
                "date": current_time,
                "type": 1,  # –¢–∏–ø –∑–∞–∫–∞–∑–∞ (–∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω)
                "currency": 0,  # –í–∞–ª—é—Ç–∞
                "lang": "rus",
                "from_location": {
                    "code": sender_city_code,
                },
                "to_location": {
                    "code": recipient_city_code
                },
                "packages": [
                    {
                        "weight": weight,  # –í–µ—Å –≤ –≥—Ä–∞–º–º–∞—Ö
                        "length": length,  # –î–ª–∏–Ω–∞ –≤ —Å–º
                        "width": width,  # –®–∏—Ä–∏–Ω–∞ –≤ —Å–º
                        "height": height,  # –í—ã—Å–æ—Ç–∞ –≤ —Å–º
                        "cost": cost  # –û–±—ä—è–≤–ª–µ–Ω–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å (–¥–ª—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∏)
                    }
                ]
            }

            print("Data being sent to API:", json.dumps(data))
            try:
                response = requests.post(url, headers=headers, data=json.dumps(data))
                response.raise_for_status()
                response_data = response.json()
                print("API Response:", json.dumps(response_data, indent=2))  # Pretty print

                # Extract the tariff codes and delivery periods
                tariff_codes = response_data.get("tariff_codes", [])
                if tariff_codes:
                    # Find the tariff with the same code as the original order
                    matching_tariff = next((t for t in tariff_codes if t['tariff_code'] == tariff_code),
                                           None)  # Find the matching tariff

                    if matching_tariff:
                        delivery_period_min = matching_tariff.get("period_min")
                        delivery_period_max = matching_tariff.get("period_max")
                        if delivery_period_min is not None and delivery_period_max is not None:
                            return f"{delivery_period_min}-{delivery_period_max} –¥–Ω–µ–π"
                        else:
                            return "–°—Ä–æ–∫ –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–µ —É–∫–∞–∑–∞–Ω"
                    else:
                        return "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω"
                else:
                    return "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤"

            except requests.exceptions.RequestException as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API –°–î–≠–ö: {e}")
                if response is not None:
                    print(f"Response content: {response.text}")
                return "–û—à–∏–±–∫–∞ API"
            except json.JSONDecodeError as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ API –°–î–≠–ö: {e}")
                return "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –æ—Ç–≤–µ—Ç–∞ API"

        def get_delivery_dates(cdek_number, id):
            """
            –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–π –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–π –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö.
            """
            url = f"https://api.cdek.ru/v2/orders?cdek_number={cdek_number}"
            headers = {
                "Content-Type": "application/json",
                'Authorization': f'Bearer {get_token(id)}'
            }

            planned_delivery_date = "–æ–∂–∏–¥–∞–µ—Ç—Å—è"
            actual_delivery_date = "–æ–∂–∏–¥–∞–µ—Ç—Å—è"
            delivery_problem_reason = "–ù–µ—Ç –ø—Ä–æ–±–ª–µ–º"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

            try:
                response = requests.get(url, headers=headers)
                response.raise_for_status()
                response_data = response.json()
                print("==================================================================")
                print("Tracking API Response:", json.dumps(response_data, indent=2))

                #  Check if there are any errors
                if 'errors' in response_data and response_data['errors']:
                    print(f"Tracking API returned errors: {response_data['errors']}")
                    return planned_delivery_date, actual_delivery_date, delivery_problem_reason

                # Extract data from the 'entity'
                if 'entity' in response_data and response_data['entity']:
                    entity = response_data['entity']

                    # Extract planned delivery date
                    planned_delivery_date_str = entity.get('planned_delivery_date')
                    if planned_delivery_date_str:
                        try:
                            # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
                            planned_delivery_date = datetime.datetime.strptime(planned_delivery_date_str,
                                                                               "%Y-%m-%dT%H:%M:%S%z").strftime(
                                "%d.%m.%Y")
                        except ValueError:
                            try:
                                # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞—Ç—ã
                                planned_delivery_date = datetime.datetime.strptime(planned_delivery_date_str,
                                                                                   "%Y-%m-%d").strftime("%d.%m.%Y")
                            except ValueError:
                                print("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç planned_delivery_date –∏–∑ API")
                                planned_delivery_date = "_–æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞_"

                    # Extract actual delivery date from statuses
                    statuses = entity.get('statuses', [])
                    for status in statuses:
                        if status.get('code') == 'DELIVERED':
                            actual_delivery_date_str = status.get('date_time')
                            if actual_delivery_date_str:
                                try:
                                    # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
                                    actual_delivery_date = datetime.datetime.strptime(actual_delivery_date_str,
                                                                                      "%Y-%m-%dT%H:%M:%S%z").strftime(
                                        "%d.%m.%Y")
                                except ValueError:
                                    try:
                                        # –ü–æ–ø—ã—Ç–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞—Ç—ã
                                        actual_delivery_date = datetime.datetime.strptime(actual_delivery_date_str,
                                                                                          "%Y-%m-%d").strftime(
                                            "%d.%m.%Y")
                                    except ValueError:
                                        print("–û—à–∏–±–∫–∞: –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç actual_delivery_date –∏–∑ API")
                                        actual_delivery_date = "_–æ—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞_"
                                break  # Exit loop after finding delivered status
                        elif status.get('code') == 'NOT_DELIVERED':
                            # Get the reason for the delivery problem
                            delivery_problem_reason_code = status.get('status_reason_code')
                            if delivery_problem_reason_code:
                                delivery_problem_reason = f"–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π (–∫–æ–¥: {delivery_problem_reason_code})"
                            else:
                                delivery_problem_reason = "–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π (–ø—Ä–∏—á–∏–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞)"

                else:
                    return planned_delivery_date, actual_delivery_date, delivery_problem_reason  # Or a message indicating no entity found

                return planned_delivery_date, actual_delivery_date, delivery_problem_reason

            except requests.exceptions.RequestException as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Tracking API: {e}")
                return "_–æ–∂–∏–¥–∞–µ—Ç—Å—è_", "_–æ–∂–∏–¥–∞–µ—Ç—Å—è_", "–û—à–∏–±–∫–∞ API"
            except json.JSONDecodeError as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ Tracking API: {e}")
                return "_–æ–∂–∏–¥–∞–µ—Ç—Å—è_", "_–æ–∂–∏–¥–∞–µ—Ç—Å—è_", "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ API"

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–∂–∏–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
        def get_delivery_mode_text(delivery_mode):
            if delivery_mode == '1':
                return "–ö—É—Ä—å–µ—Ä –∑–∞–±–µ—Ä–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"
            elif delivery_mode == '2':
                return "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∫—É—Ä—å–µ—Ä–æ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—é"
            elif delivery_mode == '3':
                return "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å–¥–∞–Ω–æ –≤ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –°–î–≠–ö –≤ –≥–æ—Ä–æ–¥–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ"
            elif delivery_mode == '4':
                return "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–±—Ä–∞–Ω–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º –∏–∑ –ü–í–ó –°–î–≠–ö"
            elif delivery_mode == '5':
                return "–î–æ—Å—Ç–∞–≤–∫–∞ –≤ –ø–æ—Å—Ç–∞–º–∞—Ç"
            else:
                return "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞
        def get_tariff_name(tariff_code):
            """
            –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –ø–æ –µ–≥–æ –∫–æ–¥—É.

            Args:
                tariff_code (int): –ö–æ–¥ —Ç–∞—Ä–∏—Ñ–∞.

            Returns:
                str: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞ –∏–ª–∏ "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω", –µ—Å–ª–∏ –∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.
            """
            tariff_names = {
                1: "–≠–∫—Å–ø—Ä–µ—Å—Å –ª–∞–π—Ç",
                7: "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —ç–∫—Å–ø—Ä–µ—Å—Å –¥–æ–∫—É–º–µ–Ω—Ç—ã –¥–≤–µ—Ä—å-–¥–≤–µ—Ä—å",
                8: "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —ç–∫—Å–ø—Ä–µ—Å—Å –≥—Ä—É–∑—ã –¥–≤–µ—Ä—å-–¥–≤–µ—Ä—å",
                10: "–≠–∫–æ–Ω–æ–º–∏—á–Ω—ã–π —ç–∫—Å–ø—Ä–µ—Å—Å",
                11: "–≠–∫—Å–ø—Ä–µ—Å—Å –ø–ª—é—Å",
                15: "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —ç–∫—Å–ø—Ä–µ—Å—Å",
                16: "–ò–º–ø–æ—Ä—Ç",
                17: "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —ç–∫–æ–Ω–æ–º–∏—á–Ω—ã–π",
                57: "–ö–∏—Ç–∞–π—Å–∫–∏–π —ç–∫—Å–ø—Ä–µ—Å—Å",
                62: "–°–î–≠–ö-–ü–æ—Å—ã–ª–∫–∞",
                63: "CDEK Express",
                136: "–ü–æ—Å—ã–ª–∫–∞ —Å–∫–ª–∞–¥-—Å–∫–ª–∞–¥",
                137: "–ü–æ—Å—ã–ª–∫–∞ —Å–∫–ª–∞–¥-–¥–≤–µ—Ä—å",
                138: "–ü–æ—Å—ã–ª–∫–∞ –¥–≤–µ—Ä—å-—Å–∫–ª–∞–¥",
                139: "–ü–æ—Å—ã–ª–∫–∞ –¥–≤–µ—Ä—å-–¥–≤–µ—Ä—å",
                184: "E-com Standard –¥–≤–µ—Ä—å-–¥–≤–µ—Ä—å",
                185: "E-com Standard —Å–∫–ª–∞–¥-—Å–∫–ª–∞–¥",
                186: "E-com Standard —Å–∫–ª–∞–¥-–¥–≤–µ—Ä—å",
                187: "E-com Standard –¥–≤–µ—Ä—å-—Å–∫–ª–∞–¥",
                231: "–≠–∫–æ–Ω–æ–º–∏—á–Ω–∞—è –ø–æ—Å—ã–ª–∫–∞ –¥–≤–µ—Ä—å-–¥–≤–µ—Ä—å",
                232: "–≠–∫–æ–Ω–æ–º–∏—á–Ω–∞—è –ø–æ—Å—ã–ª–∫–∞ –¥–≤–µ—Ä—å-—Å–∫–ª–∞–¥",
                233: "–≠–∫–æ–Ω–æ–º–∏—á–Ω–∞—è –ø–æ—Å—ã–ª–∫–∞ —Å–∫–ª–∞–¥-–¥–≤–µ—Ä—å",
                234: "–≠–∫–æ–Ω–æ–º–∏—á–Ω–∞—è –ø–æ—Å—ã–ª–∫–∞ —Å–∫–ª–∞–¥-—Å–∫–ª–∞–¥",
                291: "E-com Express —Å–∫–ª–∞–¥-—Å–∫–ª–∞–¥",
                293: "E-com Express –¥–≤–µ—Ä—å-–¥–≤–µ—Ä—å",
                294: "E-com Express —Å–∫–ª–∞–¥-–¥–≤–µ—Ä—å",
                295: "E-com Express –¥–≤–µ—Ä—å-—Å–∫–ª–∞–¥",
                358: "–§—É–ª—Ñ–∏–ª–º–µ–Ω—Ç –≤—ã–¥–∞—á–∞",
                366: "–ü–æ—Å—ã–ª–∫–∞ –¥–≤–µ—Ä—å-–ø–æ—Å—Ç–∞–º–∞—Ç",
                368: "–ü–æ—Å—ã–ª–∫–∞ —Å–∫–ª–∞–¥-–ø–æ—Å—Ç–∞–º–∞—Ç",
                378: "–≠–∫–æ–Ω–æ–º–∏—á–Ω–∞—è –ø–æ—Å—ã–ª–∫–∞ —Å–∫–ª–∞–¥-–ø–æ—Å—Ç–∞–º–∞—Ç",
                497: "E-com Standard –¥–≤–µ—Ä—å-–ø–æ—Å—Ç–∞–º–∞—Ç",
                498: "E-com Standard —Å–∫–ª–∞–¥-–ø–æ—Å—Ç–∞–º–∞—Ç",
                509: "E-com Express –¥–≤–µ—Ä—å-–ø–æ—Å—Ç–∞–º–∞—Ç",
                510: "E-com Express —Å–∫–ª–∞–¥-–ø–æ—Å—Ç–∞–º–∞—Ç",
                2261: "Documents Express –¥–≤–µ—Ä—å-–¥–≤–µ—Ä—å",
                2262: "Documents Express –¥–≤–µ—Ä—å-—Å–∫–ª–∞–¥",
                2263: "Documents Express —Å–∫–ª–∞–¥-–¥–≤–µ—Ä—å",
                2264: "Documents Express —Å–∫–ª–∞–¥-—Å–∫–ª–∞–¥",
                2266: "Documents Express –¥–≤–µ—Ä—å-–ø–æ—Å—Ç–∞–º–∞—Ç",
                2267: "Documents Express —Å–∫–ª–∞–¥-–ø–æ—Å—Ç–∞–º–∞—Ç",
                2321: "–≠–∫–æ–Ω–æ–º–∏—á–Ω—ã–π —ç–∫—Å–ø—Ä–µ—Å—Å –¥–≤–µ—Ä—å-—Å–∫–ª–∞–¥",
                2322: "–≠–∫–æ–Ω–æ–º–∏—á–Ω—ã–π —ç–∫—Å–ø—Ä–µ—Å—Å —Å–∫–ª–∞–¥-–¥–≤–µ—Ä—å",
                2323: "–≠–∫–æ–Ω–æ–º–∏—á–Ω—ã–π —ç–∫—Å–ø—Ä–µ—Å—Å —Å–∫–ª–∞–¥-—Å–∫–ª–∞–¥",
                2360: "–î–æ—Å—Ç–∞–≤–∫–∞ –¥–µ–Ω—å –≤ –¥–µ–Ω—å",
                2536: "–û–¥–∏–Ω –æ—Ñ–∏—Å (–ò–ú)"

            }
            return tariff_names.get(tariff_code, "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω")

        print(f"Debug: Callback query data: {callback_query.data}")

        cursor.execute("SELECT order_info FROM new_orders WHERE user_id = ? ORDER BY id DESC LIMIT 1",
                       (callback_query.from_user.id,))
        order_info = cursor.fetchone()
        id = callback_query.from_user.id
        if order_info:
            order_info_str = order_info[0]
            print(f"Debug: Fetched order info: {order_info_str}")

            try:
                order_info_dict = ast.literal_eval(order_info_str)
                if 'entity' in order_info_dict:
                    entity_info = order_info_dict['entity']

                    # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∂–∏–º –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞, –∏—Å–ø–æ–ª—å–∑—É—è —Ñ—É–Ω–∫—Ü–∏–∏
                    delivery_mode = entity_info.get('delivery_mode', 'N/A')
                    delivery_mode_text = get_delivery_mode_text(delivery_mode)
                    tariff_code = entity_info.get('tariff_code', 'N/A')
                    tariff_name = get_tariff_name(tariff_code)
                    print(tariff_name)

                    # Extract sender and recipient information, handling potential None values
                    sender_company = entity_info.get('sender', {}).get('company', 'N/A')
                    sender_name = entity_info.get('sender', {}).get('name', 'N/A')
                    recipient_company = entity_info.get('recipient', {}).get('company', 'N/A')

                    # Initialize recipient_name with a default value
                    recipient_name = 'N/A'
                    recipient_data = entity_info.get('recipient', {})
                    if recipient_data:  # Check if recipient data exists
                        recipient_name = recipient_data.get('name', 'N/A')

                    # Clean up company names (remove quotes and handle potential Unicode issues)
                    sender_company = sender_company.replace('"', '').encode('utf-8').decode('utf-8', 'replace')
                    sender_name = sender_name.replace('"', '').encode('utf-8').decode('utf-8', 'replace')
                    recipient_company = recipient_company.replace('"', '').encode('utf-8').decode('utf-8', 'replace')
                    recipient_name = recipient_name.replace('"', '').encode('utf-8').decode('utf-8', 'replace')

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –≤—ã–≤–æ–¥–∞
                    entity_text = "üîç *–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:*\n"
                    entity_text += f"- –ù–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è: {entity_info.get('cdek_number', 'N/A')}\n"
                    entity_text += f"- –ü—É–Ω–∫—Ç –¥–æ—Å—Ç–∞–≤–∫–∏: {entity_info.get('delivery_point', 'N/A')}\n"
                    entity_text += f"- –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç–∞–≤–∫–∏: {entity_info.get('to_location', {}).get('country', 'N/A')}, {entity_info.get('to_location', {}).get('city', 'N/A')}, {entity_info.get('to_location', {}).get('address', 'N/A')}\n"
                    entity_text += f"- –¢–∞—Ä–∏—Ñ: {tariff_name} (–ö–æ–¥: {tariff_code})\n"
                    entity_text += f"- –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞ —É—Å–ª—É–≥–∏ (—Ç–∞—Ä–∏—Ñ + –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–±–æ—Ä –∑–∞ –æ–±—ä—è–≤–ª–µ–Ω–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å): {entity_info.get('delivery_detail', {}).get('total_sum', 'N/A')} —Ä—É–±.\n"
                    entity_text += f"- –û–ø–ª–∞—Ç–∞ –∑–∞ —Ç–æ–≤–∞—Ä: {entity_info.get('items_cost', 'N/A')} ‚ÇΩ\n"  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–ª—é—á–∞
                    entity_text += f"- –î–æ–ø. —Å–±–æ—Ä —Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∑–∞ –¥–æ—Å—Ç–∞–≤–∫—É: 0,00 ‚ÇΩ\n"  # –ù—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å, –≥–¥–µ —ç—Ç–æ —Ö—Ä–∞–Ω–∏—Ç—Å—è
                    entity_text += "- –°—É–º–º–∞ –Ω–∞–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞, –∫–æ—Ç–æ—Ä—É—é –≤–∑—è–ª–∏ —Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è:\n\n"  # –ù—É–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å, –≥–¥–µ —ç—Ç–æ —Ö—Ä–∞–Ω–∏—Ç—Å—è

                    # entity_text += "‚úÖ–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä—É—á–µ–Ω–∏–∏:\n\n"
                    entity_text += "üë• *–ö–æ–Ω—Ç–∞–∫—Ç—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:*\n"
                    entity_text += f"- –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_company} - {sender_name}\n"
                    entity_text += f"- üìû –¢–µ–ª–µ—Ñ–æ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: {entity_info.get('sender', {}).get('phones', [{}])[0].get('number', 'N/A')}\n"

                    entity_text += "üë• *–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø–æ–ª—É—á–∞—Ç–µ–ª—è:*\n"
                    entity_text += f"- –ü–æ–ª—É—á–∞—Ç–µ–ª—å: {recipient_company} - {recipient_name}\n"
                    entity_text += f"- üìû –¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {entity_info.get('recipient', {}).get('phones', [{}])[0].get('number', 'N/A')}\n\n"

                    entity_text += "üéÅ *–°–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–æ—Å—ã–ª–∫–∏:*\n"
                    i = 1
                    for package in entity_info.get('packages', []):
                        entity_text += f"{i}) –ù–æ–º–µ—Ä –º–µ—Å—Ç–∞: {package.get('number', 'N/A')}, –í–µ—Å: {package.get('weight', 'N/A')} –≥, –†–∞–∑–º–µ—Ä—ã: {package.get('length', 'N/A')}x{package.get('width', 'N/A')}x{package.get('height', 'N/A')} —Å–º\n"
                        for item in package.get('items', []):
                            item_name = item.get('name', 'N/A').replace('_', '\\_')  # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º _
                            entity_text += f"- {item_name}: –í–µ—Å: {item.get('weight', 'N/A')} –≥, –°—Ç–æ–∏–º–æ—Å—Ç—å: {item.get('cost', 'N/A')} —Ä—É–±.\n"
                        i += 1

                    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö –¥–æ—Å—Ç–∞–≤–∫–∏
                    delivery_problems_section = ""
                    if 'statuses' in entity_info and len(entity_info['statuses']) > 0:
                        last_status = entity_info['statuses'][-1]
                        if 'delivery_detail' in last_status and last_status['delivery_detail']:
                            delivery_problems_section = (
                                "\n‚ö†Ô∏è *–ü—Ä–æ–±–ª–µ–º—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–æ –¥–≤–µ—Ä–∏ (–∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç –∫—É—Ä—å–µ—Ä–∞):*\n"
                                f"- {last_status['delivery_detail']}\n\n"
                            )
                        else:
                            delivery_problems_section = "\n‚úÖ *–ü—Ä–æ–±–ª–µ–º —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –Ω–µ—Ç*\n\n"
                    else:
                        delivery_problems_section = "\n‚ÑπÔ∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –¥–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç*\n\n"

                    entity_text += delivery_problems_section

                    # def format_delivery_problems(entity_info):
                    #     """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö –¥–æ—Å—Ç–∞–≤–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –°–î–≠–ö"""
                    #     problems = []
                    #     status_codes = {s['code']: s for s in entity_info.get('statuses', [])}
                    #
                    #     # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤, —É–∫–∞–∑—ã–≤–∞—é—â–∏—Ö –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã
                    #     problem_statuses = {
                    #         'NOT_DELIVERED': '‚ùå –î–æ—Å—Ç–∞–≤–∫–∞ –Ω–µ –æ—Å—É—â–µ—Å—Ç–≤–ª–µ–Ω–∞',
                    #         'PARTIAL_DELIVERED': '‚ö†Ô∏è –ß–∞—Å—Ç–∏—á–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞',
                    #         'RETURNED': '‚Ü©Ô∏è –ü–æ—Å—ã–ª–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞',
                    #         'RETURNED_TO_SENDER_CITY_WAREHOUSE': '‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–æ—Ä–æ–¥ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è',
                    #         'RETURNED_TO_RECIPIENT_CITY_WAREHOUSE': '‚Ü©Ô∏è –í–æ–∑–≤—Ä–∞—Ç –Ω–∞ —Å–∫–ª–∞–¥ –¥–æ—Å—Ç–∞–≤–∫–∏',
                    #         'LOST': '‚ùó –ü–æ—Å—ã–ª–∫–∞ —É—Ç–µ—Ä—è–Ω–∞',
                    #         'DAMAGED': '‚ùó –ü–æ—Å—ã–ª–∫–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∞'
                    #     }
                    #
                    #     for code, message in problem_statuses.items():
                    #         if code in status_codes:
                    #             status = status_codes[code]
                    #             problem_details = f"{message} ({status.get('city', '')})"
                    #             if 'reason' in status:
                    #                 problem_details += f"\n   - –ü—Ä–∏—á–∏–Ω–∞: {status['reason']}"
                    #             if 'courier_comment' in status:
                    #                 problem_details += f"\n   -–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫—É—Ä—å–µ—Ä–∞: {status['courier_comment']}"
                    #             problems.append(problem_details)
                    #
                    #     # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤ –¥–æ—Å—Ç–∞–≤–∫–∏
                    #     if 'calls' in entity_info:
                    #         for call in entity_info['calls'].get('rescheduled_calls', []):
                    #             problems.append(
                    #                 f"‚è± –ü–µ—Ä–µ–Ω–æ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ –Ω–∞ {call.get('date_next', '?')}\n"
                    #                 f"   ‚îî‚îÄ –ü—Ä–∏—á–∏–Ω–∞: {call.get('comment', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}"
                    #             )
                    #     from datetime import datetime
                    #     # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–µ—Ä–∂–∫–∏ –¥–æ—Å—Ç–∞–≤–∫–∏
                    #     planned_date = entity_info.get('planned_delivery_date')
                    #     actual_date = entity_info.get('delivery_date')
                    #     if planned_date and actual_date and planned_date != actual_date:
                    #         try:
                    #             delta = (datetime.strptime(actual_date, "%Y-%m-%d") -
                    #                      datetime.strptime(planned_date, "%Y-%m-%d")).days
                    #             if delta > 0:
                    #                 problems.append(f"‚åõ –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {delta} –¥–Ω–µ–π")
                    #         except ValueError:
                    #             pass
                    #
                    #     # 4. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                    #     if problems:
                    #         problems_text = "\n".join([f"- {p}" for p in problems])
                    #         return (
                    #             "\n‚ö†Ô∏è *–ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π:*\n"
                    #             f"{problems_text}\n"
                    #             "‚ÑπÔ∏è *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è:* –£—Ç–æ—á–Ω–∏—Ç–µ –¥–µ—Ç–∞–ª–∏ –≤ —Å–ª—É–∂–±–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –°–î–≠–ö\n"
                    #         )
                    #     return "\n‚úÖ *–ü—Ä–æ–±–ª–µ–º —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –Ω–µ –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ*\n"
                    #
                    # # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –∫–æ–¥–µ:
                    # entity_text += format_delivery_problems(entity_info)
                    entity_text += f"\n"
















                    # entity_text += f"\nüöö *–†–µ–∂–∏–º –¥–æ—Å—Ç–∞–≤–∫–∏:* {delivery_mode_text}\n"
                    # entity_text += f"üìã –¢–∞—Ä–∏—Ñ: {tariff_name} (–ö–æ–¥: {tariff_code})\n\n"

                    # Extract data for delivery time calculation
                    sender_city_code = entity_info.get('from_location', {}).get('code', None)
                    recipient_city_code = entity_info.get('to_location', {}).get('code', None)
                    tariff_code = entity_info.get('tariff_code', None)
                    # Assuming all packages have the same dimensions; you might need to average or find the largest
                    if entity_info.get('packages'):
                        first_package = entity_info['packages'][0]
                        weight = first_package.get('weight', 1000)  # Default weight
                        length = first_package.get('length', 10)  # Default dimension
                        width = first_package.get('width', 10)  # Default dimension
                        height = first_package.get('height', 10)  # Default dimension
                        cost = first_package.get('cost', 10)  # Default dimension
                        print(cost)
                    else:
                        weight = 1000
                        length = 10
                        width = 10
                        height = 10
                        cost = 10

                    # Calculate delivery time (replace with actual API call)
                    if sender_city_code and recipient_city_code and tariff_code:
                        delivery_time = calculate_delivery_time(sender_city_code, recipient_city_code, weight, length,
                                                                width, height, cost, id)
                    else:
                        delivery_time = "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞"
                    print(delivery_time)
                    entity_text += "üìÖ *–°—Ä–æ–∫–∏:*\n"
                    entity_text += f"- –ü—Ä–∞–π—Å–æ–≤—ã–π —Å—Ä–æ–∫: {delivery_time}\n"
                    # Inside your main code, where you create entity_text
                    cdek_number = entity_info.get('cdek_number')  # Get the CDEK number
                    if cdek_number:
                        planned_delivery_date, actual_delivery_date, delivery_problem_reason = get_delivery_dates(
                            cdek_number, id)
                    else:
                        planned_delivery_date = "–æ–∂–∏–¥–∞–µ—Ç—Å—è"  # Handle the case where cdek_number is missing
                        actual_delivery_date = "–æ–∂–∏–¥–∞–µ—Ç—Å—è"
                        delivery_problem_reason = "–ù–æ–º–µ—Ä –°–î–≠–ö –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"  # Handle the case where cdek_number is missing





                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–π –¥–æ—Å—Ç–∞–≤–∫–µ
                    if planned_delivery_date and planned_delivery_date != "–æ–∂–∏–¥–∞–µ—Ç—Å—è":
                        entity_text += f"- –ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {planned_delivery_date}\n"
                    else:
                        entity_text += "*–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–π –¥–æ—Å—Ç–∞–≤–∫–µ:* –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n"
                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞ –ü–í–ó (–µ—Å–ª–∏ –µ—Å—Ç—å)
                    if 'warehouse' in entity_info and 'storage' in entity_info['warehouse']:
                        storage_date = entity_info['warehouse']['storage'].get('end_date')
                        if storage_date:
                            try:
                                storage_date = datetime.datetime.strptime(storage_date, "%Y-%m-%d").strftime("%d.%m.%Y")
                                entity_text += f"- –•—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ –ü–í–ó –¥–æ: {storage_date}\n"
                            except ValueError:
                                entity_text += "- –•—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ –ü–í–ó –¥–æ: –Ω–µ —É–∫–∞–∑–∞–Ω–æ\n"
                        else:
                            entity_text += "- –•—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ –ü–í–ó –¥–æ: –Ω–µ —É–∫–∞–∑–∞–Ω–æ\n"
                    else:
                        entity_text += "- –•—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞ –ü–í–ó –¥–æ: –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω–æ\n"







                    # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ related_entities —Ç–µ–∫—Å—Ç–æ–º
                    related_entities = order_info_dict.get('related_entities', [])
                    if related_entities:
                        entity_text += "- –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ :"
                        for delivery_info in related_entities:
                            delivery_date_str = delivery_info.get('date')
                            time_from_str = delivery_info.get('time_from')
                            time_to_str = delivery_info.get('time_to')

                            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
                            formatted_delivery_date = ""
                            formatted_time_from = ""
                            formatted_time_to = ""

                            if delivery_date_str:
                                try:
                                    delivery_date = datetime.datetime.strptime(delivery_date_str, "%Y-%m-%d")
                                    formatted_delivery_date = delivery_date.strftime("%d.%m.%Y")
                                except ValueError:
                                    formatted_delivery_date = "–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã"

                            if time_from_str:
                                formatted_time_from = time_from_str  # –í—Ä–µ–º—è —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ

                            if time_to_str:
                                formatted_time_to = time_to_str  # –í—Ä–µ–º—è —É–∂–µ –≤ –Ω—É–∂–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ

                            # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
                            delivery_text = ""
                            if formatted_delivery_date:
                                delivery_text += f"  –î–∞—Ç–∞: {formatted_delivery_date}, "
                            if formatted_time_from:
                                delivery_text += f"—Å {formatted_time_from} "
                            if formatted_time_to:
                                delivery_text += f"–¥–æ {formatted_time_to}"

                            # –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –∑–∞–ø—è—Ç—É—é –∏ –ø—Ä–æ–±–µ–ª, –µ—Å–ª–∏ –µ—Å—Ç—å
                            delivery_text = delivery_text.rstrip(', ')

                            if delivery_text:
                                entity_text += f"{delivery_text}\n"
                            else:
                                entity_text += "- –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–π –¥–æ—Å—Ç–∞–≤–∫–µ\n"


                    else:
                        entity_text += "- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞–Ω–∏—Ä—É–µ–º–æ–π –¥–æ—Å—Ç–∞–≤–∫–µ: –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç\n"

                    entity_text += f"- –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞: {actual_delivery_date}\n"

                    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–∫—É
                    overdue = calculate_overdue_days(planned_delivery_date, actual_delivery_date)

                    # if overdue is not None:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–µ—Ä–Ω—É–ª–æ—Å—å –Ω–µ None (–∑–Ω–∞—á–∏—Ç, –¥–∞—Ç—ã –±—ã–ª–∏ –≤–∞–ª–∏–¥–Ω—ã)
                    #     entity_text += f"- –ü—Ä–æ—Å—Ä–æ—á–∫–∞: {overdue} –¥–Ω–µ–π\n"
                    # else:
                    #     entity_text += "- –ü—Ä–æ—Å—Ä–æ—á–∫–∞: –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö (–æ–∂–∏–¥–∞–µ—Ç—Å—è –¥–æ—Å—Ç–∞–≤–∫–∞ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞—Ç—ã)\n"

                    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–ª–µ–º–µ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π
                    # entity_text += f"- –ü—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π: {delivery_problem_reason}\n"
                    entity_text += f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {entity_info.get('comment', 'N/A')}\n"

                    print(entity_text)

                    keyboard = InlineKeyboardMarkup()
                    keyboard.add(
                        InlineKeyboardButton("–¢–µ–ª–µ—Ñ–æ–Ω –æ—Ñ–∏—Å–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞ –≤—Ä—É—á–µ–Ω–∏–µ –ø–æ—Å—ã–ª–∫–∏",
                                             callback_data='delivery_office_phone')
                    )
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"
                    keyboard.add(
                        InlineKeyboardButton("‚ÜóÔ∏è –ü–æ–¥–µ–ª–∏—Ç—å—Å—è",
                                             switch_inline_query=f"–î–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—Å—ã–ª–∫–µ: {entity_text}")
                    )

                    max_length = 4000
                    if len(entity_text) > max_length:
                        split_index = entity_text.rfind('\n', 0, max_length)
                        if split_index == -1:
                            split_index = max_length

                        first_part = entity_text[:split_index]
                        second_part = entity_text[split_index:]

                        await bot.send_message(callback_query.from_user.id, first_part, parse_mode='Markdown')
                        await bot.send_message(callback_query.from_user.id, second_part, reply_markup=keyboard,
                                               parse_mode='Markdown')
                    else:
                        await bot.send_message(callback_query.from_user.id, entity_text, reply_markup=keyboard,
                                               parse_mode='Markdown')

                else:
                    await bot.send_message(callback_query.from_user.id,
                                           "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π –ø–æ –≤–∞—à–µ–º—É –¥–æ–≥–æ–≤–æ—Ä—É.")

            except (ValueError, SyntaxError) as e:
                await bot.send_message(callback_query.from_user.id,
                                       "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")
                print(f"Error: {e}")
            except Exception as e:
                await bot.send_message(callback_query.from_user.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
                print(f"Unexpected error: {e}")
        else:
            await bot.send_message(callback_query.from_user.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


    elif callback_query.data == 'parcel_data2':
        await callback_query.message.delete()
        # Fetch order info from the database
        cursor.execute("SELECT order_info FROM new_orders WHERE user_id = ? ORDER BY id DESC LIMIT 1",
                       (callback_query.from_user.id,))
        order_info = cursor.fetchone()
        if order_info:
            order_info_str = order_info[0]
            print(f"Debug: Fetched order info: {order_info_str}")  # Debugging line
            try:
                print("-----------------------------------------------------")
                order_info_dict = ast.literal_eval(order_info_str)  # Safely evaluate the string as a Python dictionary
                print("order_info_dict")
                if 'entity' in order_info_dict:
                    print("entity")
                    entity_info = order_info_dict['entity']
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
                    statuses = entity_info.get('statuses', [])
                    status_text = ""
                    for status in statuses:
                        status_text += f"üìå *–°—Ç–∞—Ç—É—Å:* {status['name']} ({status['code']}) - {status['date_time']} - {status['city']}\n"
                    print("status")
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏
                    delivery_mode = entity_info.get('delivery_mode', 'N/A')
                    delivery_mode_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
                    if delivery_mode == '1':
                        delivery_mode_text = "–ö—É—Ä—å–µ—Ä –∑–∞–±–µ—Ä–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"
                    elif delivery_mode == '2':
                        delivery_mode_text = "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∫—É—Ä—å–µ—Ä–æ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—é"
                    elif delivery_mode == '3':
                        delivery_mode_text = "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç —Å–¥–∞–Ω–æ –≤ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏ –°–î–≠–ö –≤ –≥–æ—Ä–æ–¥–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ"
                    elif delivery_mode == '4':
                        delivery_mode_text = "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–±—Ä–∞–Ω–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–º –∏–∑ –ü–í–ó –°–î–≠–ö"
                    else:
                        delivery_mode_text = f""  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    print(delivery_mode_text)
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∞—Ä–∏—Ñ (–ø–æ –∫–æ–¥—É, —Ç—Ä–µ–±—É–µ—Ç—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–æ–¥–æ–≤ –∏ –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–∞—Ä–∏—Ñ–æ–≤!)
                    tariff_code = entity_info.get('tariff_code', 'N/A')
                    tariff_name = "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                    if tariff_code == 1:
                        tariff_name = "–≠–∫—Å–ø—Ä–µ—Å—Å –ª–∞–π—Ç"  # –∏–ª–∏ "Express –ª–∞–π—Ç" - —É—Ç–æ—á–Ω–∏—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ
                    elif tariff_code == 3:
                        tariff_name = "–°—É–ø–µ—Ä-—ç–∫—Å–ø—Ä–µ—Å—Å –¥–æ 10:00"
                    elif tariff_code == 5:
                        tariff_name = "–°—É–ø–µ—Ä-—ç–∫—Å–ø—Ä–µ—Å—Å –¥–æ 18:00"
                    elif tariff_code == 10:
                        tariff_name = "–≠–∫–æ–Ω–æ–º–∏—á–Ω—ã–π —ç–∫—Å–ø—Ä–µ—Å—Å"
                    elif tariff_code == 11:
                        tariff_name = "–≠–∫—Å–ø—Ä–µ—Å—Å –ø–ª—é—Å"
                    elif tariff_code == 15:
                        tariff_name = "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —ç–∫—Å–ø—Ä–µ—Å—Å"
                    elif tariff_code == 16:
                        tariff_name = "–ò–º–ø–æ—Ä—Ç"
                    elif tariff_code == 17:
                        tariff_name = "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π —ç–∫–æ–Ω–æ–º–∏—á–Ω—ã–π"
                    elif tariff_code == 57:
                        tariff_name = "–ö–∏—Ç–∞–π—Å–∫–∏–π —ç–∫—Å–ø—Ä–µ—Å—Å"
                    elif tariff_code == 62:
                        tariff_name = "–°–î–≠–ö-–ü–æ—Å—ã–ª–∫–∞"  # –∏–ª–∏ "CDEK-–ü–æ—Å—ã–ª–∫–∞"
                    elif tariff_code == 63:
                        tariff_name = "CDEK Express"
                    elif tariff_code == 136:
                        tariff_name = "–ü–æ—Å—ã–ª–∫–∞ –¥–≤–µ—Ä—å-–¥–≤–µ—Ä—å"  # –°–∞–º—ã–π –ø–æ–ø—É–ª—è—Ä–Ω—ã–π –¥–ª—è e-commerce
                    elif tariff_code == 137:
                        tariff_name = "–ü–æ—Å—ã–ª–∫–∞ —Å–∫–ª–∞–¥-—Å–∫–ª–∞–¥"
                    elif tariff_code == 139:
                        tariff_name = "–≠–∫–æ–Ω–æ–º–∏—á–Ω–∞—è –ø–æ—Å—ã–ª–∫–∞ —Å–∫–ª–∞–¥-—Å–∫–ª–∞–¥"
                    elif tariff_code == 233:
                        tariff_name = "Prime"
                    elif tariff_code == 291:
                        tariff_name = "LTL"
                    elif tariff_code == 292:
                        tariff_name = "FTL"
                    else:
                        tariff_name = f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ (–∫–æ–¥ {tariff_code})"  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏

                    print(tariff_name)
                    entity_text = (
                        f"üì¶ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–∏:*\n\n"
                        f"üîë *UUID:* {entity_info.get('uuid', 'N/A')}\n"
                        f"üìù *–ù–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:* {entity_info.get('cdek_number', 'N/A')}\n"
                        f"  üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {entity_info.get('comment', 'N/A')}\n"
                        f"  üìç *–ü—É–Ω–∫—Ç –¥–æ—Å—Ç–∞–≤–∫–∏:* {entity_info.get('delivery_point', 'N/A')}\n"
                        f"  üë• *–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:* {entity_info['sender'].get('company', 'N/A')} - {entity_info['sender'].get('name', 'N/A')}\n"
                        f"  üë• *–ü–æ–ª—É—á–∞—Ç–µ–ª—å:* {entity_info['recipient'].get('company', 'N/A')} - {entity_info['recipient'].get('name', 'N/A')}\n"
                        f"üìã *–¢–∞—Ä–∏—Ñ–Ω—ã–π –∫–æ–¥:* {entity_info.get('tariff_code', 'N/A')}\n"
                        f"üìã *–¢–∞—Ä–∏—Ñ:* {tariff_name} (–ö–æ–¥: {tariff_code})\n"  # –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–∞
                        f"üè¢ *–ü—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:* {entity_info.get('shipment_point', 'N/A')}\n"
                        f"üíµ *–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ (–≤ –≤–∞–ª—é—Ç–µ):* {entity_info.get('items_cost_currency', 'N/A')}\n"
                        f"üöö *–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞:* {entity_info.get('delivery_recipient_cost', {}).get('value', 'N/A')}\n\n"
                        f"üë§ *–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:* {entity_info.get('sender', {}).get('name', 'N/A')}\n"
                        f"  üìû *–¢–µ–ª–µ—Ñ–æ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:* {entity_info.get('sender', {}).get('phones', [{}])[0].get('number', 'N/A')}\n"
                            f"üè¢ *–ö–æ–º–ø–∞–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è:* {entity_info.get('recipient', {}).get('company', 'N/A')}\n\n"
                        f"üë§ *–ü–æ–ª—É—á–∞—Ç–µ–ª—å:* {entity_info.get('recipient', {}).get('name', 'N/A')}\n"
                        f"  üìû *–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è:* {entity_info.get('recipient', {}).get('phones', [{}])[0].get('number', 'N/A')}\n"
                        f"üìå *–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑:* {entity_info.get('from_location', {}).get('city', 'N/A')}, {entity_info.get('from_location', {}).get('country', 'N/A')}\n"
                        f"üìå *–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤:* {entity_info.get('to_location', {}).get('city', 'N/A')}, {entity_info.get('to_location', {}).get('country', 'N/A')}\n"
                        f"üöö *–†–µ–∂–∏–º –¥–æ—Å—Ç–∞–≤–∫–∏:* {delivery_mode_text}\n"  # –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
                        # f"{status_text}"
                    )
                    print(entity_text)
                    # Add your code to process and send the entity information
                    keyboard = InlineKeyboardMarkup()
                    keyboard.add(
                        InlineKeyboardButton("–¢–µ–ª–µ—Ñ–æ–Ω –æ—Ñ–∏—Å–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞ –≤—Ä—É—á–µ–Ω–∏–µ –ø–æ—Å—ã–ª–∫–∏",
                                             callback_data='delivery_office_phone'),
                        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='go_back')
                    )
                    max_length = 4000

                    if len(entity_text) > max_length:
                        # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–µ –º–µ—Å—Ç–æ –¥–ª—è —Ä–∞–∑—Ä—ã–≤–∞ —Å—Ç—Ä–æ–∫–∏, —á—Ç–æ–±—ã –Ω–µ —Å–ª–æ–º–∞—Ç—å Markdown
                        split_index = entity_text.rfind('\n', 0, max_length)  # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É

                        if split_index == -1:
                            split_index = max_length  # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –ø—Ä–æ—Å—Ç–æ –æ–±—Ä–µ–∑–∞–µ–º –ø–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω–µ

                        first_part = entity_text[:split_index]
                        second_part = entity_text[split_index:]

                        await bot.send_message(callback_query.from_user.id, first_part)
                        await bot.send_message(callback_query.from_user.id, second_part, reply_markup=keyboard)
                    else:
                        await bot.send_message(callback_query.from_user.id, entity_text, reply_markup=keyboard)
                else:
                    await bot.send_message(callback_query.from_user.id,
                                           "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π –ø–æ –≤–∞—à–µ–º—É –¥–æ–≥–æ–≤–æ—Ä—É.")

            except (ValueError, SyntaxError) as e:
                await bot.send_message(callback_query.from_user.id, "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")
                print(f"Error: {e}")
        else:
            await bot.send_message(callback_query.from_user.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")



    elif callback_query.data == 'delivery_office_phone':
        await callback_query.message.delete()
        cursor.execute("SELECT order_info FROM new_orders WHERE user_id = ? ORDER BY id DESC LIMIT 1",
                       (callback_query.from_user.id,))
        order_info = cursor.fetchone()
        id = callback_query.from_user.id
        if order_info:
            order_info_str = order_info[0]
            print(f"Debug: Fetched order info: {order_info_str}")  # Debugging line
            try:
                order_info_dict = ast.literal_eval(order_info_str)  # Safely evaluate the string as a Python dictionary
                if 'entity' in order_info_dict:
                    entity_info = order_info_dict['entity']

                    delivery_point_code = entity_info.get('delivery_point')
                    print(delivery_point_code)
                    from Delivery_Arrangement_Information import deliverypoints, format_deliverypoint_info
                    if delivery_point_code:
                        response = deliverypoints(id, delivery_point_code)
                        if response:
                            formatted_info = format_deliverypoint_info(response[0])
                            await callback_query.message.answer(
                                f"{formatted_info}")
                        else:
                            await callback_query.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—É–Ω–∫—Ç–µ –≤—ã–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                    else:
                        await callback_query.message.answer("–ö–æ–¥ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞.")
            except (SyntaxError, ValueError) as e:
                print(f"Error parsing order info: {e}")  # Debugging line
                await callback_query.message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞.")
        else:
            await callback_query.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


    elif callback_query.data == 'go_back':

        await process_order_number(callback_query.message, state=None)










    elif callback_query.data == 'change_order':
        await callback_query.message.delete()
        keyboard_markup = types.InlineKeyboardMarkup(row_width=1)
        buttons = [
            types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è", callback_data='change_fullname'),
            types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è", callback_data='change_phone'),
            types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å\–æ—Ñ–∏—Å –¥–æ—Å—Ç–∞–≤–∫–∏–¢–∞—Ä–∏—Ñ", callback_data='change_address')
        ]
        keyboard_markup.add(*buttons)
        await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å",
                               reply_markup=keyboard_markup)
    elif callback_query.data == 'change_address':
        keyboard_markup = types.InlineKeyboardMarkup(row_width=1)
        buttons = [
            types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–¥–ª—è —Ä–µ–∂–∏–º–∞ ¬´‚Ä¶–¥–æ –¥–≤–µ—Ä–∏¬ª)", callback_data='address'),
            types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –æ—Ñ–∏—Å –¥–æ—Å—Ç–∞–≤–∫–∏ (–ü–í–ó)", callback_data='change_pickup_point'),
            # types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ–ª—É—á–∞—Ç–µ–ª—è", callback_data='change_city')
        ]
        keyboard_markup.add(*buttons)
        await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å",
                               reply_markup=keyboard_markup)

    elif callback_query.data == 'cancel_delivery':
        await callback_query.message.delete()

        await otmena_zakaza(callback_query)
        # await bot.send_message(callback_query.from_user.id, "–§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    elif callback_query.data == 'change_delivery_date':
        await callback_query.message.delete()
        # await bot.send_message(callback_query.from_user.id, "–§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
        await change_delivery_date(callback_query)




    elif callback_query.data == 'edit_cod_amount':
        await callback_query.message.delete()
        keyboard_markup = types.InlineKeyboardMarkup(row_width=1)
        buttons = [
            types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏", callback_data='otmena_vcex_plat'),
            # types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –∑–∞ —Ç–æ–≤–∞—Ä", callback_data='izmenit_za_tovar'),
            types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –∑–∞ –¥–æ–ø. —Å–±–æ—Ä", callback_data='izmenit_za_dop')
        ]
        keyboard_markup.add(*buttons)
        await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å",
                               reply_markup=keyboard_markup)

    elif callback_query.data == 'otmena_vcex_plat':
        from izmeneniya import nalozh_pay_otmena_vse_3
        id = callback_query.from_user.id
        cursor.execute('SELECT order_info FROM new_orders WHERE user_id = ? ORDER BY id DESC LIMIT 1', (callback_query.from_user.id,))
        order_info = cursor.fetchone()
        print(order_info)
        if order_info:
            try:
                order_info_str = order_info[0]
                order_info_dict = ast.literal_eval(order_info_str)

                # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è –∏–∑ order_info_dict –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ nalozh_pay_otmena_vse
                uuid = order_info_dict['entity']['uuid']
                tariff_code = order_info_dict['entity'].get('tariff_code',
                                                            None)  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ .get(), —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –∫–ª—é—á –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
                sender_city_id = order_info_dict['entity'].get('sender_city_id', None)
                delivery_recipient_cost_value = order_info_dict['entity'].get('delivery_recipient_cost', {}).get('value',
                                                                                                                 None)  # –∏–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
                # –∏ –¥—Ä—É–≥–∏–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞

                nalozh_pay_otmena = nalozh_pay_otmena_vse_3(
                    cdek_number=uuid,
                    tariff_code=tariff_code,
                    sender_city_id=sender_city_id,
                    delivery_recipient_cost_value=delivery_recipient_cost_value,
                    id = id,
                    # –ü–µ—Ä–µ–¥–∞–π—Ç–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–æ–ª—è
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –æ—Ç API –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if isinstance(nalozh_pay_otmena, dict) and 'entity' in nalozh_pay_otmena and nalozh_pay_otmena[
                    'entity'].get('uuid') == uuid and 'requests' in nalozh_pay_otmena and len(
                        nalozh_pay_otmena['requests']) > 0 and nalozh_pay_otmena['requests'][0]['state'] == 'ACCEPTED':
                    await callback_query.message.answer(
                        "–ù–∞–ª–æ–∂–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω!")  # –∏–ª–∏ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                else:
                    await callback_query.message.answer(
                        f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –Ω–∞–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞: {nalozh_pay_otmena}")  # –í—ã–≤–æ–¥–∏–º –æ—Ç–≤–µ—Ç API –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

            except Exception as e:  # –õ–æ–≤–∏–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–µ
                await callback_query.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

        else:
            await callback_query.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")









    elif callback_query.data == 'extend_storage':
        cursor.execute("SELECT order_info FROM new_orders WHERE user_id = ? ORDER BY id DESC LIMIT 1",
                       (callback_query.from_user.id,))
        order_info = cursor.fetchone()
        if order_info:
            order_info_str = order_info[0]
            print(f"Debug: Fetched order info: {order_info_str}")  # Debugging line
            try:
                order_info_dict = ast.literal_eval(order_info_str)  # Safely evaluate the string as a Python dictionary
                if 'entity' in order_info_dict:
                    entity_info = order_info_dict['entity']
                    delivery_point_code = entity_info.get('delivery_point')
                    print(delivery_point_code)
                    from Delivery_Arrangement_Information import deliverypoints, format_deliverypoint_info
                    if delivery_point_code:
                        response = deliverypoints(delivery_point_code)
                        if response:
                            formatted_info = format_deliverypoint_info(response[0])
                            await callback_query.message.answer(f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É:\n\n{formatted_info}")
                        else:
                            await callback_query.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—É–Ω–∫—Ç–µ –≤—ã–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                    else:
                        await callback_query.message.answer("–ö–æ–¥ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞.")
            except (SyntaxError, ValueError) as e:
                print(f"Error parsing order info: {e}")  # Debugging line
                await callback_query.message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞.")
        else:
            await callback_query.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")



    elif callback_query.data == '/lists':
        # Create a new inline keyboard with three buttons
        inline_keyboard = InlineKeyboardMarkup(row_width=1)
        inline_keyboard.add(
            # InlineKeyboardButton("–°–ø–∏—Å–∫–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤", callback_data='list_regions'),
            InlineKeyboardButton("–°–ø–∏—Å–∫–∏ –æ—Ñ–∏—Å–æ–≤", callback_data='list_offices')
            # InlineKeyboardButton("–°–ø–∏—Å–∫–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤", callback_data='list_settlements')
        )
        # Send the "–≤—ã–±–µ—Ä–µ—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞" message with the inline keyboard
        await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–µ—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=inline_keyboard)


    # You can implement specific logic for each callback data here
    elif callback_query.data == 'list_regions':
        from regions import region_code
        region = region_code()
        message = "üåç **–°–ø–∏—Å–∫–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤ üèûÔ∏è**:\n"
        for code, region in region.items():
            message += f"- {code}: '{region}'\n"

        await bot.send_message(callback_query.from_user.id, message)

    elif callback_query.data == 'list_offices':
        await bot.send_message(callback_query.from_user.id, "–°–ø–∏—Å–∫–∏ –æ—Ñ–∏—Å–æ–≤")


    elif callback_query.data == 'list_settlements':
        await bot.send_message(callback_query.from_user.id, "–°–ø–∏—Å–∫–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤")



# # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–∞—Ç–∞–º–∏
# def create_date_keyboard():
#     keyboard = InlineKeyboardMarkup(row_width=2)
#     # –ù–∞—á–∏–Ω–∞–µ–º —Å –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
#     today = datetime.now() + timedelta(days=1)
#     for i in range(5):
#         date = today + timedelta(days=i)
#         date_str = date.strftime('%Y-%m-%d')
#         keyboard.add(InlineKeyboardButton(text=date_str, callback_data=f"date_{date_str}"))
#     return keyboard
#
# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º
# def create_time_keyboard():
#     keyboard = InlineKeyboardMarkup(row_width=3)
#     keyboard.add(InlineKeyboardButton(text="09:00-14:00", callback_data="time_09:00-14:00"))
#     keyboard.add(InlineKeyboardButton(text="14:00-18:00", callback_data="time_14:00-18:00"))
#     keyboard.add(InlineKeyboardButton(text="09:00-18:00", callback_data="time_09:00-18:00"))
#     return keyboard
#
# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
# async def change_delivery_date(callback_query: types.CallbackQuery):
#     await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=create_date_keyboard())
#     await Form.change_delivery_date_date.set()
#
# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
# @dp.callback_query_handler(lambda c: c.data.startswith('date_'), state=Form.change_delivery_date_date)
# async def process_change_delivery_date_date(callback_query: types.CallbackQuery, state: FSMContext):
#     date = callback_query.data.split('_')[1]
#     await state.update_data(change_delivery_date_date=date)
#     await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=create_time_keyboard())
#     await Form.change_delivery_date_time_from.set()
#
# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
# @dp.callback_query_handler(lambda c: c.data.startswith('time_'), state=Form.change_delivery_date_time_from)
# async def process_change_delivery_date_time_from(callback_query: types.CallbackQuery, state: FSMContext):
#     time_range = callback_query.data.split('_')[1]
#     time_from = time_range.split('-')[0]
#     time_to = time_range.split('-')[1]
#
#     await state.update_data(change_delivery_date_time_from=time_from)
#     await state.update_data(change_delivery_date_time_to=time_to) # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º time_to
#     await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏:")
#     await Form.change_delivery_date_comment.set()
#
# # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
# @dp.message_handler(state=Form.change_delivery_date_comment)
# async def process_change_delivery_date_comment(message: types.Message, state: FSMContext):
#     print('-------------------------------------------------------')
#     comment = message.text
#     print(comment)
#     await state.update_data(change_delivery_date_comment=comment)
#
#     # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
#     data = await state.get_data()
#     print(data)
#     date = data['change_delivery_date_date']
#     time_from = data['change_delivery_date_time_from']
#     time_to = data['change_delivery_date_time_to']
#     comment = data['change_delivery_date_comment']
#
#
#     # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ API –°–î–≠–ö
#     await send_delivery_date_change_request(message, state, date, time_from, time_to, comment)
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–∞—Ç–∞–º–∏
def create_date_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=2)
    # –ù–∞—á–∏–Ω–∞–µ–º —Å –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
    today = datetime.now() + timedelta(days=1)
    for i in range(5):
        date = today + timedelta(days=i)
        date_str = date.strftime('%Y-%m-%d')
        keyboard.add(InlineKeyboardButton(text=date_str, callback_data=f"date_{date_str}"))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"
    keyboard.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥", callback_data="cancel_change_date"))
    return keyboard

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –≤—Ä–µ–º–µ–Ω–µ–º
def create_time_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=3)
    keyboard.add(InlineKeyboardButton(text="09:00-14:00", callback_data="time_09:00-14:00"))
    keyboard.add(InlineKeyboardButton(text="14:00-18:00", callback_data="time_14:00-18:00"))
    keyboard.add(InlineKeyboardButton(text="09:00-18:00", callback_data="time_09:00-18:00"))

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–º–µ–Ω–∞"
    keyboard.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥", callback_data="cancel_change_time"))
    return keyboard

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
async def change_delivery_date(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=create_date_keyboard())
    await Form.change_delivery_date_date.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
@dp.callback_query_handler(lambda c: c.data.startswith('date_'), state=Form.change_delivery_date_date)
async def process_change_delivery_date_date(callback_query: types.CallbackQuery, state: FSMContext):
    date = callback_query.data.split('_')[1]
    await state.update_data(change_delivery_date_date=date)
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=create_time_keyboard())
    await Form.change_delivery_date_time_from.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
@dp.callback_query_handler(lambda c: c.data.startswith('time_'), state=Form.change_delivery_date_time_from)
async def process_change_delivery_date_time_from(callback_query: types.CallbackQuery, state: FSMContext):
    time_range = callback_query.data.split('_')[1]
    time_from = time_range.split('-')[0]
    time_to = time_range.split('-')[1]

    await state.update_data(change_delivery_date_time_from=time_from)
    await state.update_data(change_delivery_date_time_to=time_to) # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º time_to
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—é –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=cancel_keyboard) # cancel_keyboard already defined!
    await Form.change_delivery_date_comment.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
@dp.message_handler(state=Form.change_delivery_date_comment)
async def process_change_delivery_date_comment(message: types.Message, state: FSMContext):
    print('-------------------------------------------------------')
    comment = message.text
    print(comment)
    await state.update_data(change_delivery_date_comment=comment)

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ FSM
    data = await state.get_data()
    print(data)
    date = data['change_delivery_date_date']
    time_from = data['change_delivery_date_time_from']
    time_to = data['change_delivery_date_time_to']
    comment = data['change_delivery_date_comment']
    user_id = message.from_user.id


    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –≤ API –°–î–≠–ö
    await send_delivery_date_change_request(message, state, date, time_from, time_to, comment, user_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
@dp.callback_query_handler(lambda c: c.data == "cancel_change_date", state=Form.change_delivery_date_date)
async def cancel_change_date(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.send_message(callback_query.from_user.id, "–í–≤–æ–¥ –¥–∞—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
@dp.callback_query_handler(lambda c: c.data == "cancel_change_time", state=Form.change_delivery_date_time_from)
async def cancel_change_time(callback_query: types.CallbackQuery, state: FSMContext):
    await state.reset_state(with_data=False) # or state.finish()
    await bot.send_message(callback_query.from_user.id, "–í–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–º–µ–Ω–µ–Ω.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
@dp.callback_query_handler(lambda c: c.data == 'cancel', state=Form.change_delivery_date_comment)
async def cancel_comment(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.send_message(callback_query.from_user.id, "–í–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç–º–µ–Ω–µ–Ω.")





#–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API
async def send_delivery_date_change_request(message: types.Message, state: FSMContext, date, time_from, time_to, comment, user_id):
    import requests
    import json
    from info import get_token

    token = get_token(user_id)
    print(token)

    headers = {
        'Content-Type': 'application/json',
        'Authorization': f'Bearer {token}',
    }

    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()

    cursor.execute('SELECT order_info FROM new_orders WHERE user_id = ? ORDER BY id DESC LIMIT 1', (message.from_user.id,))
    order_info = cursor.fetchone()
    print(order_info)
    if order_info:
        order_info_str = order_info[0]
        try:
            order_info_dict = ast.literal_eval(order_info_str)
            order_uuid = order_info_dict['entity']['uuid']

            url = 'https://api.cdek.ru/v2/delivery' #–ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π URL API

            payload = json.dumps({
                "order_uuid": order_uuid,
                "date": date,
                "time_from": time_from,
                "time_to": time_to,
                "comment": comment
            })

            try:
                response = requests.post(url, headers=headers, data=payload)
                response.raise_for_status()  # Raises HTTPError for bad responses (4xx or 5xx)
                data = response.json()

                # –ü–æ–ª—É—á–∞–µ–º request_uuid
                request_uuid = data['requests'][0]['request_uuid']
                from aiogram.utils.markdown import text, bold, italic, link  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

                # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                success_message = text(
                    bold("‚úÖ –î–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!"),
                    "",  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
                    bold("–ù–æ–≤–∞—è –¥–∞—Ç–∞:"), date,
                    bold("–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:"), f"{time_from} - {time_to}",
                    bold("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:"), comment,
                    bold("UUID –∑–∞–ø—Ä–æ—Å–∞:"), request_uuid,  # –î–æ–±–∞–≤–ª—è–µ–º UUID –∑–∞–ø—Ä–æ—Å–∞
                    sep="\n"  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å—Ç—Ä–æ–∫
                )

                await message.answer(success_message, parse_mode="Markdown")  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å Markdown
                logging.info(f"–£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API: {data}")

            except requests.exceptions.HTTPError as e:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ HTTP
                await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
            except requests.exceptions.RequestException as e:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫, —Å–≤—è–∑–∞–Ω–Ω—ã—Ö —Å –∑–∞–ø—Ä–æ—Å–æ–º
                await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")

        except (ValueError, SyntaxError) as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ü–µ–Ω–∏—Ç—å order_info_str –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å: {e}")
            await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        finally:
            connection.close()
    else:
        await message.answer("–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ order_info")
    await state.finish()



























@dp.message_handler(commands='docs')
async def process_doc(callback_query: types.CallbackQuery):
    text = '''–ö–æ–º–∞–Ω–¥—ã Telegram –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –°–î–≠–ö:

/nomer
–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞ –°–î–≠–ö.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ API: GET /orders
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.
–ë–æ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ, —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –¥—Ä—É–≥–∏–µ –¥–µ—Ç–∞–ª–∏.

/im
–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ (–ò–ú).
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ API: GET /orders
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –ò–ú –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.
–ë–æ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –¥–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –ò–ú.

/sklad_dver (—Ä–∞–Ω–µ–µ /zaborgruz)
–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ —Å—Ö–µ–º–µ "–°–∫–ª–∞–¥-–¥–≤–µ—Ä—å".
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ API: POST /orders
–ë–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ (–∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è, –≤–µ—Å, –≥–∞–±–∞—Ä–∏—Ç—ã –∏ —Ç.–¥.).
–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ—Ç—Å—è –∑–∞–∫–∞–∑ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É —Å–æ —Å–∫–ª–∞–¥–∞ –°–î–≠–ö –¥–æ –¥–≤–µ—Ä–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è.

/zaborgruza
–ó–∞–∫–∞–∑ –∑–∞–±–æ—Ä–∞ –≥—Ä—É–∑–∞.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ API: POST /intakes
–ë–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–±–æ—Ä–∞ –≥—Ä—É–∑–∞, –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.
–°–æ–∑–¥–∞–µ—Ç—Å—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞ –∫—É—Ä—å–µ—Ä–æ–º –°–î–≠–ö.

/doc
–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).
–í –±—É–¥—É—â–µ–º –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–Ω–∞–∫–ª–∞–¥–Ω—ã–µ, –∞–∫—Ç—ã –∏ —Ç.–¥.).

/faq
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–∏—Å–µ.
–ù–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ API.
–í—ã–≤–æ–¥–∏—Ç —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∏—Ö.

/lists
–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —Ä–µ–≥–∏–æ–Ω–æ–≤, –æ—Ñ–∏—Å–æ–≤, –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥—ã API: GET /location/regions, GET /deliverypoints, GET /location/cities
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤, –æ—Ñ–∏—Å–æ–≤ –°–î–≠–ö –∏–ª–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤.

/dan_zakaz
–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –∑–∞–±–æ—Ä–∞ –≥—Ä—É–∑–∞.
–ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ API: POST /intakes –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
–ë–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–∏—á–Ω–æ–º –∑–∞–±–æ—Ä–µ –≥—Ä—É–∑–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ –≤ –±—É–¥—É—â–µ–º.

/zabor_konsalid
–ó–∞–±–æ—Ä –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥—Ä—É–∑–∞.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ API: POST /intakes —Å —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
–ë–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥—Ä—É–∑–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.

/info_delivery_problem
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–±–ª–µ–º–µ –¥–æ—Å—Ç–∞–≤–∫–∏.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ API: GET /orders/{order_uuid}/statuses
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–æ–º–µ—Ä –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞, –±–æ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –∏ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö.

/human_chat
–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.
–ù–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ API –°–î–≠–ö.
–°—Ç–∞–≤–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±—â–µ–Ω–∏–µ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏.

/end_chat
–ó–∞–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.
–ù–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ API –°–î–≠–ö.
–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ—Å—Å–∏—é –æ–±—â–µ–Ω–∏—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏.

/ypakovka
–ó–∞–∫–∞–∑ —É–ø–∞–∫–æ–≤–∫–∏ –°–î–≠–ö.
–ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ API: POST /orders —Å —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ —É–ø–∞–∫–æ–≤–∫–∏
–ë–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–¥—ã —É–ø–∞–∫–æ–≤–∫–∏ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–∫–∞–∑–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é.'''
    await bot.send_message(callback_query.from_user.id, text)









@dp.message_handler(lambda message: message.text == '/del')
async def process_zamena(message: types.Message):
    print("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã del –≤—ã–∑–≤–∞–Ω.")
    user = await check_user(message.from_user.id)
    if user:
        cursor.execute("DELETE FROM users WHERE id=?", (user[0],))
        conn.commit()
        await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.")

    else:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")


@dp.message_handler(Text(equals='/podderzhka'))
async def podderzhka(message: types.Message):
    support_links = {
        "Whatsapp": "https://api.whatsapp.com/send?phone=74993506695&text=%D0%9F%D0%BE%D0%B6%D0%B0%D0%BB%D1%83%D0%B9%D1%81%D1%82%D0%B0,%20%D0%BE%D1%82%D0%BF%D1%80%D0%B0%D0%B2%D1%8C%D1%82%D0%B5%20%D1%8D%D1%82%D0%BE%20%D1%81%D0%BE%D0%BE%D0%B1%D1%89%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%B8%D0%B7%20%D0%BF%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F%20WhatsApp%20%F0%9F%93%B2%20gR8EtNy5ngX281wJU8Msr",
        "–¢–µ–ª–µ–≥—Ä–∞–º": "https://t.me/edostavkabot?start=ZlhWWMLFNSpGbGQm4CrIZ",
        "–í–ö–æ–Ω—Ç–∞–∫—Ç–µ": "https://vk.com/write-142153191?ref=gJOzB7aTuWdPgbfA8rQHZ",
        "–í–∞–π–±–µ—Ä": "https://invite.viber.com/?g2=AQASBGNDxA4MbEyOd1G4WZ7oQDqr6Svy5w6hCG4ZV2MbLE7u70HHy8ilo7yV4uRz&lang=ru"
    }

    response = "–ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n" + "\n".join(
        [f"{platform}: {link}" for platform, link in support_links.items()])

    await message.answer(response)


@dp.message_handler(lambda message: message.text == '/ypakovka')
async def ypakovka(message: types.Message):

    await message.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

if __name__ == '__main__':
    import asyncio
    from aiogram import executor
    from aiohttp import web

    app = web.Application()
    app.router.add_post('/webapp-data', web_app_data_handler)

    loop = asyncio.get_event_loop()
    # loop.create_task(web._run_app(app, host='localhost', port=8080))

    executor.start_polling(dp, skip_updates=True)


# start - –í–•–û–î –í –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢
# nomer - –í–í–ï–î–ò–¢–ï –ù–û–ú–ï–† –ó–ê–ö–ê–ó–ê (–ù–ê–ö–õ–ê–î–ù–û–ô)
# im - –í–í–ï–î–ò–¢–ï –ù–û–ú–ï–† –ó–ê–ö–ê–ó–ê –ò–ù–¢–ï–†–ù–ï–¢-–ú–ê–ì–ê–ó–ò–ù–ê (–ò–ú)
# dan_zakaz - –°–û–ó–î–ê–ù–ò–ï –®–ê–ë–õ–û–ù–ê –£–°–õ–£–ì–ò "–ó–ê–ë–û–† –ì–†–£–ó–ê"
# zabor_konsalid - –ó–ê–ë–û–† –ö–û–ù–°–û–õ–ò–î–ò–†–û–í–ê–ù–ù–û–ì–û –ì–†–£–ó–ê
# ypakovka - –ú–ê–ì–ê–ó–ò–ù –£–ü–ê–ö–û–í–ö–ò
# human_chat - –û–ë–©–ï–ù–ò–ï –° –ü–û–î–î–ï–†–ñ–ö–û–ô
# end_chat - –ó–ê–ö–†–´–¢–¨ –ß–ê–¢ –° –ü–û–î–î–ï–†–ñ–ö–û–ô
# docs - –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ß–ê–¢-–ë–û–¢–£
# lists - –°–ü–ò–°–ö–ò –û–§–ò–°–û–í
# info_delivery_problem - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–±–ª–µ–º–µ –¥–æ—Å—Ç–∞–≤–∫–∏
# faq - FAQ
# del - –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞