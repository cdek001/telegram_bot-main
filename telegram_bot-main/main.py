# aiogram   2.23.1
import sqlite3
import os
import json
from datetime import timedelta, datetime
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import InputMediaPhoto
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram import types
from aiogram.types import WebAppInfo, ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher.filters import Text
from aiogram.types import Message
from aiohttp.web import Request, json_response
import logging
from aiogram.dispatcher.filters import Command
from aiogram.utils.markdown import escape_md
from aiogram.utils.markdown import code
from aiogram.utils.exceptions import TelegramAPIError
# 10006324754 —Å–∫–ª–∞–¥-–¥–≤–µ—Ä—å
# 10007168378 –¥–æ –ø–≤–∑
# lYV0wvt14fYGgE7MoWosaIyvOavEqqUm
# 2ABI0GEJN5giKtlgHh2ZZ1rCsz2iWoHZ
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è



logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    filename='bot_log.log')

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è aiogram
logger = logging.getLogger('aiogram')

console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
console_handler.setFormatter(console_formatter)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫ –ª–æ–≥–≥–µ—Ä—É aiogram
logger.addHandler(console_handler)

# Initialize bot and dispatcher   7020285176:AAEr9NQt7m3pljwWAMfYANb1EjdMeQKmgVQ
# –¥–ª—è —Ç–µ—Å—Ç–∞ 7207186878:AAGGEFlLavEBD0GXGTvRIgQZ7SLwHzlDHz8
bot = Bot(token="7351691962:AAGASpTq7J-uif9R7p0bphxbqs8gmx7oPP4")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

# Database setup

conn = sqlite3.connect('users.db')    #–¥–ª—è –¥–µ–ø–ª–æ—è –¥–æ–∫–µ—Ä–∞

# conn = sqlite3.connect('users.db')
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                  id INTEGER PRIMARY KEY AUTOINCREMENT, 
                  user_id INTEGER UNIQUE, 
                  username TEXT, 
                  password TEXT)''')  # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã

cursor.execute('''CREATE TABLE IF NOT EXISTS new_orders
                  (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, cdek_number TEXT, order_info TEXT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –∏ –∏—Ö –∑–∞–∫–∞–∑–∞—Ö
cursor.execute('''CREATE TABLE IF NOT EXISTS user_zakaz (
                  id INTEGER PRIMARY KEY AUTOINCREMENT, 
                  user_id INTEGER, 
                  weight INTEGER, 
                  name TEXT, 
                  comment TEXT, 
                  phone_number TEXT, 
                  city TEXT, 
                  address TEXT, 
                  created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                  FOREIGN KEY (user_id) REFERENCES new_orders(user_id))''')

class Form(StatesGroup):
    login = State()
    password = State()
    order_number = State()
    order_number2 = State()
    order_number3 = State()
    fio = State()
    tel = State()
    adr = State()
    pwz = State()
    cit = State()
    inpzt = State()
    npdc = State()
    dubl = State()
    call_request = State()
    kurier = State()
    address = State()
    konsalid = State()
    date = State()
    time = State()


async def check_user(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    result = cursor.fetchone()
    conn.close()
    return result


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ user_id
def check_user_id_exists(user_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT COUNT(*) FROM users WHERE user_id = ?', (user_id,))
    count = cursor.fetchone()[0]
    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    conn.close()
    return count > 0

@dp.message_handler(commands='start')
async def start(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = InlineKeyboardMarkup(row_width=1)

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏
    keyboard.add(
        # InlineKeyboardButton("üîë –í–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="register_1"),
        InlineKeyboardButton("üìù –ó–∞–∫–ª—é—á–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä", callback_data="register_ek5"),
        InlineKeyboardButton("‚úÖ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –∫ –õ–ö", callback_data="register_1"),
        InlineKeyboardButton("üì¶ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å—ã–ª–∫–∏", callback_data="otsl"),
        InlineKeyboardButton("–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è", callback_data="docs")
    )

    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç –°–î–≠–ö!\n\n"
        "üöö –ú—ã —Ä–∞–¥—ã –ø–æ–º–æ—á—å –≤–∞–º —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π. –í–æ—Ç —á—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å:\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É 'üì¶ –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø–æ—Å—ã–ª–∫–∏' –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –æ—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ—Å—ã–ª–∫—É.\n"
        "–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
        # "1Ô∏è‚É£2Ô∏è Ô∏è‚É£  Ô∏è‚É£ 3Ô∏è‚É£ –£–∂–µ –µ—Å—Ç—å –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –Ω–∞ —Å–∞–π—Ç–µ –°–¥–µ–∫? –ù–∞–∂–º–∏—Ç–µ 'üîë –í–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç'.\n"
        "1Ô∏è‚É£ –ù–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç? –ù–∞–∂–º–∏—Ç–µ 'üìù –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç–µ –°–î–≠–ö'.\n"
        "2Ô∏è‚É£ –ï—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç, –Ω–æ –±–æ—Ç –µ—â–µ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω? –ù–∞–∂–º–∏—Ç–µ '‚úÖ –ü–æ–¥–∫–ª—é—á–∏—Ç—å –±–æ—Ç–∞ –∫ –õ–ö'.\n\n"
        "–¢–∞–∫ –∂–µ –≤—ã –º–æ–∂–µ—Ç–µ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ –≤—Å–µ–º —Ñ—É–≥–∫—Ü–∏–æ–Ω–∞–ª–æ–º –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è'"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∏ –¥–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω–µ–º! üòä",
        # "–í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –º–æ–≥—É—Ç –∫–ª–∏–µ–Ω—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏ –°–î–≠–ö. "
        #  "–ß—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –í—Ö–æ–¥ –≤ –õ–ö, –µ—Å–ª–∏ –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, —Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ–Ω–µ –Ω–∞ —Å–∞–π—Ç–µ —Å–¥–µ–∫, "
        # "–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤ cdek, –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è. "
        # "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )


# @dp.callback_query_handler(lambda c: c.data == 'register_1')
# async def cmd_register(callback_query: types.CallbackQuery):
#     user = await check_user(callback_query.from_user.id)
#     if user:
#         await bot.send_message(callback_query.from_user.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã –≤–æ—à–ª–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.")
#     else:
#         await bot.send_message(callback_query.from_user.id,
#                                "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'.")
#         keyboard = InlineKeyboardMarkup()
#         registration_button = InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register")
#         keyboard.add(registration_button)
#         await bot.send_message(callback_query.from_user.id, "–ù–∞–∂–º–∏—Ç–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", reply_markup=keyboard)
#
#     await callback_query.answer()
@dp.callback_query_handler(lambda c: c.data == 'register_1')
async def cmd_register(callback_query: types.CallbackQuery):
    user = await check_user(callback_query.from_user.id)
    if user:
        await bot.send_message(callback_query.from_user.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –í—ã –≤–æ—à–ª–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.")
    else:
        # –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ –≤ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ
        video_path = os.path.join(os.getcwd(), 'video (video-converter.com).mp4')  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
        with open(video_path, 'rb') as video:
            await bot.send_video(callback_query.from_user.id, video,
                                 caption="–í–∏–¥–µ–æ: –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫–∞–∑–∞–Ω—ã –≤ –≤–∏–¥–µ–æ.")
        await bot.send_message(callback_query.from_user.id,
                               "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'.")

        keyboard = InlineKeyboardMarkup()
        registration_button = InlineKeyboardButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register")
        keyboard.add(registration_button)
        await bot.send_message(callback_query.from_user.id, "–ù–∞–∂–º–∏—Ç–µ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:", reply_markup=keyboard)





    await callback_query.answer()




@dp.callback_query_handler(lambda c: c.data =='register')
async def cmd_start(callback_query: types.CallbackQuery):  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ callback_query
    user = await check_user(callback_query.from_user.id)  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ callback_query –æ—Ç –∫–æ–ª–±—ç–∫–∞
    if user:
        await bot.send_message(callback_query.from_user.id, f"–ü—Ä–∏–≤–µ—Ç, {user[2]}! –í—ã –≤–æ—à–ª–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.")  # –û—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ bot
    else:
        await bot.send_message(callback_query.from_user.id, "–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–∞—à–µ–≥–æ –∫–ª—é—á–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.")  # –û—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ bot
        await Form.login.set()

@dp.message_handler(state=Form.login)
async def process_login(message: types.Message, state: FSMContext):
    login = message.text
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤
    if 32 <= len(login):  # –ù–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç 1 –¥–æ 32 —Å–∏–º–≤–æ–ª–æ–≤
        await state.update_data(login=login)
        await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ü–∞—Ä–æ–ª—å –∫–ª—é—á–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.")
        await Form.password.set()
    else:
        await message.answer("–õ–æ–≥–∏–Ω –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å 32 —Å–∏–º–≤–æ–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å –æ–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –ª–æ–≥–∏–Ω–∞
        await state.finish()
# @dp.message_handler(state=Form.login)
# async def process_login(message: types.Message, state: FSMContext):
#     await state.update_data(login=message.text)
#     await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å.")
#     await Form.password.set()




@dp.message_handler(lambda message: message.text =='/main')
async def cmd_start1(message: types.Message, state: FSMContext):
    user = await check_user(message.from_user.id)

    if user:
        # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        keyboard = InlineKeyboardMarkup()
        # keyboard.row(InlineKeyboardButton("–í–Ω–µ—Å–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∑–∞–∫–∞–∑", callback_data='change_order'))
        # keyboard.row(InlineKeyboardButton("–û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='track_order'))
        keyboard.row(InlineKeyboardButton("–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (–Ω–∞–∫–ª–∞–¥–Ω–æ–π) üìù", callback_data='enter_waybill'))
        keyboard.row(InlineKeyboardButton("–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ üõçÔ∏è", callback_data='enter_webshop_order'))
        # keyboard.row(InlineKeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å üí∏", callback_data='calculate_cost'))
        keyboard.row(InlineKeyboardButton("–ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—ã–ª–∫–∏ üì¶",
                                          web_app=WebAppInfo(url='https://mobile.cdek.ru/packageto')))
        keyboard.row(InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å –∫—É—Ä—å–µ—Ä–∞ (–ó–∞–±–æ—Ä –≥—Ä—É–∑–∞) üö™", callback_data='/zaborgruz'))
        keyboard.row(
            InlineKeyboardButton("–°–ø–∏—Å–∫–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤/–æ—Ñ–∏—Å–æ–≤/–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ üìç", callback_data='/lists'))
        keyboard.row(InlineKeyboardButton("–ü—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é –µ—Å–ª–∏ —É –≤–∞—Å –¥–≤–µ—Ä—å-—Å–∫–ª–∞–¥ üìù",
                                          callback_data='duplicate_waybill'))

        await message.answer("–í–∞—à–µ –º–µ–Ω—é –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü:", reply_markup=keyboard)
    else:
        await message.answer("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")





# @dp.message_handler(commands='start')
# async def start(message: types.Message):
#     await message.answer(
#         "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–∞—Ç –±–æ—Ç–µ CDEC. –í–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –º–æ–≥—É—Ç –∫–ª–∏–µ–Ω—Ç—ã –∫–æ–º–ø–∞–Ω–∏–∏ –°–î–≠–ö. "
#         "–ß—Ç–æ–±—ã –ø–æ–ø–∞—Å—Ç—å –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É /register, –µ—Å–ª–∏ –≤—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, —Ç–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å, "
#         "–Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É /register_ek5, –ø–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –∏ –ø–∞—Ä–æ–ª—å, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É /register",
#     )




@dp.callback_query_handler(lambda c: c.data == 'register_ek5')
async def process_register_ek5(callback_query: types.CallbackQuery):
    await bot.send_message(callback_query.from_user.id, "–°–∞–π—Ç –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ ek5: https://cdek.ru.net/registration/ –≤—ã —Ç–∞–∫ –∂–µ –º–æ–∂–µ—Ç–µ –Ω–∞–∂–∞—Ç—å /faq —á—Ç–æ –±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è –∫–∞–∫ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.")

@dp.callback_query_handler(lambda c: c.data == 'docs')
async def process_doc(callback_query: types.CallbackQuery):
    text = '''–ö–æ–º–∞–Ω–¥—ã Telegram –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –°–î–≠–ö:

/nomer
–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞ –°–î–≠–ö.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ API: GET /orders
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.
–ë–æ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ, —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –¥—Ä—É–≥–∏–µ –¥–µ—Ç–∞–ª–∏.

/im
–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ (–ò–ú).
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ API: GET /orders
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –ò–ú –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.
–ë–æ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –¥–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –ò–ú.

/sklad_dver (—Ä–∞–Ω–µ–µ /zaborgruz)
–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ —Å—Ö–µ–º–µ "–°–∫–ª–∞–¥-–¥–≤–µ—Ä—å".
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ API: POST /orders
–ë–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ (–∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è, –≤–µ—Å, –≥–∞–±–∞—Ä–∏—Ç—ã –∏ —Ç.–¥.).
–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ—Ç—Å—è –∑–∞–∫–∞–∑ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É —Å–æ —Å–∫–ª–∞–¥–∞ –°–î–≠–ö –¥–æ –¥–≤–µ—Ä–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è.

/zaborgruza
–ó–∞–∫–∞–∑ –∑–∞–±–æ—Ä–∞ –≥—Ä—É–∑–∞.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ API: POST /intakes
–ë–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–±–æ—Ä–∞ –≥—Ä—É–∑–∞, –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.
–°–æ–∑–¥–∞–µ—Ç—Å—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞ –∫—É—Ä—å–µ—Ä–æ–º –°–î–≠–ö.

/doc
–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).
–í –±—É–¥—É—â–µ–º –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–Ω–∞–∫–ª–∞–¥–Ω—ã–µ, –∞–∫—Ç—ã –∏ —Ç.–¥.).

/faq
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–∏—Å–µ.
–ù–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ API.
–í—ã–≤–æ–¥–∏—Ç —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∏—Ö.

/lists
–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —Ä–µ–≥–∏–æ–Ω–æ–≤, –æ—Ñ–∏—Å–æ–≤, –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥—ã API: GET /location/regions, GET /deliverypoints, GET /location/cities
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤, –æ—Ñ–∏—Å–æ–≤ –°–î–≠–ö –∏–ª–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤.

/dan_zakaz
–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –∑–∞–±–æ—Ä–∞ –≥—Ä—É–∑–∞.
–ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ API: POST /intakes –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
–ë–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–∏—á–Ω–æ–º –∑–∞–±–æ—Ä–µ –≥—Ä—É–∑–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ –≤ –±—É–¥—É—â–µ–º.

/zabor_konsalid
–ó–∞–±–æ—Ä –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥—Ä—É–∑–∞.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ API: POST /intakes —Å —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
–ë–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥—Ä—É–∑–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.

/info_delivery_problem
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–±–ª–µ–º–µ –¥–æ—Å—Ç–∞–≤–∫–∏.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ API: GET /orders/{order_uuid}/statuses
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–æ–º–µ—Ä –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞, –±–æ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –∏ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö.

/human_chat
–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.
–ù–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ API –°–î–≠–ö.
–°—Ç–∞–≤–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±—â–µ–Ω–∏–µ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏.

/end_chat
–ó–∞–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.
–ù–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ API –°–î–≠–ö.
–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ—Å—Å–∏—é –æ–±—â–µ–Ω–∏—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏.

/ypakovka
–ó–∞–∫–∞–∑ —É–ø–∞–∫–æ–≤–∫–∏ –°–î–≠–ö.
–ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ API: POST /orders —Å —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ —É–ø–∞–∫–æ–≤–∫–∏
–ë–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–¥—ã —É–ø–∞–∫–æ–≤–∫–∏ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–∫–∞–∑–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é.'''
    await bot.send_message(callback_query.from_user.id, text)
@dp.callback_query_handler(lambda c: c.data == 'otsl')
async def process_register_ek5(callback_query: types.CallbackQuery):
    from ots_luboy_posilki import ots_l_p

    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Å—ã–ª–∫–∏:")

    @dp.message_handler(lambda message: message.from_user.id == callback_query.from_user.id)
    async def handle_package_number(message: types.Message):
        package_number = message.text
        response = ots_l_p(package_number)  # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å—ã–ª–∫–µ
        try:
            if response:
                order = response['result']['order']
                pwz = response['result']['updateInfo']['possibleDeliveryMode']
                sender = order['sender']
                receiver = order['receiver']
                sender_name_parts = sender['name'].split()
                sender_initials = ' '.join(
                    [part[0] for part in sender_name_parts if part[0].isalpha()]) + '.' if sender_name_parts else ''

                # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏
                delivery_modes = {
                    "1": "–¥–≤–µ—Ä—å-–¥–≤–µ—Ä—å",
                    "2": "–¥–≤–µ—Ä—å-—Å–∫–ª–∞–¥",
                    "3": "—Å–∫–ª–∞–¥-–¥–≤–µ—Ä—å",
                    "4": "—Å–∫–ª–∞–¥-—Å–∫–ª–∞–¥",
                    "5": "—Ç–µ—Ä–º–∏–Ω–∞–ª-—Ç–µ—Ä–º–∏–Ω–∞–ª",
                    "6": "–¥–≤–µ—Ä—å-–ø–æ—Å—Ç–∞–º–∞—Ç",
                    "7": "—Å–∫–ª–∞–¥-–ø–æ—Å—Ç–∞–º–∞—Ç",
                }
                delivery_mode = delivery_modes.get(order['trueDeliveryMode'], "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏")

                message_text = (
                    "üì¶ *–î–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—ã–ª–∫–µ:*\n\n"
                    f"üÜî *–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:* ` {order['number']} `\n"
                    f"üì¶ *–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç:* {order['packagesCount']}\n"
                    f"üìÖ *–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è:* {order['creationTimestamp'][:10]}\n"
                    f"‚öñÔ∏è *–†–∞—Å—á–µ—Ç–Ω—ã–π –≤–µ—Å:* {order['weight']} –∫–≥\n"
                    f"üöõ *–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:* {delivery_mode}\n\n"

                    "üë§ *–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:*\n"
                    f"  *–ò–º—è:* {sender_initials}\n"
                    f"  üèôÔ∏è *–ì–æ—Ä–æ–¥:* {sender['address']['city']['name']}\n\n"

                    "üì¨ *–ü–æ–ª—É—á–∞—Ç–µ–ª—å:*\n"
                    f"  *–ò–Ω–∏—Ü–∏–∞–ª—ã:* {receiver['initials']}\n"
                )

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—Ñ–∏—Å–∞
                if 'office' in receiver['address']:
                    office = receiver['address']['office']
                    message_text += (
                        f"  üè¢ *–ê–¥—Ä–µ—Å {office['type']}:* {receiver['address']['title']}, {receiver['address']['city']['name']}\n"
                        f"  *–û—Ñ–∏—Å:* {office['type']}\n"
                        f"  *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {office['comment']}\n"
                        f"  *–ü–æ –≤–æ–ø—Ä–æ—Å–∞–º –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–≤–æ–Ω–∏—Ç–µ:* {office['phones'][0]['number']}\n\n"
                    )

                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–∞–±–æ—Ç—ã
                    message_text += "üìÖ *–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:*\n"
                    for schedule in office['schedule']:
                        days = f"{schedule['startDay'][:3]} - {schedule['endDay'][:3]}" if schedule['startDay'] != \
                                                                                           schedule['endDay'] else \
                        schedule['startDay'][:3]
                        working_hours = f"{schedule['startTime'][:5]} - {schedule['endTime'][:5]}"
                        message_text += f"  ‚Ä¢ *{days}:* {working_hours}\n"

                message_text += "üìä *–°—Ç–∞—Ç—É—Å—ã –¥–æ—Å—Ç–∞–≤–∫–∏:*\n"

                for status in response['result']['statuses']:
                    city_info = f" {status['currentCity']['name']}" if 'currentCity' in status else ''
                    message_text += f"  üîÑ *{status['name']}*{city_info}  {status['timestamp'][:10]}\n"

                message_text += "\n"

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∫–ª–∞–¥–µ
                if order['trueDeliveryMode'] not in ["1", "3"]:  # –ï—Å–ª–∏ –Ω–µ –¥–≤–µ—Ä-–¥–≤–µ—Ä—å –∏ –Ω–µ —Å–∫–ª–∞–¥-–¥–≤–µ—Ä—å
                    if 'warehouse' in response['result']:
                        warehouse = response['result']['warehouse']
                        planned_end_date = warehouse.get('acceptance', {}).get('plannedEndDate', '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ')

                        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –æ —Ö—Ä–∞–Ω–µ–Ω–∏–∏
                        if 'storage' in warehouse and 'days' in warehouse['storage']:
                            storage_days =f"{warehouse['storage']['days']} –¥–Ω–µ–π"
                        else:
                            storage_days = '–Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ'  # –£–∫–∞–∑—ã–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç

                        message_text += (
                            f"  üìÜ *–ü–ª–∞–Ω–∏—Ä—É–µ–º–∞—è –¥–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –ø—É–Ω–∫—Ç –≤—ã–¥–∞—á–∏:* {planned_end_date}\n"
                            f"  üóÑÔ∏è *–•—Ä–∞–Ω–µ–Ω–∏–µ:* {storage_days}\n"
                        )
                else:
                    message_text += ""


                def inline_keyboard():
                    keyboard = types.InlineKeyboardMarkup()
                    button = types.InlineKeyboardButton(text="–û—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ—Å—ã–ª–∫—É", callback_data='otsl')
                    keyboard.add(button)
                    return keyboard

                await message.answer(message_text,
                                    reply_markup=inline_keyboard())

            else:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—ã–ª–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except Exception as e:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            print(f"–û—à–∏–±–∫–∞: {e}")  # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏





@dp.message_handler(lambda message: message.text == 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç')
async def process_zamena(message: types.Message):
    print("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã del –≤—ã–∑–≤–∞–Ω.")
    user = await check_user(message.from_user.id)
    if user:
        cursor.execute("DELETE FROM users WHERE id=?", (user[0],))
        conn.commit()
        await message.answer("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω.")
        await Form.login.set()
    else:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        await Form.login.set()

@dp.message_handler(state=Form.password)
async def process_password(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    login = user_data['login']
    password = message.text
    print(login, password)
    import requests
    import time

    def get_new_token(account, secure_password):
        auth_data = {
            'grant_type': 'client_credentials',
            'client_id': account,
            'client_secret': secure_password
        }
        headers = {
            'Content-Type': 'application/x-www-form-urlencoded'
        }
        auth_url = 'https://api.cdek.ru/v2/oauth/token?parameters'
        response = requests.post(auth_url, data=auth_data, headers=headers)
        if response.status_code == 200:
            token_info = response.json()
            print(token_info)
            return token_info
        else:
            print('–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', response.json())
            return '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏'


    tok = get_new_token(login, password)

    if tok == "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏":
        await message.answer(f"–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–ª–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö!")
        await state.finish()
    else:
        cursor.execute("INSERT INTO users (user_id, username, password) VALUES (?, ?, ?)",
                       (message.from_user.id, login, password))
        conn.commit()

        await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")
        await state.finish()

@dp.message_handler(lambda message: message.text == '/faq')
async def process_zamena(message: types.Message):
    from aiogram.types import InputMediaVideo
    # –ü—É—Ç—å –∫ –≤–∏–¥–µ–æ –≤ –≤–∞—à–µ–º –ø—Ä–æ–µ–∫—Ç–µ
    video_path = os.path.join(os.getcwd(), 'video.mp4')  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≤–∞—à–µ–≥–æ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ –∏ —Ç–µ–∫—Å—Ç–∞
    with open(video_path, 'rb') as video:
        media = InputMediaVideo(media=video, caption="–í–∏–¥–µ–æ: –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫–∞–∑–∞–Ω—ã –≤ –≤–∏–¥–µ–æ.")
        await message.answer_media_group([media])  # –ü–∞–∫–µ—Ç–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º send_video



# Define states for human operator chat
class HumanChatStates(StatesGroup):
    WAITING_FOR_OPERATOR = State()
    CHATTING_WITH_OPERATOR = State()


# List to store user IDs waiting for an operator
users_waiting_for_operator = []

# Dictionary to store active chats between users and operators
active_chats = {}










# @dp.message_handler(Command("human_chat"))
# async def request_human_chat(message: types.Message):
#     user_id = message.from_user.id
#     user_name = message.from_user.full_name
#     if user_id in active_chats:
#         await message.answer(f"{user_name}, –≤—ã –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã –Ω–∞ –æ–±—â–µ–Ω–∏–µ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º. –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –§–ò–û –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é. –ë–ª–∏–∂–∞–π—à–∏–π –æ–ø–µ—Ä–∞—Ç–æ—Ä –≤–∞–º –æ—Ç–≤–µ—Ç–∏—Ç. –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /end_chat")
#     elif user_id in users_waiting_for_operator:
#         await message.answer(f"{user_name}, –≤—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –∫ —á–µ–ª–æ–≤–µ–∫—É-–æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
#     else:
#         users_waiting_for_operator.append(user_id)
#         await message.answer(f"{user_name}, –≤–∞—Å –¥–æ–±–∞–≤–∏–ª–∏ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞-—á–µ–ª–æ–≤–µ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –ú—ã —É–≤–µ–¥–æ–º–∏–º –≤–∞—Å, –∫–æ–≥–¥–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å —á–∞—Ç.")
#         await notify_operators(user_id, user_name)
#
# @dp.callback_query_handler(lambda c: c.data.startswith('accept_chat:'))
# async def operator_accept_chat(callback_query: types.CallbackQuery):
#     operator_id = callback_query.from_user.id
#     operator_name = callback_query.from_user.full_name
#     user_id = int(callback_query.data.split(':')[1])
#     user = await bot.get_chat(user_id)
#     user_name = user.full_name
#
#     if user_id in users_waiting_for_operator:
#         users_waiting_for_operator.remove(user_id)
#         active_chats[user_id] = operator_id
#         await bot.send_message(user_id, f"{user_name}, –∫ —á–∞—Ç—É –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä. –ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–µ –§–ò–û –∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é. –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /end_chat")
#         await bot.send_message(operator_id, f"{operator_name}, —Å–µ–π—á–∞—Å –≤—ã –æ–±—â–∞–µ—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_name}. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /end_chat, —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–∞–∑–≥–æ–≤–æ—Ä.")
#         await bot.answer_callback_query(callback_query.id, "–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª–∏—Å—å –∫ —á–∞—Ç—É.")
#     else:
#         await bot.answer_callback_query(callback_query.id, "–≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ –∂–¥–µ—Ç —á–∞—Ç–∞.")
#
# async def notify_operators(user_id, user_name):
#     operator_chat_ids = [1252672778]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
#     for operator_id in operator_chat_ids:
#         try:
#             keyboard = InlineKeyboardMarkup().add(
#                 InlineKeyboardButton("–ü—Ä–∏–Ω—è—Ç—å —á–∞—Ç", callback_data=f"accept_chat:{user_id}")
#             )
#             await bot.send_message(
#                 operator_id,
#                 f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID: {user_id}) –∂–¥–µ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π –ø–æ–º–æ—â–∏. –ü—Ä–∏–Ω—è—Ç—å —á–∞—Ç?",
#                 reply_markup=keyboard
#             )
#         except TelegramAPIError:
#             logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ {operator_id}")
#
# @dp.message_handler(
#     lambda message: message.from_user.id in active_chats.keys() or message.from_user.id in active_chats.values())
# async def handle_human_chat_message(message: types.Message):
#     user_id = message.from_user.id
#     user_name = message.from_user.full_name
#     if user_id in active_chats:
#         operator_id = active_chats[user_id]
#         await bot.send_message(operator_id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name}: {message.text}")
#     else:
#         user_id = next(user for user, operator in active_chats.items() if operator == user_id)
#         user = await bot.get_chat(user_id)
#         await bot.send_message(user_id, f"–û–ø–µ—Ä–∞—Ç–æ—Ä {user_name}: {message.text}")
#
# @dp.message_handler(Command("end_chat"))
# async def end_human_chat(message: types.Message):
#     user_id = message.from_user.id
#     user_name = message.from_user.full_name
#     if user_id in active_chats:
#         operator_id = active_chats[user_id]
#         operator = await bot.get_chat(operator_id)
#         operator_name = operator.full_name
#         del active_chats[user_id]
#         await message.answer(f"{user_name}, —á–∞—Ç —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω.")
#         await bot.send_message(operator_id, f"{operator_name}, —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_name} –∑–∞–≤–µ—Ä—à–µ–Ω.")
#     elif user_id in active_chats.values():
#         user_id = next(user for user, operator in active_chats.items() if operator == user_id)
#         user = await bot.get_chat(user_id)
#         user_name = user.full_name
#         del active_chats[user_id]
#         await message.answer(f"{user_name}, —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_name} –∑–∞–≤–µ—Ä—à–µ–Ω.")
#         await bot.send_message(user_id, f"{user_name}, —á–∞—Ç —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω.")
#     else:
#         await message.answer(f"{user_name}, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —á–∞—Ç–µ —Å –∂–∏–≤—ã–º –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º.")
#
# @dp.callback_query_handler(lambda c: c.data == 'request_human_chat')
# async def process_human_chat_request(callback_query: types.CallbackQuery):
#     await bot.answer_callback_query(callback_query.id)
#     await request_human_chat(callback_query.message)







users_waiting_for_operator = []
operator_chat_id = 1252672778  # ID —á–∞—Ç–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞

@dp.message_handler(Command("human_chat"))
async def request_human_chat(message: types.Message):
    user_id_to_check = message.from_user.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è

    if check_user_id_exists(user_id_to_check):
        user_id = message.from_user.id
        user_name = message.from_user.full_name
        if user_id in users_waiting_for_operator:
            await message.answer(f"{user_name}, –≤—ã —É–∂–µ –≤ –æ—á–µ—Ä–µ–¥–∏ –∫ —á–µ–ª–æ–≤–µ–∫—É-–æ–ø–µ—Ä–∞—Ç–æ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
        else:
            users_waiting_for_operator.append(user_id)
            await message.answer(
                f"{user_name}, –≤–∞—Å –¥–æ–±–∞–≤–∏–ª–∏ –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞-—á–µ–ª–æ–≤–µ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ. –û–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é.")
            await notify_operator(user_id, user_name)
    else:
        print(f'–î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚ùå')
        await message.answer(f"–î–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–æ–≥–æ–≤–æ—Ä–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º –∫–æ–º–ø–∞–Ω–∏–∏ –°–î–≠–ö. –ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏–ª–∏ –∑–∞–∫–ª—é—á–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä —Å –≥—Ä—É–ø–ø–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –°–î–≠–ö. –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚ùå")



async def notify_operator(user_id, user_name):
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("–ù–∞—á–∞—Ç—å —á–∞—Ç", url=f"tg://user?id={user_id}")
    )
    try:
        await bot.send_message(
            operator_chat_id,
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_name} (ID: {user_id}) –∂–¥–µ—Ç —á–µ–ª–æ–≤–µ—á–µ—Å–∫–æ–π –ø–æ–º–æ—â–∏. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —á–∞—Ç –Ω–∞–ø—Ä—è–º—É—é.",
            reply_markup=keyboard
        )
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞: {e}")

@dp.message_handler(Command("end_chat"))
async def end_wait(message: types.Message):
    user_id = message.from_user.id
    if user_id in users_waiting_for_operator:
        users_waiting_for_operator.remove(user_id)
        await message.answer("–í—ã –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")
    else:
        await message.answer("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞, —á—Ç–æ–±—ã –æ—Ç–º–µ—Ç–∏—Ç—å, —á—Ç–æ —á–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω
@dp.message_handler(Command("mark_completed"))
async def mark_chat_completed(message: types.Message):
    if message.from_user.id == operator_chat_id:
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä —É–∫–∞–∑—ã–≤–∞–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        try:
            user_id = int(message.get_args())
            if user_id in users_waiting_for_operator:
                users_waiting_for_operator.remove(user_id)
                await message.answer(f"–ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (ID: {user_id}) –æ—Ç–º–µ—á–µ–Ω –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–π.")
            else:
                await message.answer("–£–∫–∞–∑–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ—á–µ—Ä–µ–¥–∏ –æ–∂–∏–¥–∞–Ω–∏—è.")
        except ValueError:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.")
    else:
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤.")







# –∑–¥–µ—Å—å –±—ã–ª –∫–æ–¥ –∏–∑ proces.py
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /dan_zakaz
@dp.message_handler(commands=['dan_zakaz'])
async def cmd_dan_zakaz(message: types.Message):
    # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_id_to_check = message.from_user.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è

    if check_user_id_exists(user_id_to_check):
        await message.reply(
            "–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –≤–µ—Å –≤ –∫–≥ (5), –§–ò–û (–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á), –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π (–≤–≤–æ–¥ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏—è –±–µ–∑ –∑–∞–ø—è—Ç—ã—Ö), –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (7XXXXXXXXXX), –≥–æ—Ä–æ–¥ (–ú–æ—Å–∫–≤–∞), —É–ª–∏—Ü–∞ (—É–ª–∏—Ü–∞ –∫–æ—Å–º–∏—á–µ—Å–∫–∞—è 75)")
        await Form.address.set()
    else:
        print(f'–î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚ùå')
        await message.answer(f"–î–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–æ–≥–æ–≤–æ—Ä–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º –∫–æ–º–ø–∞–Ω–∏–∏ –°–î–≠–ö. –ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏–ª–∏ –∑–∞–∫–ª—é—á–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä —Å –≥—Ä—É–ø–ø–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –°–î–≠–ö. –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚ùå")
@dp.message_handler(state=Form.address)
async def process_address(message: types.Message, state: FSMContext):
    await state.update_data(address=message.text)
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_id = message.from_user.id
    data = message.text.split(',')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–ø—è—Ç—É—é –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª–∏ –¥–∞–Ω–Ω—ã—Ö
    if len(data) < 6:
        await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–µ–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")
        return

    weight = data[0].strip()+"000" # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã
    name = data[1].strip()  # –§–∞–º–∏–ª–∏—è –ò–º—è
    comment = data[2].strip()
    phone_number = data[3].strip()
    city = data[4].strip()
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–ª–æ–≤–∞ –≤ –∞–¥—Ä–µ—Å
    address = data[5].strip()  # –í—Å–µ —Å–ª–æ–≤–∞ –ø–æ—Å–ª–µ –≥–æ—Ä–æ–¥–∞

    # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–∞–±–ª–∏—Ü—É user_zakaz
    cursor.execute('''INSERT INTO user_zakaz (user_id, weight, name, comment, phone_number, city, address) 
                          VALUES (?, ?, ?, ?, ?, ?, ?)''',
                   (user_id, weight, name, comment, phone_number, city, address))
    conn.commit()

    await message.reply("–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! üéâ")
    # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.finish()

cancel_button = InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")
cancel_keyboard = InlineKeyboardMarkup().add(cancel_button)


def get_date_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=1)
    today = datetime.now()
    for i in range(1, 6):  # Next 5 days
        date = today + timedelta(days=i)
        date_str = date.strftime("%Y-%m-%d")
        keyboard.add(InlineKeyboardButton(date_str, callback_data=f"date_{date_str}"))
    return keyboard


def get_time_keyboard():
    keyboard = InlineKeyboardMarkup(row_width=1)
    for hour in range(10, 14):  # From 10 to 13
        time_str = f"{hour:02d}:00"
        keyboard.add(InlineKeyboardButton(time_str, callback_data=f"time_{time_str}"))
    return keyboard


@dp.message_handler(commands=['zabor_konsalid'])
async def zabor_konsalid(message: types.Message):
    user_id_to_check = message.from_user.id
    if check_user_id_exists(user_id_to_check):
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", reply_markup=get_date_keyboard())
        await Form.date.set()
    else:
        await message.answer(f"–î–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–æ–≥–æ–≤–æ—Ä–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º –∫–æ–º–ø–∞–Ω–∏–∏ –°–î–≠–ö. –ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏–ª–∏ –∑–∞–∫–ª—é—á–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä —Å –≥—Ä—É–ø–ø–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –°–î–≠–ö. –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚ùå")


@dp.callback_query_handler(lambda c: c.data.startswith('date_'), state=Form.date)
async def process_date(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    selected_date = callback_query.data.split('_')[1]
    await state.update_data(date=selected_date)
    await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞:", reply_markup=get_time_keyboard())
    await Form.time.set()


@dp.callback_query_handler(lambda c: c.data.startswith('time_'), state=Form.time)
async def process_time(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.answer_callback_query(callback_query.id)
    selected_time = callback_query.data.split('_')[1]
    data = await state.get_data()
    selected_date = data['date']

    # Assume the duration is 5 hours
    start_time = datetime.strptime(selected_time, "%H:%M")
    end_time = (start_time + timedelta(hours=5)).strftime("%H:%M")

    full_data = f"{selected_date} {selected_time} {end_time}"
    await state.update_data(konsalid=full_data)
    print("------")
    await bot.send_message(
        callback_query.from_user.id,
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ: {full_data}. –û–∂–∏–¥–∞–π—Ç–µ, –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö"
    )
    print("------")
    # Process the data
    user_id = callback_query.from_user.id
    cursor.execute("""
        SELECT weight, name, comment, phone_number, city, address 
        FROM user_zakaz 
        WHERE user_id = ? 
        ORDER BY created_at DESC 
        LIMIT 1
    """, (user_id,))
    user_data = cursor.fetchone()
    print("------")
    if user_data:
        from dublikat_zayavki import create_call_request_kurier_konsol
        weight, name, comment, phone_number, city, address = user_data
        konsol = create_call_request_kurier_konsol(weight, name, comment, phone_number, city, address, selected_date,
                                                   selected_time, end_time)
        await bot.send_message(callback_query.from_user.id, konsol)
    else:
        await bot.send_message(callback_query.from_user.id, f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É /dan_zakaz –∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –≤ —ç—Ç–æ –º–µ–Ω—é")

    await state.finish()

# @dp.message_handler(Text(equals='/zabor_konsalid'))
# async def zabor_konsalid(message: types.Message):
#         # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
#         user_id_to_check = message.from_user.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
#
#         if check_user_id_exists(user_id_to_check):
#             await message.answer(
#                 "–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤—ã –∑–∞–ø–æ–ª–Ω–∏–ª–∏ —à–∞–±–ª–æ–Ω /dan_zakaz. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –¥–∞—Ç—É(–≥–æ–¥-–º–µ—Å—è—Ü-–¥–µ–Ω—å), –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞, –≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞ (2024-07-10 10:00 15:00)",
#                 reply_markup=cancel_keyboard
#             )
#             await Form.konsalid.set()
#         else:
#             print(f'–î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚ùå')
#             await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚ùå")
#
#
# @dp.callback_query_handler(text="cancel", state="*")
# async def cancel_handler(call: types.CallbackQuery, state: FSMContext):
#     await state.finish()
#     await call.message.answer("–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.")
#     await call.answer()



# @dp.message_handler(state=Form.konsalid)
# async def process_zabor_konsalid(message: types.Message, state: FSMContext):
#     await state.update_data(konsalid=message.text)
#
#
#     data = message.text.split()
#
#     await message.answer(f"–í—ã –≤–≤–µ–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ {data}. –û–∂–∏–¥–∞–π—Ç–µ –∏–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
#     if len(data) < 3:
#         await message.reply("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥! –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤–≤–µ–ª–∏ –¥–∞—Ç—É, –≤—Ä–µ–º—è –∏ –∞–¥—Ä–µ—Å.")
#         return
#
#     user_id = message.from_user.id
#     date = data[0]
#     start_time = data[1]
#     end_time = data[2]
#
#     # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
#     cursor.execute("""
#         SELECT weight, name, comment, phone_number, city, address
#         FROM user_zakaz
#         WHERE user_id = ?
#         ORDER BY created_at DESC
#         LIMIT 1
#     """, (user_id,))
#     user_data = cursor.fetchone()
#
#     if user_data:
#         from dublikat_zayavki import create_call_request_kurier_konsol
#         weight, name, comment, phone_number, city, address = user_data
#         konsol = create_call_request_kurier_konsol(weight, name, comment, phone_number, city, address, date, start_time, end_time)
#
#         await message.reply(konsol)
#     else:
#         await message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
#
#     # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
#     await state.finish()












# @dp.message_handler(lambda message: message.text == '/nomer')
# async def handle_enter_waybill(message: types.Message, state: FSMContext):
#
#     # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
#     user_id_to_check = message.from_user.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
#
#     if check_user_id_exists(user_id_to_check):
#         print(f'–î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–∞–π–¥–µ–Ω—ã! ‚úÖ')
#         await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (–Ω–∞–∫–ª–∞–¥–Ω–æ–π):")
#         await Form.order_number.set()
#     else:
#         print(f'–î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚ùå')
#         await message.answer(f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚ùå")
@dp.message_handler(lambda message: message.text == '/nomer')
async def handle_enter_waybill(message: types.Message, state: FSMContext):
    user_id_to_check = message.from_user.id

    if check_user_id_exists(user_id_to_check):
        print(f'–î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–∞–π–¥–µ–Ω—ã! ‚úÖ')
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        cancel_button = InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_order")
        keyboard = InlineKeyboardMarkup().add(cancel_button)

        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (–Ω–∞–∫–ª–∞–¥–Ω–æ–π):", reply_markup=keyboard)
        await Form.order_number.set()
    else:
        print(f'–î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚ùå')
        await message.answer(f"–î–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–æ–≥–æ–≤–æ—Ä–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º –∫–æ–º–ø–∞–Ω–∏–∏ –°–î–≠–ö. –ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏–ª–∏ –∑–∞–∫–ª—é—á–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä —Å –≥—Ä—É–ø–ø–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –°–î–≠–ö. –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚ùå")


@dp.callback_query_handler(lambda c: c.data == 'cancel_order', state=Form.order_number)
async def cancel_order_number(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback_query.answer()  # –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏
    await bot.send_message(callback_query.from_user.id, "–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞.", reply_markup=types.ReplyKeyboardRemove())


@dp.message_handler(lambda message: message.text == '/im')
async def handle_enter_webshop_order(message: types.Message, state: FSMContext):
    user_id_to_check = message.from_user.id

    if check_user_id_exists(user_id_to_check):
        print(f'–î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–∞–π–¥–µ–Ω—ã! ‚úÖ')


        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
        cancel_button = InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel_order_im")
        keyboard = InlineKeyboardMarkup().add(cancel_button)

        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:", reply_markup=keyboard)
        await Form.order_number2.set()
    else:
        print(f'–î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚ùå')
        await message.answer(f"–î–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–æ–≥–æ–≤–æ—Ä–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º –∫–æ–º–ø–∞–Ω–∏–∏ –°–î–≠–ö. –ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏–ª–∏ –∑–∞–∫–ª—é—á–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä —Å –≥—Ä—É–ø–ø–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –°–î–≠–ö. –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚ùå")


@dp.callback_query_handler(lambda c: c.data == 'cancel_order_im', state=Form.order_number2)
async def cancel_order_webshop(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await callback_query.answer()  # –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏
    await bot.send_message(callback_query.from_user.id, "–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞.",
                           reply_markup=types.ReplyKeyboardRemove())

@dp.callback_query_handler(lambda c: c.data == 'list_offices')
async def handle_list_offices(message: types.Message, state: FSMContext):
    user_id_to_check = message.from_user.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    if check_user_id_exists(user_id_to_check):
        print(f'–î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–∞–π–¥–µ–Ω—ã! ‚úÖ')
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
        await Form.order_number3.set()
    else:
        print(f'–î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚ùå')
        await message.answer(f"–î–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–æ–≥–æ–≤–æ—Ä–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º –∫–æ–º–ø–∞–Ω–∏–∏ –°–î–≠–ö. –ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏–ª–∏ –∑–∞–∫–ª—é—á–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä —Å –≥—Ä—É–ø–ø–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –°–î–≠–ö. –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚ùå")

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

# –°–æ–∑–¥–∞–µ–º –æ–±—â—É—é –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–º–µ–Ω—ã
cancel_button = InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥", callback_data='cancel_input')
cancel_keyboard = InlineKeyboardMarkup().add(cancel_button)

@dp.callback_query_handler(lambda c: c.data == 'change_fullname')
async def handle_change_fullname(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û:", reply_markup=cancel_keyboard)
    await Form.fio.set()

@dp.callback_query_handler(lambda c: c.data == 'change_phone')
async def handle_change_phone(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=cancel_keyboard)
    await Form.tel.set()

@dp.callback_query_handler(lambda c: c.data == 'address')
async def handle_address(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:", reply_markup=cancel_keyboard)
    await Form.adr.set()

@dp.callback_query_handler(lambda c: c.data == 'change_city')
async def handle_change_city(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∞–¥—Ä–µ—Å (–ú–æ—Å–∫–≤–∞ —É–ª–∏—Ü–∞ –ö–æ–º–∞—Ä–æ–≤–∞, 2):", reply_markup=cancel_keyboard)
    await Form.cit.set()

@dp.callback_query_handler(lambda c: c.data == 'change_pickup_point')
async def handle_change_pickup_point(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:", reply_markup=cancel_keyboard)
    await Form.pwz.set()

@dp.callback_query_handler(lambda c: c.data == 'izmenit_za_tovar')
async def handle_izmenit_za_tovar(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –ù–æ–≤–∞—è —Å—É–º–º–∞ –Ω–∞–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ —Ç–æ–≤–∞—Ä:", reply_markup=cancel_keyboard)
    await Form.inpzt.set()

@dp.callback_query_handler(lambda c: c.data == 'izmenit_za_dop')
async def handle_izmenit_za_dop(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ–ø —Å–±–æ—Ä–∞ —Ç–æ–≤–∞—Ä–∞ (–ø—Ä–∏–º–µ—Ä 1000):", reply_markup=cancel_keyboard)
    await Form.npdc.set()

@dp.callback_query_handler(lambda c: c.data == 'duplicate_waybill')
async def handle_duplicate_waybill(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π CDEK:", reply_markup=cancel_keyboard)
    await Form.dubl.set()

@dp.callback_query_handler(lambda c: c.data == '–ó–∞–∫–∞–∑–∞—Ç—å –∫—É—Ä—å–µ—Ä–∞')
async def handle_zakazati_kyriera(callback_query: types.CallbackQuery, state: FSMContext):
    await bot.send_message(callback_query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π CDEK, –¥–∞—Ç—É, –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞, –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏ –∞–¥—Ä–µ—Å. –ù–∞–ø—Ä–∏–º–µ—Ä: 10006324754 2024-07-10 10:00 15:00 —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 1", reply_markup=cancel_keyboard)
    await Form.kurier.set()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–æ–¥–∞
@dp.callback_query_handler(lambda c: c.data == 'cancel_input')
async def cancel_input(callback_query: types.CallbackQuery, state: FSMContext):
    await state.finish()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await bot.send_message(callback_query.from_user.id, "‚úÖ –í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")




# –∑–¥–µ—Å—å –±—ã–ª –∫–æ–¥ –∏–∑ obrabotka.py

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
async def process_order_info(message: types.Message, state: FSMContext, info_function, inline_buttons_data):
    order_number = message.text
    current_time = datetime.now()
    user_id = message.from_user.id



    # Check if user has entered data within the last 15 minutes
    cursor.execute("SELECT * FROM new_orders WHERE user_id = ? AND created_at > ?", (user_id, current_time - timedelta(minutes=15)))
    recent_order = cursor.fetchone()
    print(recent_order)

    # Use recent order info if available, otherwise fetch new order info
    if recent_order:
        order_info = recent_order[2]
    else:
        order_info = info_function(order_number)

    # Check if there are errors in the fetched order info
    # if order_info and isinstance(order_info, dict) and 'requests' in order_info:
    #     for request in order_info['requests']:
    #         if 'errors' in request:
    #             for error in request['errors']:
    #                 if error['code'] == 'v2_order_not_found':
    #                     inline_keyboard = InlineKeyboardMarkup().add(
    #                         InlineKeyboardButton("üïµÔ∏è‚Äç‚ôÇÔ∏è –û—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ—Å—ã–ª–∫—É", callback_data='otsl')
    #                     )
    #                     await message.answer(
    #                         "‚ùå –í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ –æ–Ω –Ω–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –∫ –≤–∞—à–µ–º—É –¥–æ–≥–æ–≤–æ—Ä—É. "
    #                         "üîç –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞. –ï—Å–ª–∏ –Ω–æ–º–µ—Ä –ø–æ—Å—ã–ª–∫–∏ –±—ã–ª –≤–µ—Ä–Ω—ã–º  "
    #                         "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å —Å–µ—Ä–≤–∏—Å–æ–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö –ø–æ—Å—ã–ª–æ–∫, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
    #                         reply_markup=inline_keyboard
    #                     )
    #                     await state.finish()
    #                     return
    if order_info:
        order_info_str = str(order_info)
        cursor.execute("INSERT INTO new_orders (user_id, cdek_number, order_info) VALUES (?, ?, ?)",
                       (message.from_user.id, order_number, order_info_str))
        conn.commit()

        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é —Å –æ–ø—Ü–∏—è–º–∏
        inline_keyboard = InlineKeyboardMarkup(row_width=2)
        for button_text, callback_data in inline_buttons_data:
            inline_keyboard.add(InlineKeyboardButton(button_text, callback_data=callback_data))

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–±–ª–µ–º —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        if isinstance(order_info, dict) and order_info.get('entity', {}).get('delivery_problem'):
            inline_keyboard.add(InlineKeyboardButton("–ü—Ä–æ–±–ª–µ–º—ã –¥–æ—Å—Ç–∞–≤–∫–∏ ‚ö†Ô∏è", callback_data="delivery_problems"))

        await message.answer("–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –ø–æ —Ä–∞–±–æ—Ç–µ –≤ –Ω–∞–∫–ª–∞–¥–Ω–æ–π. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=inline_keyboard)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(state=Form.order_number)
async def process_order_number(message: types.Message, state: FSMContext):
    from info import info
    await process_order_info(message, state, info, [
        ("–û—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ—Å—ã–ª–∫—É üì¶", "track_parcel"),
        ("–î–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—Å—ã–ª–∫–µ üìù", "parcel_data"),
        ("–í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–∫–∞–∑ (–Ω–∞–∫–ª–∞–¥–Ω—É—é) üìù", "change_order"),
        ("–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É ‚ùå", "cancel_delivery"),
        ("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ üìÜ", "change_delivery_date"),
        ("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É –Ω–∞–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ üí∏", "edit_cod_amount"),
        # ("–ü—Ä–æ–¥–ª–∏—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏–µ ‚è∞", "extend_storage")
        # ("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ üîô", "go_back")
    ])

@dp.message_handler(state=Form.order_number2)
async def process_order_number2(message: types.Message, state: FSMContext):
    from info import info2
    await process_order_info(message, state, info2, [
        ("–û—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ—Å—ã–ª–∫—É üì¶", "track_parcel"),
        ("–î–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—Å—ã–ª–∫–µ üìù", "parcel_data"),
        ("–í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–∫–∞–∑ (–Ω–∞–∫–ª–∞–¥–Ω—É—é) üìù", "change_order"),
        ("–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É ‚ùå", "cancel_delivery"),
        ("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ üìÜ", "change_delivery_date"),
        ("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É –Ω–∞–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ üí∏", "edit_cod_amount"),
        # ("–ü—Ä–æ–¥–ª–∏—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏–µ ‚è∞", "extend_storage")
        # ("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ üîô", "go_back")
    ])

@dp.callback_query_handler(lambda c: c.data == 'delivery_problems')
async def process_delivery_problems(callback_query: types.CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ
    async with state.proxy() as data:
        order_info = data.get('order_info')

    if order_info and 'entity' in order_info and 'delivery_problem' in order_info['entity']:
        delivery_problems = order_info['entity']['delivery_problem']
        if delivery_problems:
            problems_text = "\n".join([f"- {problem}" for problem in delivery_problems])
            await callback_query.message.answer(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π:\n{problems_text}")
        else:
            await callback_query.message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –ø—Ä–æ–±–ª–µ–º —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
    else:
        await callback_query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π.")

    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
    await callback_query.answer()

@dp.callback_query_handler(lambda c: c.data == 'cancel_delivery')
async def otmena_zakaza(callback_query: types.CallbackQuery):
    from otmena_zakaz import otmena

    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()

    cursor.execute('SELECT order_info FROM new_orders WHERE user_id = ? ORDER BY id DESC LIMIT 1', (callback_query.from_user.id,))
    order_info = cursor.fetchone()
    order_info_str = order_info[0]

    order_info_dict = ast.literal_eval(order_info_str)
    uuid = order_info_dict['entity']["statuses"][0]['code']
    if uuid == "CREATED":
        await callback_query.message.answer(f"–í–∞—à –∑–∞–∫–∞–∑ –≤ —Å—Ç–∞—Ç—É—Å–µ CREATED –∏ –ø–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω")
    else:
        uuid = order_info_dict['entity']['uuid']
        otmen = otmena(uuid)
        if 'status' in otmen and otmen['status'] != 202:
            print(otmen)
            await callback_query.message.answer(f"–û—à–∏–±–∫–∞: {otmen['error']}")
        else:
            print(otmen)
            await callback_query.message.answer(f"–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω {otmen}")


@dp.message_handler(Text(equals='/sklad_dver'))
async def zaborgruz(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_id_to_check = message.from_user.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
    if check_user_id_exists(user_id_to_check):
        print(f'–î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–∞–π–¥–µ–Ω—ã! ‚úÖ')
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        web_app_info = WebAppInfo(url="https://mikforce.github.io/cdek.github.io/")
        keyboard.add(KeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=web_app_info))
        await message.answer("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.", reply_markup=keyboard)
    else:
        print(f'–î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚ùå')
        await message.answer(f"–î–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–æ–≥–æ–≤–æ—Ä–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º –∫–æ–º–ø–∞–Ω–∏–∏ –°–î–≠–ö. –ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏–ª–∏ –∑–∞–∫–ª—é—á–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä —Å –≥—Ä—É–ø–ø–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –°–î–≠–ö. –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚ùå")


@dp.callback_query_handler(text='close_web_app')
async def close_web_app(callback_query: types.CallbackQuery):
    await callback_query.answer()
    await callback_query.message.edit_reply_markup(reply_markup=None)
    await callback_query.message.answer("–ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ.")

logging.basicConfig(level=logging.INFO)
@dp.message_handler(content_types="web_app_data")
async def web_app_data_handler(request: Request):
    logging.info(f"Received data: {request}")
    # –ò–∑–≤–ª–µ–∫–∞–µ–º "web_app_data" –∏ –∑–∞—Ç–µ–º "data"
    web_app_data = request.web_app_data


    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
    if web_app_data and 'data' in web_app_data:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏ —Ä–∞—Å–ø–∞—Ä—Å–∏–≤–∞–µ–º –µ–µ
        data_str = web_app_data.data
        try:
            data = json.loads(data_str)
        except json.JSONDecodeError:
            data = {}  # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, —Å—Ç–∞–≤–∏–º –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å

        data = json.loads(data_str)
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è
        values = list(data.values())
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –µ–¥–∏–Ω–æ–æ–±—Ä–∞–∑–∏—è –≤—ã–≤–æ–¥–∞
        values_str = [str(value) for value in values]
        # –°–æ–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É, —Ä–∞–∑–¥–µ–ª—è—è –∏—Ö –∑–∞–ø—è—Ç—ã–º–∏
        output = ", ".join(values_str)
        await request.answer(f"–í—ã –≤–≤–µ–ª–∏: {output}")

        # –í—ã –º–æ–∂–µ—Ç–µ –æ–±—Ä–∞—â–∞—Ç—å—Å—è –∫ –∑–Ω–∞—á–µ–Ω–∏—è–º –¥–∞–Ω–Ω—ã—Ö
        # –ù–∞–ø—Ä–∏–º–µ—Ä:
        # recipient_name = data.get('recipient_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        # recipient_phone = data.get('recipient_phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
        # await request.answer(f"–ò–º—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {recipient_name}, –¢–µ–ª–µ—Ñ–æ–Ω: {recipient_phone}, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞")
        await request.answer(f"–û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞")
        # –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏—é process_web_app_data, –µ—Å–ª–∏ –æ–Ω–∞ –≤–∞–º –Ω—É–∂–Ω–∞
        await process_web_app_data(data_str, request)



async def process_web_app_data(web_app_data, message):
    from zakaz import zakaz1
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Å—Ç—Ä–æ–∫–∏ –≤ Python –æ–±—ä–µ–∫—Ç
    parsed_data = json.loads(web_app_data)
    print(parsed_data)
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    type_ = parsed_data.get('type_')
    tariff_code = parsed_data.get('tariff_code')
    from_city = parsed_data.get('from_city')
    from_address = parsed_data.get('from_address')
    to_city = parsed_data.get('to_city')
    to_address = parsed_data.get('to_address')
    recipient_name = parsed_data.get('recipient_name')
    recipient_phone = parsed_data.get('recipient_phone')
    sender_name = parsed_data.get('sender_name')
    sender_company = parsed_data.get('sender_company')
    sender_phone = parsed_data.get('sender_phone')
    package_number = parsed_data.get('package_number')
    package_weight = parsed_data.get('package_weight')
    package_length = parsed_data.get('package_length')
    package_width = parsed_data.get('package_width')
    package_height = parsed_data.get('package_height')
    package_comment = parsed_data.get('package_comment')
    items = parsed_data.get('items', [])

    # Validate and convert the items to the correct format if needed
    item_names = [item['name'] for item in items]
    ware_keys = [item['ware_key'] for item in items]
    costs = [item['cost'] for item in items]
    item_weights = [item['weight'] for item in items]
    amounts = [item['amount'] for item in items]

    print(type_, tariff_code, from_city, from_address, to_city, to_address,
          recipient_name, recipient_phone, sender_name, sender_company,
          sender_phone, package_number, package_weight, package_length,
          package_width, package_height, package_comment, item_names,
          ware_keys, costs, item_weights, amounts)
    zak, uuid = zakaz1(
        type_, tariff_code, from_city, from_address, to_city, to_address,
        recipient_name, recipient_phone, sender_name, sender_company,
        sender_phone, package_number, package_weight, package_length,
        package_width, package_height, package_comment, item_names,
        ware_keys,costs, item_weights,
        amounts
    )

    if zak == "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω":
        print(zak)
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ UUID –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –µ–≥–æ –∫–∞–∫ –∫–æ–¥
        escaped_uuid = escape_md(str(uuid))
        copyable_uuid = f'`{escaped_uuid}`'
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ—á–∫—É –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏
        escaped_message = escape_md("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–æ–ø–∏—Ä—É–µ–º—ã–º UUID
        await message.answer(
            f"–í–∞—à –°–î–≠–ö –Ω–æ–º–µ—Ä {copyable_uuid}\\. {escaped_message}\n\n"
            f"–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–æ–º–µ—Ä, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ\\.",
            parse_mode="MarkdownV2"
        )
    else:
        if 'requests' in uuid:
            first_request = uuid['requests'][0]
            if 'errors' in first_request and first_request['errors']:
                error_message = first_request['errors'][0]['message']
                await message.answer(f"–û—à–∏–±–∫–∞: {error_message}", parse_mode=None)
            else:
                await message.answer("–ó–∞–ø—Ä–æ—Å –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –Ω–æ –æ—à–∏–±–æ–∫ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.", parse_mode=None)
        else:
            await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–∞—Ö –≤ –æ—Ç–≤–µ—Ç–µ.", parse_mode=None)

        # # If you still want to display the full API response, you can keep this line:
        # await message.answer(f"–ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API: {json.dumps(uuid, ensure_ascii=False, indent=2)}")




# –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
cancel_button = InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="cancel")
cancel_keyboard = InlineKeyboardMarkup().add(cancel_button)

@dp.message_handler(Text(equals='/zaborgruza'))
async def zaborgruz(message: types.Message):
        # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
        user_id_to_check = message.from_user.id  # –ò—Å–ø–æ–ª—å–∑—É–µ–º user_id –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
        if check_user_id_exists(user_id_to_check):
            print(f'–î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–∞–π–¥–µ–Ω—ã! ‚úÖ')
            await message.answer(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π CDEK, –¥–∞—Ç—É, –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞, "
                "–≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏ –∞–¥—Ä–µ—Å. –ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞ (10006324754 2024-07-10 10:00 15:00 —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 1)",
                reply_markup=cancel_keyboard
            )
            await Form.kurier.set()
        else:
            print(f'–î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚ùå')
            await message.answer(f"–î–∞–Ω–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –¥–æ–≥–æ–≤–æ—Ä–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º –∫–æ–º–ø–∞–Ω–∏–∏ –°–î–≠–ö. –ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –∏–ª–∏ –∑–∞–∫–ª—é—á–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä —Å –≥—Ä—É–ø–ø–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –°–î–≠–ö. –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –î–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id_to_check} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. ‚ùå")


@dp.callback_query_handler(Text(equals='cancel'), state=Form.kurier)
async def cancel_input(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()  # –£–±–∏—Ä–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–∂–∞—Ç–∏–∏
    await callback_query.message.answer("–í–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É /zaborgruza.")
    await state.finish()

@dp.message_handler(state=Form.kurier)
async def process_kurier(message: types.Message, state: FSMContext):
    data = message.text.split()
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    if len(data) < 5:
        await message.answer("–û—à–∏–±–∫–∞: –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä, –¥–∞—Ç—É, –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞, –≤—Ä–µ–º—è –∫–æ–Ω—Ü–∞ –∏ –∞–¥—Ä–µ—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª. –ï—Å–ª–∏ –≤—ã –∂–µ–ª–∞–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –û—Ç–º–µ–Ω–∞")
        return

    nomer = data[0]
    date = data[1]
    time_begin = data[2]
    time_end = data[3]
    address = data[4]
    from dublikat_zayavki import create_call_request_kurier
    # kurier = create_call_request_kurier(nomer, date, time_begin, time_end, address)
    status_code, response_data, state1 = create_call_request_kurier(nomer, date, time_begin, time_end, address)


    if state1 == "SUCCESSFUL":
        await message.answer(f'–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!{state1}')
    else:
        await message.answer(
            f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É. –ö–æ–¥ –æ—à–∏–±–∫–∏: {state1}.')
    await state.finish()


@dp.message_handler(state=Form.dubl)
async def process_dubl(message: types.Message, state: FSMContext):
    text = message.text
    from dublikat_zayavki import create_order
    uuid = create_order(text)
    await state.update_data(uuid=uuid)
    await Form.next()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞, –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏ –∞–¥—Ä–µ—Å. –ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª 2024-07-10 10:00 15:00 —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 1', reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(state=Form.call_request)
async def process_call_request(message: types.Message, state: FSMContext):
    data = message.text.split()
    date = data[0]
    time_begin = data[1]
    time_end = data[2]
    address = data[3]
    uuid = await state.get_data()
    from dublikat_zayavki import create_call_request
    import asyncio
    await asyncio.sleep(360)
    create = create_call_request(1, date, time_begin, time_end, address, uuid['uuid'])
    await message.answer(f'–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! {create}')
    await state.finish()





@dp.callback_query_handler(lambda c: c.data == 'go_back_menu')
async def go_back_menu(callback_query: types.CallbackQuery, state: FSMContext):
    await cmd_start1(callback_query.message, state)
@dp.message_handler(state=Form.npdc)
async def process_izmenit_za_dop(message: types.Message, state: FSMContext):
    try:
        from izmeneniya import nalozh_pay_dop_cbor
        text = message.text
        if int(text) >= 0:
            connection = sqlite3.connect('users.db')
            cursor = connection.cursor()

            cursor.execute('SELECT order_info FROM new_orders WHERE user_id = ? ORDER BY id DESC LIMIT 1', (message.from_user.id,))
            order_info = cursor.fetchone()
            order_info_str = order_info[0]

            order_info_dict = ast.literal_eval(order_info_str)
            uuid = order_info_dict['entity']['uuid']
            result = nalozh_pay_dop_cbor(uuid, text)
            keyboard = InlineKeyboardMarkup()
            keyboard.add(
                InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='go_back_menu')
            )
            await bot.send_message(message.from_user.id, f"–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.{result['requests']}", reply_markup=keyboard)
            await state.finish()
        else:
            await bot.send_message(message.from_user.id, f"–°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")


    except Exception as e:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='go_back_menu')
        )
        await bot.send_message(message.from_user.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}",
                               reply_markup=keyboard)
        await state.finish()
@dp.message_handler(state=Form.inpzt)
async def process_izmenit_za_tovar(message: types.Message, state: FSMContext):
    try:
        from izmeneniya import nalozh_pay
        text = message.text
        value = text

        connection = sqlite3.connect('users.db')
        cursor = connection.cursor()

        cursor.execute('SELECT order_info FROM new_orders WHERE user_id = ? ORDER BY id DESC LIMIT 1', (message.from_user.id,))
        order_info = cursor.fetchone()
        order_info_str = order_info[0]

        order_info_dict = ast.literal_eval(order_info_str)
        uuid = order_info_dict['entity']['uuid']
        result = nalozh_pay(uuid, value)
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='go_back_menu')
        )
        await bot.send_message(message.from_user.id, f"–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.{result}", reply_markup=keyboard)
        await state.finish()
    except Exception as e:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='go_back_menu')
        )
        await bot.send_message(message.from_user.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}",
                               reply_markup=keyboard)
        await state.finish()

@dp.message_handler(state=Form.order_number3)
async def process_list_offices(message: types.Message, state: FSMContext):
    city = message.text
    from spisok_ofise import city_info
    city_data = city_info(city)
    if city_data:
        response_text = f"–°–ø–∏—Å–æ–∫ –æ—Ñ–∏—Å–æ–≤ –≤ –≥–æ—Ä–æ–¥–µ {city}:\n\n"
        office_info = ""
        for office in city_data:
            office_info += f"üè¢ –û—Ñ–∏—Å: {office['name']}\n"
            office_info += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {office['phones'][0]['number']}\n"
            office_info += f"üïí –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: {office['work_time']}\n"
            if 'address_comment' in office:
                office_info += f"üìç –ê–¥—Ä–µ—Å: {office['address_comment']}\n"
            office_info += "--------------------------------------\n"

        if len(response_text + office_info) <= 4096:  # Telegram message character limit
            response_text += office_info
            await message.answer(response_text)
        else:
            from datetime import datetime
            # Create a meaningful filename for the temporary file
            timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
            filename = f"office_info_{city}_{timestamp}.txt"

            # Save detailed information to the temporary file
            with open(filename, 'w', encoding='utf-8') as temp_file:
                temp_file.write(response_text + office_info)

            # Send the temporary file
            with open(filename, 'rb') as document:
                await message.answer_document(document)

            # Remove the temporary file
            os.remove(filename)
            # os.unlink(temp_file.name)

    else:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ñ–∏—Å–∞—Ö –≤ –¥–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
    await state.finish()

async def process_entering_info(message: types.Message, state: FSMContext, info_function):
    await bot.send_message(message.from_user.id, "–ò–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∞... ‚è≥")
    entered_text = message.text
    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()

    cursor.execute('SELECT order_info FROM new_orders WHERE user_id = ? ORDER BY id DESC LIMIT 1', (message.from_user.id,))
    order_info = cursor.fetchone()

    if order_info:
        order_info_str = order_info[0]
        try:
            order_info_dict = ast.literal_eval(order_info_str)
            uuid = order_info_dict['entity']['uuid']
            result = info_function(uuid, entered_text)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç API
            if result and 'requests' in result and len(result['requests']) > 0:
                reez = result['requests'][0]['state']
                await bot.send_message(message.from_user.id, f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {reez}")
            else:
                await bot.send_message(message.from_user.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

        except (ValueError, SyntaxError) as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ü–µ–Ω–∏—Ç—å order_info_str –∫–∞–∫ —Å–ª–æ–≤–∞—Ä—å: {e}")
            await bot.send_message(message.from_user.id, "üö´ –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")
            await bot.send_message(message.from_user.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    else:
        print("–î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ order_info")
        await bot.send_message(message.from_user.id, "üì≠ –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞.")

    connection.close()
    await state.finish()
# SELECT order_info FROM new_orders WHERE user_id = ? ORDER BY id DESC LIMIT 1
@dp.message_handler(state=Form.fio)
async def process_entering_fullname(message: types.Message, state: FSMContext):
    from izmeneniya import fio
    await process_entering_info(message, state, fio)

@dp.message_handler(state=Form.tel)
async def process_entering_tel(message: types.Message, state: FSMContext):
    from izmeneniya import fone
    await process_entering_info(message, state, fone)

@dp.message_handler(state=Form.adr)
async def process_entering_adr(message: types.Message, state: FSMContext):
    from izmeneniya import adres
    await process_entering_info(message, state, adres)

@dp.message_handler(state=Form.cit)
async def process_entering_cit(message: types.Message, state: FSMContext):
    entered_text = message.text
    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()

    cursor.execute('SELECT order_info FROM new_orders WHERE user_id = ?', (message.from_user.id,))
    order_info = cursor.fetchone()

    if order_info:
        order_info_str = order_info[0]
        try:
            order_info_dict = ast.literal_eval(order_info_str)
            uuid = order_info_dict['entity']['uuid']
            from izmeneniya import change_city
            address_parts = entered_text.split(' ', 1)
            city = address_parts[0]
            address_parts = address_parts[1:]
            address = ' '.join(address_parts)
            print(city, address)
            result = change_city(uuid, city, address)

            await bot.send_message(message.from_user.id, result)

        except (ValueError, SyntaxError) as e:
            print(f"Failed to evaluate order_info_str as dictionary: {e}")
    else:
        print("No order_info found for the user")

    connection.close()
    await state.finish()

@dp.message_handler(state=Form.pwz)
async def process_entering_pwz(message: types.Message, state: FSMContext):
    # from izmeneniya import pwz
    # await process_entering_info(message, state, pwz)
    await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await Form.next()


@dp.message_handler(commands=['lists'])
async def cmd_lists(message: types.Message):
    inline_keyboard = InlineKeyboardMarkup(row_width=1)
    inline_keyboard.add(
        # InlineKeyboardButton("–°–ø–∏—Å–∫–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤", callback_data='list_regions'),
        InlineKeyboardButton("–°–ø–∏—Å–∫–∏ –æ—Ñ–∏—Å–æ–≤", callback_data='list_offices')
        # InlineKeyboardButton("–°–ø–∏—Å–∫–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤", callback_data='list_settlements')
    )
    await message.answer("–í—ã–±–µ—Ä–µ—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=inline_keyboard)

from aiogram import types
import ast
from aiogram import types

@dp.callback_query_handler(lambda c: c.data)
async def process_callback(callback_query: types.CallbackQuery):

    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()
    if callback_query.data == 'track_parcel':
        # Fetch order info from the database
        cursor.execute("SELECT order_info FROM new_orders WHERE user_id = ? ORDER BY id DESC LIMIT 1", (callback_query.from_user.id,))
        order_info = cursor.fetchone()

        if order_info:
            order_info_str = order_info[0]
            print(f"Debug: Fetched order info: {order_info_str}")  # Debugging line

            try:
                order_info_dict = ast.literal_eval(order_info_str)  # Safely evaluate the string as a Python dictionary

                if 'entity' in order_info_dict and 'statuses' in order_info_dict['entity']:
                    statuses = order_info_dict['entity']['statuses']
                    statuses_reversed = []
                    import pytz
                    moscow_tz = pytz.timezone('Europe/Moscow')

                    for status in reversed(statuses):
                        date_time_str = status['date_time']
                        # –£–±–∏—Ä–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ +0000
                        date_time_str = date_time_str[:-5]  # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–∏–º–≤–æ–ª–æ–≤
                        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
                        utc_time = datetime.strptime(date_time_str, '%Y-%m-%dT%H:%M:%S')
                        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º UTC –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
                        utc_time = pytz.utc.localize(utc_time)
                        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
                        moscow_time = utc_time.astimezone(moscow_tz)
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
                        status_str = f"{status['name']} –≤ {status['city']} {moscow_time.strftime('%Y-%m-%d %H:%M:%S')}"
                        statuses_reversed.append(status_str)
                    status_text = "\n".join(statuses_reversed)
                    await bot.send_message(callback_query.from_user.id, status_text)
                else:
                    await bot.send_message(callback_query.from_user.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ—Å—ã–ª–∫–∏ –ø–æ —Å–≤–æ–µ–º—É –¥–æ–≥–æ–≤–æ—Ä—É.")
            except (ValueError, SyntaxError) as e:
                await bot.send_message(callback_query.from_user.id, "Error decoding order information. Please try again later.")
                print(f"Error: {e}")
        else:
            await bot.send_message(callback_query.from_user.id, "No order information found.")


    elif callback_query.data == 'track_parcel2':
        # Fetch order info from the database
        cursor.execute("SELECT order_info FROM new_orders WHERE user_id = ? ORDER BY id DESC LIMIT 1", (callback_query.from_user.id,))
        order_info = cursor.fetchone()

        if order_info:
            order_info_str = order_info[0]
            print(f"Debug: Fetched order info: {order_info_str}")  # Debugging line

            try:
                order_info_dict = ast.literal_eval(order_info_str)  # Safely evaluate the string as a Python dictionary

                if 'entity' in order_info_dict and 'statuses' in order_info_dict['entity']:
                    statuses = order_info_dict['entity']['statuses']
                    status_text = "\n".join(f"{status['name']} –≤ {status['city']}" for status in statuses)
                    await bot.send_message(callback_query.from_user.id, status_text)
                else:
                    await bot.send_message(callback_query.from_user.id, "No status information available.")
            except (ValueError, SyntaxError) as e:
                await bot.send_message(callback_query.from_user.id, "Error decoding order information. Please try again later.")
                print(f"Error: {e}")
        else:
            await bot.send_message(callback_query.from_user.id, "No order information found.")



    elif callback_query.data == 'parcel_data':
        # Fetch order info from the database
        cursor.execute("SELECT order_info FROM new_orders WHERE user_id = ? ORDER BY id DESC LIMIT 1",
                       (callback_query.from_user.id,))
        order_info = cursor.fetchone()
        if order_info:
            order_info_str = order_info[0]
            print(f"Debug: Fetched order info: {order_info_str}")  # Debugging line
            try:
                import pytz
                order_info_dict = ast.literal_eval(order_info_str)  # Safely evaluate the string as a Python dictionary
                if 'entity' in order_info_dict:
                    entity_info = order_info_dict['entity']
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
                    statuses = entity_info.get('statuses', [])
                    status_text = ""
                    moscow_tz = pytz.timezone('Europe/Moscow')

                    for status in statuses:
                        # –£–±–∏—Ä–∞–µ–º —Å–º–µ—â–µ–Ω–∏–µ +0000
                        date_time_str = status['date_time'][:-5]  # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–∏–º–≤–æ–ª–æ–≤
                        # –ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
                        utc_time = datetime.strptime(date_time_str, '%Y-%m-%dT%H:%M:%S')
                        # –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º UTC –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É
                        utc_time = pytz.utc.localize(utc_time)
                        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è
                        moscow_time = utc_time.astimezone(moscow_tz)

                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É
                        status_text += f"üìå *–°—Ç—É—Å:* {status['name']} ({status['code']}) - {moscow_time.strftime('%Y-%m-%d %H:%M:%S')} - {status['city']}\n"

                    # Format the output
                    entity_text = (
                        f"üì¶ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–∏:*\n\n"
                        f"üìù *–ù–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:* {entity_info.get('cdek_number', 'N/A')}\n\n"
                        f"  üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {entity_info.get('comment', 'N/A')}\n\n"
                        f"üìç *–ü—É–Ω–∫—Ç –¥–æ—Å—Ç–∞–≤–∫–∏:* {entity_info.get('delivery_point', 'N/A')}\n"
                        f"  üë• *–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:* {entity_info['sender'].get('company', 'N/A')} - {entity_info['sender'].get('name', 'N/A')}\n"
                        f"  üë• *–ü–æ–ª—É—á–∞—Ç–µ–ª—å:* {entity_info['recipient'].get('company', 'N/A')} - {entity_info['recipient'].get('name', 'N/A')}\n"
                        f"  üöö *–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞: {entity_info.get('delivery_detail', {}).get('total_sum', 'N/A')} —Ä—É–±.\n\n"
                        f"üë§ *–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:* {entity_info.get('sender', {}).get('name', 'N/A')}\n"
                        f"  üìû *–¢–µ–ª–µ—Ñ–æ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:* {entity_info.get('sender', {}).get('phones', [{}])[0].get('number', 'N/A')}\n\n"
                        # f"üè¢ *–ö–æ–º–ø–∞–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è:* {entity_info.get('recipient', {}).get('company', 'N/A')}\n"
                        f"üë§ *–ü–æ–ª—É—á–∞—Ç–µ–ª—å:* {entity_info.get('recipient', {}).get('name', 'N/A')}\n"
                        f"  üìû *–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è:* {entity_info.get('recipient', {}).get('phones', [{}])[0].get('number', 'N/A')}\n\n"
                        f"üìå *–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑:* {entity_info.get('from_location', {}).get('country', 'N/A')}, {entity_info.get('from_location', {}).get('city', 'N/A')}, {entity_info.get('from_location', {}).get('address', 'N/A')}\n"
                        f"üìå *–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤:* {entity_info.get('to_location', {}).get('country', 'N/A')}, {entity_info.get('to_location', {}).get('city', 'N/A')}, {entity_info.get('to_location', {}).get('address', 'N/A')}\n\n"
                        f"üì¶ *–î–∞–Ω–Ω—ã–µ –æ –ø–æ—Å—Å—ã–ª–∫–∏:*\n"
                    )

                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–∫–µ—Ç–∞—Ö
                    for package in entity_info.get('packages', []):
                        entity_text += (
                            f"    - üì¶ –ù–æ–º–µ—Ä –º–µ—Å—Ç–æ: {package.get('number', 'N/A')}, "
                            f"–í–µ—Å: {package.get('weight', 'N/A')} –≥, "
                            f"–†–∞–∑–º–µ—Ä—ã: {package.get('length', 'N/A')}x{package.get('width', 'N/A')}x{package.get('height', 'N/A')} —Å–º\n"
                            f"      *–°–æ–¥–µ—Ä–∂–∏–º–æ–µ:*\n"
                        )
                        for item in package.get('items', []):
                            entity_text += (
                                f"        - üéÅ {item.get('name', 'N/A')}: "
                                f"–í–µ—Å: {item.get('weight', 'N/A')} –≥, "
                                f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {item.get('cost', 'N/A')} —Ä—É–±.\n"
                            )

                    # entity_text += "üîö *–ö–æ–Ω–µ—Ü –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.*"                    # Add your code to process and send the entity information
                    keyboard = InlineKeyboardMarkup()
                    keyboard.add(
                        InlineKeyboardButton("–¢–µ–ª–µ—Ñ–æ–Ω –æ—Ñ–∏—Å–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞ –≤—Ä—É—á–µ–Ω–∏–µ –ø–æ—Å—ã–ª–∫–∏",
                                             callback_data='delivery_office_phone'),
                        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='go_back')
                    )
                    await bot.send_message(callback_query.from_user.id, entity_text, reply_markup=keyboard)
                else:
                    await bot.send_message(callback_query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π –ø–æ –≤–∞—à–µ–º—É –¥–æ–≥–æ–≤–æ—Ä—É.")
            except (ValueError, SyntaxError) as e:
                await bot.send_message(callback_query.from_user.id, "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")
                print(f"Error: {e}")
        else:
            await bot.send_message(callback_query.from_user.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    elif callback_query.data == 'parcel_data2':
        # Fetch order info from the database
        cursor.execute("SELECT order_info FROM new_orders WHERE user_id = ? ORDER BY id DESC LIMIT 1",
                       (callback_query.from_user.id,))
        order_info = cursor.fetchone()
        if order_info:
            order_info_str = order_info[0]
            print(f"Debug: Fetched order info: {order_info_str}")  # Debugging line
            try:
                order_info_dict = ast.literal_eval(order_info_str)  # Safely evaluate the string as a Python dictionary
                if 'entity' in order_info_dict:
                    entity_info = order_info_dict['entity']
                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
                    statuses = entity_info.get('statuses', [])
                    status_text = ""
                    for status in statuses:
                        status_text += f"üìå *–°—Ç—É—Å:* {status['name']} ({status['code']}) - {status['date_time']} - {status['city']}\n"

                    # Format the output
                    entity_text = (
                        f"üì¶ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–∏:*\n\n"
                        f"üîë *UUID:* {entity_info.get('uuid', 'N/A')}\n"
                        f"üìù *–ù–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:* {entity_info.get('cdek_number', 'N/A')}\n"
                        f"  üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {entity_info.get('comment', 'N/A')}\n"
                        f"  üìç *–ü—É–Ω–∫—Ç –¥–æ—Å—Ç–∞–≤–∫–∏:* {entity_info.get('delivery_point', 'N/A')}\n"
                        f"  üë• *–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:* {entity_info['sender'].get('company', 'N/A')} - {entity_info['sender'].get('name', 'N/A')}\n"
                        f"  üë• *–ü–æ–ª—É—á–∞—Ç–µ–ª—å:* {entity_info['recipient'].get('company', 'N/A')} - {entity_info['recipient'].get('name', 'N/A')}\n"
                        f"üìã *–¢–∞—Ä–∏—Ñ–Ω—ã–π –∫–æ–¥:* {entity_info.get('tariff_code', 'N/A')}\n"
                        f"üè¢ *–ü—É–Ω–∫—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:* {entity_info.get('shipment_point', 'N/A')}\n"
                        f"üíµ *–°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–æ–≤ (–≤ –≤–∞–ª—é—Ç–µ):* {entity_info.get('items_cost_currency', 'N/A')}\n"
                        f"üöö *–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞:* {entity_info.get('delivery_recipient_cost', {}).get('value', 'N/A')}\n\n"
                        f"üë§ *–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:* {entity_info.get('sender', {}).get('name', 'N/A')}\n"
                        f"  üìû *–¢–µ–ª–µ—Ñ–æ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:* {entity_info.get('sender', {}).get('phones', [{}])[0].get('number', 'N/A')}\n"
                            f"üè¢ *–ö–æ–º–ø–∞–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª—è:* {entity_info.get('recipient', {}).get('company', 'N/A')}\n\n"
                        f"üë§ *–ü–æ–ª—É—á–∞—Ç–µ–ª—å:* {entity_info.get('recipient', {}).get('name', 'N/A')}\n"
                        f"  üìû *–¢–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è:* {entity_info.get('recipient', {}).get('phones', [{}])[0].get('number', 'N/A')}\n"
                        f"üìå *–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–∑:* {entity_info.get('from_location', {}).get('city', 'N/A')}, {entity_info.get('from_location', {}).get('country', 'N/A')}\n"
                        f"üìå *–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤:* {entity_info.get('to_location', {}).get('city', 'N/A')}, {entity_info.get('to_location', {}).get('country', 'N/A')}\n"
                        f"{status_text}"
                    )
                    # Add your code to process and send the entity information
                    keyboard = InlineKeyboardMarkup()
                    keyboard.add(
                        InlineKeyboardButton("–¢–µ–ª–µ—Ñ–æ–Ω –æ—Ñ–∏—Å–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞ –≤—Ä—É—á–µ–Ω–∏–µ –ø–æ—Å—ã–ª–∫–∏",
                                             callback_data='delivery_office_phone'),
                        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='go_back')
                    )
                    await bot.send_message(callback_query.from_user.id, entity_text, reply_markup=keyboard)
                else:
                    await bot.send_message(callback_query.from_user.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–∂–Ω–æ–π –ø–æ –≤–∞—à–µ–º—É –¥–æ–≥–æ–≤–æ—Ä—É.")
            except (ValueError, SyntaxError) as e:
                await bot.send_message(callback_query.from_user.id, "–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.")
                print(f"Error: {e}")
        else:
            await bot.send_message(callback_query.from_user.id, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")








    elif callback_query.data == 'delivery_office_phone':
        cursor.execute("SELECT order_info FROM new_orders WHERE user_id = ? ORDER BY id DESC LIMIT 1",
                       (callback_query.from_user.id,))
        order_info = cursor.fetchone()
        if order_info:
            order_info_str = order_info[0]
            print(f"Debug: Fetched order info: {order_info_str}")  # Debugging line
            try:
                order_info_dict = ast.literal_eval(order_info_str)  # Safely evaluate the string as a Python dictionary
                if 'entity' in order_info_dict:
                    entity_info = order_info_dict['entity']
                    delivery_point_code = entity_info.get('delivery_point')
                    print(delivery_point_code)
                    from Delivery_Arrangement_Information import deliverypoints, format_deliverypoint_info
                    if delivery_point_code:
                        response = deliverypoints(delivery_point_code)
                        if response:
                            formatted_info = format_deliverypoint_info(response[0])
                            await callback_query.message.answer(
                                f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É:\n\n{formatted_info}")
                        else:
                            await callback_query.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—É–Ω–∫—Ç–µ –≤—ã–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                    else:
                        await callback_query.message.answer("–ö–æ–¥ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞.")
            except (SyntaxError, ValueError) as e:
                print(f"Error parsing order info: {e}")  # Debugging line
                await callback_query.message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞.")
        else:
            await callback_query.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


    elif callback_query.data == 'go_back':

        await process_order_number(callback_query.message, state=None)




    elif callback_query.data == 'change_order':
        keyboard_markup = types.InlineKeyboardMarkup(row_width=1)
        buttons = [
            types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è", callback_data='change_fullname'),
            types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è", callback_data='change_phone'),
            types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è", callback_data='change_address')
        ]
        keyboard_markup.add(*buttons)
        await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å",
                               reply_markup=keyboard_markup)
    elif callback_query.data == 'change_address':
        keyboard_markup = types.InlineKeyboardMarkup(row_width=1)
        buttons = [
            types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è", callback_data='address'),
            types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ü–í–ó –≤ –≥–æ—Ä–æ–¥–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ", callback_data='change_pickup_point'),
            types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–≥–æ—Ä–æ–¥ –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è + –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è)", callback_data='change_city')
        ]
        keyboard_markup.add(*buttons)
        await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å",
                               reply_markup=keyboard_markup)

    elif callback_query.data == 'cancel_delivery':
        await bot.send_message(callback_query.from_user.id, "–§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    elif callback_query.data == 'change_delivery_date':











        await bot.send_message(callback_query.from_user.id, "–§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")


    elif callback_query.data == 'edit_cod_amount':
        keyboard_markup = types.InlineKeyboardMarkup(row_width=1)
        buttons = [
            types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏", callback_data='otmena_vcex_plat'),
            # types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –∑–∞ —Ç–æ–≤–∞—Ä", callback_data='izmenit_za_tovar'),
            types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –∑–∞ –¥–æ–ø. —Å–±–æ—Ä", callback_data='izmenit_za_dop')
        ]
        keyboard_markup.add(*buttons)
        await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å",
                               reply_markup=keyboard_markup)

    elif callback_query.data == 'otmena_vcex_plat':
        from izmeneniya import nalozh_pay_otmena_vse
        cursor.execute('SELECT order_info FROM new_orders WHERE user_id = ?', (callback_query.from_user.id,))
        order_info = cursor.fetchone()

        if order_info:
            order_info_str = order_info[0]

            order_info_dict = ast.literal_eval(order_info_str)
            uuid = order_info_dict['entity']['uuid']
            nalozh_pay_otmena = nalozh_pay_otmena_vse(uuid)
            await callback_query.message.answer(
                f"–û—Ç–º–µ–Ω–µ–Ω—ã –≤—Å–µ –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏:\n\n{nalozh_pay_otmena}")


    # elif callback_query.data == 'register_ek5':
    #     await bot.answer_callback_query(callback_query.id)
    #     await bot.send_message(callback_query.from_user.id,
    #                            "–°–∞–π—Ç –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ ek5: https://cdek.ru.net/registration/")




    elif callback_query.data == 'extend_storage':
        cursor.execute("SELECT order_info FROM new_orders WHERE user_id = ? ORDER BY id DESC LIMIT 1",
                       (callback_query.from_user.id,))
        order_info = cursor.fetchone()
        if order_info:
            order_info_str = order_info[0]
            print(f"Debug: Fetched order info: {order_info_str}")  # Debugging line
            try:
                order_info_dict = ast.literal_eval(order_info_str)  # Safely evaluate the string as a Python dictionary
                if 'entity' in order_info_dict:
                    entity_info = order_info_dict['entity']
                    delivery_point_code = entity_info.get('delivery_point')
                    print(delivery_point_code)
                    from Delivery_Arrangement_Information import deliverypoints, format_deliverypoint_info
                    if delivery_point_code:
                        response = deliverypoints(delivery_point_code)
                        if response:
                            formatted_info = format_deliverypoint_info(response[0])
                            await callback_query.message.answer(f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É:\n\n{formatted_info}")
                        else:
                            await callback_query.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—É–Ω–∫—Ç–µ –≤—ã–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                    else:
                        await callback_query.message.answer("–ö–æ–¥ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞.")
            except (SyntaxError, ValueError) as e:
                print(f"Error parsing order info: {e}")  # Debugging line
                await callback_query.message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞.")
        else:
            await callback_query.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")



    elif callback_query.data == '/lists':
        # Create a new inline keyboard with three buttons
        inline_keyboard = InlineKeyboardMarkup(row_width=1)
        inline_keyboard.add(
            # InlineKeyboardButton("–°–ø–∏—Å–∫–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤", callback_data='list_regions'),
            InlineKeyboardButton("–°–ø–∏—Å–∫–∏ –æ—Ñ–∏—Å–æ–≤", callback_data='list_offices')
            # InlineKeyboardButton("–°–ø–∏—Å–∫–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤", callback_data='list_settlements')
        )
        # Send the "–≤—ã–±–µ—Ä–µ—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞" message with the inline keyboard
        await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–µ—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=inline_keyboard)


    # You can implement specific logic for each callback data here
    elif callback_query.data == 'list_regions':
        from regions import region_code
        region = region_code()
        message = "üåç **–°–ø–∏—Å–∫–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤ üèûÔ∏è**:\n"
        for code, region in region.items():
            message += f"- {code}: '{region}'\n"

        await bot.send_message(callback_query.from_user.id, message)

    elif callback_query.data == 'list_offices':
        await bot.send_message(callback_query.from_user.id, "–°–ø–∏—Å–∫–∏ –æ—Ñ–∏—Å–æ–≤")


    elif callback_query.data == 'list_settlements':
        await bot.send_message(callback_query.from_user.id, "–°–ø–∏—Å–∫–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤")





@dp.message_handler(commands='docs')
async def process_doc(callback_query: types.CallbackQuery):
    text = '''–ö–æ–º–∞–Ω–¥—ã Telegram –±–æ—Ç–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API –°–î–≠–ö:

/nomer
–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞ –°–î–≠–ö.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ API: GET /orders
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.
–ë–æ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ, —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –¥—Ä—É–≥–∏–µ –¥–µ—Ç–∞–ª–∏.

/im
–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ –Ω–æ–º–µ—Ä—É –∑–∞–∫–∞–∑–∞ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ (–ò–ú).
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ API: GET /orders
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–ª–∂–µ–Ω –≤–≤–µ—Å—Ç–∏ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –ò–ú –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.
–ë–æ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ, —Å–≤—è–∑–∞–Ω–Ω—É—é —Å –¥–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –ò–ú.

/sklad_dver (—Ä–∞–Ω–µ–µ /zaborgruz)
–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –ø–æ —Å—Ö–µ–º–µ "–°–∫–ª–∞–¥-–¥–≤–µ—Ä—å".
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ API: POST /orders
–ë–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞ (–∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è, –≤–µ—Å, –≥–∞–±–∞—Ä–∏—Ç—ã –∏ —Ç.–¥.).
–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö, —Å–æ–∑–¥–∞–µ—Ç—Å—è –∑–∞–∫–∞–∑ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É —Å–æ —Å–∫–ª–∞–¥–∞ –°–î–≠–ö –¥–æ –¥–≤–µ—Ä–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è.

/zaborgruza
–ó–∞–∫–∞–∑ –∑–∞–±–æ—Ä–∞ –≥—Ä—É–∑–∞.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ API: POST /intakes
–ë–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–±–æ—Ä–∞ –≥—Ä—É–∑–∞, –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.
–°–æ–∑–¥–∞–µ—Ç—Å—è –∑–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–±–æ—Ä –≥—Ä—É–∑–∞ –∫—É—Ä—å–µ—Ä–æ–º –°–î–≠–ö.

/doc
–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ).
–í –±—É–¥—É—â–µ–º –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥—ã API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ (–Ω–∞–∫–ª–∞–¥–Ω—ã–µ, –∞–∫—Ç—ã –∏ —Ç.–¥.).

/faq
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ä–≤–∏—Å–µ.
–ù–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ API.
–í—ã–≤–æ–¥–∏—Ç —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∏—Ö.

/lists
–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–≤ —Ä–µ–≥–∏–æ–Ω–æ–≤, –æ—Ñ–∏—Å–æ–≤, –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥—ã API: GET /location/regions, GET /deliverypoints, GET /location/cities
–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–ø—Ä–æ—Å–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤, –æ—Ñ–∏—Å–æ–≤ –°–î–≠–ö –∏–ª–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤.

/dan_zakaz
–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ –¥–ª—è –∑–∞–±–æ—Ä–∞ –≥—Ä—É–∑–∞.
–ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ API: POST /intakes –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —à–∞–±–ª–æ–Ω–∞
–ë–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–∏—á–Ω–æ–º –∑–∞–±–æ—Ä–µ –≥—Ä—É–∑–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–æ–∫ –≤ –±—É–¥—É—â–µ–º.

/zabor_konsalid
–ó–∞–±–æ—Ä –∫–æ–Ω—Å–æ–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –≥—Ä—É–∑–∞.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ API: POST /intakes —Å —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
–ë–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≥—Ä—É–∑–∞—Ö, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –∑–∞–±—Ä–∞—Ç—å –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.

/info_delivery_problem
–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–±–ª–µ–º–µ –¥–æ—Å—Ç–∞–≤–∫–∏.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –º–µ—Ç–æ–¥ API: GET /orders/{order_uuid}/statuses
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–æ–º–µ—Ä –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞, –±–æ—Ç –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–∞—Ç—É—Å–µ –∏ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º–∞—Ö.

/human_chat
–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.
–ù–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ API –°–î–≠–ö.
–°—Ç–∞–≤–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ—á–µ—Ä–µ–¥—å –Ω–∞ –æ–±—â–µ–Ω–∏–µ —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏.

/end_chat
–ó–∞–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.
–ù–µ —Ç—Ä–µ–±—É–µ—Ç –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ API –°–î–≠–ö.
–ó–∞–≤–µ—Ä—à–∞–µ—Ç —Å–µ—Å—Å–∏—é –æ–±—â–µ–Ω–∏—è —Å –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏.

/ypakovka
–ó–∞–∫–∞–∑ —É–ø–∞–∫–æ–≤–∫–∏ –°–î–≠–ö.
–ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ API: POST /orders —Å —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è –∑–∞–∫–∞–∑–∞ —É–ø–∞–∫–æ–≤–∫–∏
–ë–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–¥—ã —É–ø–∞–∫–æ–≤–∫–∏ –∏ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–∫–∞–∑–∞—Ç—å –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é.'''
    await bot.send_message(callback_query.from_user.id, text)

# async def process_order_number(user_id, state):
#     # Add logic to open the cmd_start1 menu
#     await cmd_start1(user_id)



@dp.message_handler(lambda message: message.text == '/del')
async def process_zamena(message: types.Message):
    print("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã del –≤—ã–∑–≤–∞–Ω.")
    user = await check_user(message.from_user.id)
    if user:
        cursor.execute("DELETE FROM users WHERE id=?", (user[0],))
        conn.commit()
        await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞.")

    else:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")


@dp.message_handler(Text(equals='/podderzhka'))
async def podderzhka(message: types.Message):
    support_links = {
        "Whatsapp": "https://api.whatsapp.com/send?phone=74993506695&text=%D0%9F%D0%BE%D0%B6%D0%B0%D0%BB%D1%83%D0%B9%D1%81%D1%82%D0%B0,%20%D0%BE%D1%82%D0%BF%D1%80%D0%B0%D0%B2%D1%8C%D1%82%D0%B5%20%D1%8D%D1%82%D0%BE%20%D1%81%D0%BE%D0%BE%D0%B1%D1%89%D0%B5%D0%BD%D0%B8%D0%B5%20%D0%B8%D0%B7%20%D0%BF%D1%80%D0%B8%D0%BB%D0%BE%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F%20WhatsApp%20%F0%9F%93%B2%20gR8EtNy5ngX281wJU8Msr",
        "–¢–µ–ª–µ–≥—Ä–∞–º": "https://t.me/edostavkabot?start=ZlhWWMLFNSpGbGQm4CrIZ",
        "–í–ö–æ–Ω—Ç–∞–∫—Ç–µ": "https://vk.com/write-142153191?ref=gJOzB7aTuWdPgbfA8rQHZ",
        "–í–∞–π–±–µ—Ä": "https://invite.viber.com/?g2=AQASBGNDxA4MbEyOd1G4WZ7oQDqr6Svy5w6hCG4ZV2MbLE7u70HHy8ilo7yV4uRz&lang=ru"
    }

    response = "–ù–∞—à–∏ –∫–∞–Ω–∞–ª—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n\n" + "\n".join(
        [f"{platform}: {link}" for platform, link in support_links.items()])

    await message.answer(response)


@dp.message_handler(lambda message: message.text == '/ypakovka')
async def ypakovka(message: types.Message):

    await message.answer("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

if __name__ == '__main__':
    import asyncio
    from aiogram import executor
    from aiohttp import web

    app = web.Application()
    app.router.add_post('/webapp-data', web_app_data_handler)

    loop = asyncio.get_event_loop()
    # loop.create_task(web._run_app(app, host='localhost', port=8080))

    executor.start_polling(dp, skip_updates=True)


# start - –í–•–û–î –í –õ–ò–ß–ù–´–ô –ö–ê–ë–ò–ù–ï–¢
# nomer - –í–í–ï–î–ò–¢–ï –ù–û–ú–ï–† –ó–ê–ö–ê–ó–ê (–ù–ê–ö–õ–ê–î–ù–û–ô)
# im - –í–í–ï–î–ò–¢–ï –ù–û–ú–ï–† –ó–ê–ö–ê–ó–ê –ò–ù–¢–ï–†–ù–ï–¢-–ú–ê–ì–ê–ó–ò–ù–ê (–ò–ú)
# dan_zakaz - –°–û–ó–î–ê–ù–ò–ï –®–ê–ë–õ–û–ù–ê –£–°–õ–£–ì–ò "–ó–ê–ë–û–† –ì–†–£–ó–ê"
# zabor_konsalid - –ó–ê–ë–û–† –ö–û–ù–°–û–õ–ò–î–ò–†–û–í–ê–ù–ù–û–ì–û –ì–†–£–ó–ê
# ypakovka - –ú–ê–ì–ê–ó–ò–ù –£–ü–ê–ö–û–í–ö–ò
# human_chat - –û–ë–©–ï–ù–ò–ï –° –ü–û–î–î–ï–†–ñ–ö–û–ô
# end_chat - –ó–ê–ö–†–´–¢–¨ –ß–ê–¢ –° –ü–û–î–î–ï–†–ñ–ö–û–ô
# docs - –ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –ß–ê–¢-–ë–û–¢–£
# lists - –°–ü–ò–°–ö–ò –û–§–ò–°–û–í
# info_delivery_problem - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–±–ª–µ–º–µ –¥–æ—Å—Ç–∞–≤–∫–∏
# faq - FAQ
# del - –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞