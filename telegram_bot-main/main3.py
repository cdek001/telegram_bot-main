# aiogram   2.23.1
import sqlite3
import os
import json
from datetime import timedelta, datetime

import requests
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ParseMode, ReplyKeyboardMarkup, KeyboardButton, InputMediaPhoto, WebAppInfo
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import tempfile

from token_generator import get_token

# 10006324754 —Å–∫–ª–∞–¥-–¥–≤–µ—Ä—å
# 10007168378 –¥–æ –ø–≤–∑

# Initialize bot and dispatcher
bot = Bot(token="7020285176:AAEr9NQt7m3pljwWAMfYANb1EjdMeQKmgVQ")
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)
dp.middleware.setup(LoggingMiddleware())

# Database setup

conn = sqlite3.connect('users.db')
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS new_orders
                  (id INTEGER PRIMARY KEY AUTOINCREMENT, user_id INTEGER, cdek_number TEXT, order_info TEXT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP)''')

# cursor.execute('''INSERT INTO new_orders (id, user_id, cdek_number, order_info)
#                   SELECT id, user_id, cdek_number, order_info FROM orders''')
#
# cursor.execute('''DROP TABLE orders''')
#
# cursor.execute('''ALTER TABLE new_orders RENAME TO orders''')

# Keyboard markup
keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
keyboard.add(KeyboardButton('üìã –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é'))
keyboard.add(KeyboardButton('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'))
# keyboard.add(KeyboardButton('üõí –ú–µ–Ω—é –∑–∞–∫–∞–∑–∞'))
keyboard.add(KeyboardButton('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç'))
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    keyboard.add(KeyboardButton('üìã –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é'))
    keyboard.add(KeyboardButton('‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'))
    # keyboard.add(KeyboardButton('üõí –ú–µ–Ω—é –∑–∞–∫–∞–∑–∞'))
    keyboard.add(KeyboardButton('üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç'))
    return keyboard
@dp.message_handler(lambda message: message.text == 'üõí –ú–µ–Ω—é –∑–∞–∫–∞–∑–∞')
async def handle_get_order_info(message: types.Message, state: FSMContext):
    user = await check_user(message.from_user.id)

    if user:
        await process_order_number(message, state)
    else:
        await message.answer(
            "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")


class Form(StatesGroup):
    login = State()
    password = State()
    order_number = State()
    order_number2 = State()
    order_number3 = State()
    fio = State()
    tel = State()
    adr = State()
    pwz = State()
    cit = State()
    inpzt = State()
    npdc = State()
    dubl = State()
    call_request = State()
    kurier = State()


async def check_user(user_id):
    cursor.execute("SELECT * FROM users WHERE user_id=?", (user_id,))
    return cursor.fetchone()


@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    user = await check_user(message.from_user.id)
    if user:
        await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {user[2]}! –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=keyboard)
    else:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω. –õ–æ–≥–∏–∏–Ω –∏ –ø–∞—Ä–æ–ª—å –≤–∞–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–ª—É—á–∏—Ç—å –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ, –∫–∞–∫ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É info.", reply_markup=keyboard)
        await Form.login.set()


@dp.message_handler(lambda message: message.text =='üìã –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é')
async def cmd_start1(message: types.Message, state: FSMContext):
    user = await check_user(message.from_user.id)

    if user:
        # –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        keyboard = InlineKeyboardMarkup()
        # keyboard.row(InlineKeyboardButton("–í–Ω–µ—Å–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∑–∞–∫–∞–∑", callback_data='change_order'))
        # keyboard.row(InlineKeyboardButton("–û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='track_order'))
        keyboard.row(InlineKeyboardButton("–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (–Ω–∞–∫–ª–∞–¥–Ω–æ–π) üìù", callback_data='enter_waybill'))
        keyboard.row(InlineKeyboardButton("–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –ò–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω–∞ üõçÔ∏è", callback_data='enter_webshop_order'))
        # keyboard.row(InlineKeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å üí∏", callback_data='calculate_cost'))
        keyboard.row(InlineKeyboardButton("–ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—ã–ª–∫–∏ üì¶",
                                          web_app=WebAppInfo(url='https://mobile.cdek.ru/packageto')))
        keyboard.row(InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å –∫—É—Ä—å–µ—Ä–∞ (–ó–∞–±–æ—Ä –≥—Ä—É–∑–∞) üö™", callback_data='order_courier'))
        keyboard.row(
            InlineKeyboardButton("–°–ø–∏—Å–∫–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤/–æ—Ñ–∏—Å–æ–≤/–Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ üìç", callback_data='list_regions_offices'))
        keyboard.row(InlineKeyboardButton("–ü—Ä–æ–¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –Ω–∞–∫–ª–∞–¥–Ω—É—é –µ—Å–ª–∏ —É –≤–∞—Å —Å–∫–ª–∞–¥-–¥–≤–µ—Ä—å üìù",
                                          callback_data='duplicate_waybill'))

        await message.answer("–í–∞—à–µ –º–µ–Ω—é –¥–ª—è —é—Ä–∏–¥–∏—á–µ—Å–∫–∏—Ö –ª–∏—Ü:", reply_markup=keyboard)
    else:
        await message.answer("–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")


@dp.message_handler(state=Form.login)
async def process_login(message: types.Message, state: FSMContext):
    await state.update_data(login=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å.")
    await Form.password.set()

@dp.message_handler(lambda message: message.text == 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç')
async def process_zamena(message: types.Message):
    print("–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã del –≤—ã–∑–≤–∞–Ω.")
    user = await check_user(message.from_user.id)
    if user:
        cursor.execute("DELETE FROM users WHERE id=?", (user[0],))
        conn.commit()
        await message.answer("–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω.", reply_markup=keyboard)
        await Form.login.set()
    else:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.", reply_markup=keyboard)
        await Form.login.set()

@dp.message_handler(state=Form.password)
async def process_password(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    login = user_data['login']
    password = message.text

    cursor.execute("INSERT INTO users (user_id, username, password) VALUES (?, ?, ?)",
                   (message.from_user.id, login, password))
    conn.commit()

    await message.answer(f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {login}!", reply_markup=keyboard)
    await state.finish()

@dp.message_handler(lambda message: message.text == '‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è')
async def process_zamena(message: types.Message):
    # Paths to images in your project directory
    image1_path = os.path.join(os.getcwd(), 'a.jpg')
    image2_path = os.path.join(os.getcwd(), 'b.jpg')
    # Sending two images and text
    with open(image1_path, 'rb') as image1, open(image2_path, 'rb') as image2:
        media = [
            InputMediaPhoto(media=image1, caption="–ü–µ—Ä–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è –≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–∫–∞–∑–∞–Ω—ã –≤ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞—Ö."),
            InputMediaPhoto(media=image2)
        ]
        await message.answer_media_group(media)


# –∑–¥–µ—Å—å –±—ã–ª –∫–æ–¥ –∏–∑ proces.py


async def process_callback_query(callback_query: types.CallbackQuery, message: str, state):
    await bot.send_message(callback_query.from_user.id, message)
    await state.set()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è callback_data —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º–∏ —Ñ–æ—Ä–º
callback_data_mapping = {
    'enter_waybill': ("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ (–Ω–∞–∫–ª–∞–¥–Ω–æ–π):", Form.order_number),
    'enter_webshop_order': ("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:", Form.order_number2),
    'list_offices': ("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:", Form.order_number3),
    'change_fullname': ("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û:", Form.fio),
    'change_phone': ("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", Form.tel),
    'address': ("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:", Form.adr),
    'change_city': ("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∞–¥—Ä–µ—Å (–ú–æ—Å–∫–≤–∞ –ø—Ä–æ—Å–ø–µ–∫—Ç –º–æ—Å–∫–æ–≤—Å–∫–∏–π —Å—Ç—Ä–æ–µ–Ω–∏–µ 20):", Form.cit),
    'change_pickup_point': ("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å:", Form.pwz),
    'izmenit_za_tovar': ("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –ù–æ–≤–∞—è —Å—É–º–º–∞ –Ω–∞–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞, –°—É–º–º–∞ –ù–î–°, –°—Ç–∞–≤–∫–∞ –ù–î–°:", Form.inpzt),
    'izmenit_za_dop': (
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –ü–æ—Ä–æ–≥ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞, –°—É–º–º–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Å–±–æ—Ä–∞, –°—É–º–º–∞ –ù–î–°, –°—Ç–∞–≤–∫–∞ –ù–î–°:", Form.inpzt),
    'duplicate_waybill': (
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π CDEK",
        Form.dubl),
    '–ó–∞–∫–∞–∑–∞—Ç—å –∫—É—Ä—å–µ—Ä–∞': (
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π CDEK, –¥–∞—Ç—É, –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞, –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏ –∞–¥—Ä–µ—Å. –ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª 10006324754 2024-07-10 10:00 15:00 —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 1",
        Form.kurier),
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –æ–±—â–µ–π —Ñ—É–Ω–∫—Ü–∏–∏ –∏ —Å–ª–æ–≤–∞—Ä—è
@dp.callback_query_handler(lambda c: c.data in callback_data_mapping)
async def process_any_callback_query(callback_query: types.CallbackQuery):
    data = callback_data_mapping[callback_query.data]
    await process_callback_query(callback_query, data[0], data[1])




# –∑–¥–µ—Å—å –±—ã–ª –∫–æ–¥ –∏–∑ obrabotka.py

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–∫–∞–∑–µ
async def process_order_info(message: types.Message, state: FSMContext, info_function, inline_buttons_data):
    order_number = message.text
    current_time = datetime.now()
    user_id = message.from_user.id

    # Check if user has entered data within the last 15 minutes
    cursor.execute("SELECT * FROM new_orders WHERE user_id = ? AND created_at > ?", (user_id, current_time - timedelta(minutes=15)))
    recent_order = cursor.fetchone()
#new_orders
    if recent_order:
        # Use the recent order info
        order_info = recent_order[2]
    else:
        # Get new order info
        order_info = info_function(order_number)

    if order_info:
        order_info_str = str(order_info)
        cursor.execute("INSERT INTO new_orders (user_id, cdek_number, order_info) VALUES (?, ?, ?)",
                       (message.from_user.id, order_number, order_info_str))
        conn.commit()
        # await message.answer("–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –ø–æ —Ä–∞–±–æ—Ç–µ –≤ –Ω–∞–∫–ª–∞–¥–Ω–æ–π.")

        # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é —Å –æ–ø—Ü–∏—è–º–∏
        inline_keyboard = InlineKeyboardMarkup(row_width=2)
        for button_text, callback_data in inline_buttons_data:
            inline_keyboard.add(InlineKeyboardButton(button_text, callback_data=callback_data))

        await message.answer("–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –º–µ–Ω—é –ø–æ —Ä–∞–±–æ—Ç–µ –≤ –Ω–∞–∫–ª–∞–¥–Ω–æ–π. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=inline_keyboard)
    else:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
    await state.finish()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
@dp.message_handler(state=Form.order_number)
async def process_order_number(message: types.Message, state: FSMContext):
    from info import info
    await process_order_info(message, state, info, [
        ("–û—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ—Å—ã–ª–∫—É üì¶", "track_parcel"),
        ("–î–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—Å—ã–ª–∫–µ üìù", "parcel_data"),
        ("–í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–∫–∞–∑ (–Ω–∞–∫–ª–∞–¥–Ω—É—é) üìù", "change_order"),
        ("–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É ‚ùå", "cancel_delivery"),
        ("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ üìÜ", "change_delivery_date"),
        ("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É –Ω–∞–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ üí∏", "edit_cod_amount"),
        ("–ü—Ä–æ–¥–ª–∏—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏–µ ‚è∞", "extend_storage")
        # ("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ üîô", "go_back")
    ])

@dp.message_handler(state=Form.order_number2)
async def process_order_number2(message: types.Message, state: FSMContext):
    from info import info2
    await process_order_info(message, state, info2, [
        ("–û—Ç—Å–ª–µ–¥–∏—Ç—å –ø–æ—Å—ã–ª–∫—É üì¶", "track_parcel"),
        ("–î–∞–Ω–Ω—ã–µ –ø–æ –ø–æ—Å—ã–ª–∫–µ üìù", "parcel_data"),
        ("–í–Ω–µ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–∫–∞–∑ (–Ω–∞–∫–ª–∞–¥–Ω—É—é) üìù", "change_order"),
        ("–û—Ç–º–µ–Ω–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É ‚ùå", "cancel_delivery"),
        ("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –¥–æ—Å—Ç–∞–≤–∫–∏ üìÜ", "change_delivery_date"),
        ("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É–º–º—É –Ω–∞–ª–æ–∂–µ–Ω–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞ üí∏", "edit_cod_amount"),
        ("–ü—Ä–æ–¥–ª–∏—Ç—å —Ö—Ä–∞–Ω–µ–Ω–∏–µ ‚è∞", "extend_storage")
        # ("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥ üîô", "go_back")
    ])


from aiogram import types
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
from aiogram.dispatcher.filters import Text


@dp.callback_query_handler(lambda c: c.data == 'cancel_delivery')
async def otmena_zakaza(callback_query: types.CallbackQuery):
    from otmena_zakaz import otmena

    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()

    cursor.execute('SELECT order_info FROM new_orders WHERE user_id = ?', (callback_query.from_user.id,))
    order_info = cursor.fetchone()
    order_info_str = order_info[0]

    order_info_dict = ast.literal_eval(order_info_str)
    uuid = order_info_dict['entity']["statuses"][0]['code']
    if uuid == "CREATED":
        await callback_query.message.answer(f"–í–∞—à –∑–∞–∫–∞–∑ –≤ —Å—Ç–∞—Ç—É—Å–µ CREATED –∏ –ø–æ–∫–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç–º–µ–Ω–µ–Ω")
    else:
        uuid = order_info_dict['entity']['uuid']
        otmen = otmena(uuid)
        if 'status' in otmen and otmen['status'] != 202:
            print(otmen)
            await callback_query.message.answer(f"–û—à–∏–±–∫–∞: {otmen['error']}")
        else:
            print(otmen)
            await callback_query.message.answer(f"–í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω {otmen}")


@dp.callback_query_handler(lambda c: c.data == 'order_courier')
async def zakaz(callback_query: types.CallbackQuery):
    # URL –≤–∞—à–µ–≥–æ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    web_app_url = 'https://cdek01.github.io/cdekhtml.github.io/'

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    web_app_button = InlineKeyboardButton(text='–û—Ç–∫—Ä—ã—Ç—å –∑–∞–∫–∞–∑', web_app=WebAppInfo(url=web_app_url))
    close_button = InlineKeyboardButton(text='–ó–∞–∫—Ä—ã—Ç—å', callback_data='close_web_app')

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup().add(web_app_button).add(close_button)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await callback_query.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ñ–æ—Ä–º–∏—Ç–µ –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=keyboard)

# @dp.callback_query_handler(Text(equals='close_web_app'))
# async def close_web_app(callback_query: types.CallbackQuery):
#     # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
#     await callback_query.message.delete()
#     await callback_query.answer("–ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
@dp.callback_query_handler(lambda c: c.data == 'close_web_app')
async def close_web_app(callback_query: types.CallbackQuery):
    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–∫—Ä—ã—Ç–∏–∏
    await callback_query.message.edit_reply_markup(reply_markup=None)
    await callback_query.message.answer("–ú–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π—Ç–µ –∑–Ω–∞—Ç—å.")



@dp.message_handler(content_types=['web_app_data'])
async def web_app(message: types.Message):
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    web_app_data = message.web_app_data.data

    # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.answer(f"–í—ã –≤–≤–µ–ª–∏ —Å–ª–µ–¥—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ: {web_app_data}")
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫—É –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—É—Å—Ç–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.answer("–ö–Ω–æ–ø–∫–∞ —É–±—Ä–∞–Ω–∞", reply_markup=get_main_keyboard())
    # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é process_web_app_data –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–∫–∞–∑–∞
    await process_web_app_data(web_app_data, message)

async def process_web_app_data(data, message):
    from zakaz import zakaz1
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Å—Ç—Ä–æ–∫–∏ –≤ Python –æ–±—ä–µ–∫—Ç
    parsed_data = json.loads(data)

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    type_ = parsed_data.get('type')
    tariff_code = parsed_data.get('tariff_code')
    from_city = parsed_data.get('from_city')
    from_address = parsed_data.get('from_address')
    to_city = parsed_data.get('to_city')
    to_address = parsed_data.get('to_address')
    recipient_name = parsed_data.get('recipient_name')
    recipient_phone = parsed_data.get('recipient_phone')
    sender_name = parsed_data.get('sender_name')
    sender_company = parsed_data.get('sender_company')
    sender_phone = parsed_data.get('sender_phone')
    package_number = parsed_data.get('package_number')
    package_weight = parsed_data.get('package_weight')
    package_length = parsed_data.get('package_length')
    package_width = parsed_data.get('package_width')
    package_height = parsed_data.get('package_height')
    package_comment = parsed_data.get('package_comment')
    item_names = parsed_data.get('item_name[]', [])
    ware_keys = parsed_data.get('ware_key[]', [])
    payment_values = parsed_data.get('payment_value[]', [])
    vat_sums = parsed_data.get('vat_sum[]', [])
    vat_rates = parsed_data.get('vat_rate[]', [])
    costs = parsed_data.get('cost[]', [])
    item_weights = parsed_data.get('item_weight[]', [])
    amounts = parsed_data.get('amount[]', [])
    items = parsed_data.get('items', [])
    zak = zakaz1(
        type_, tariff_code, from_city, from_address, to_city, to_address,
        recipient_name, recipient_phone, sender_name, sender_company,
        sender_phone, package_number, package_weight, package_length,
        package_width, package_height, package_comment, item_names,
        ware_keys, payment_values, vat_sums, vat_rates, costs, item_weights,
        amounts, items
    )
    if zak == "–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω":


        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
        await message.answer("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ–π CDEK, –¥–∞—Ç—É, –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞, –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏ –∞–¥—Ä–µ—Å. –ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª 10006324754 2024-07-10 10:00 15:00 —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 1")
        await Form.kurier.set()
    else:
        await message.answer("–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É", str(zak))


@dp.message_handler(state=Form.kurier)
async def process_kurier(message: types.Message, state: FSMContext):
    data = message.text.split()
    nomer = data[0]
    date = data[1]
    time_begin = data[2]
    time_end = data[3]
    address = data[4]
    from dublikat_zayavki import create_call_request_kurier
    # kurier = create_call_request_kurier(nomer, date, time_begin, time_end, address)
    status_code, response_data = create_call_request_kurier(nomer, date, time_begin, time_end, address)

    if status_code == 202:
        await message.answer(f'–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!')
    else:
        await message.answer(
            f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É. –ö–æ–¥ –æ—à–∏–±–∫–∏: {status_code}, –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {response_data}')

    await state.finish()


@dp.message_handler(state=Form.dubl)
async def process_dubl(message: types.Message, state: FSMContext):
    text = message.text
    from dublikat_zayavki import create_order
    uuid = create_order(text)
    await state.update_data(uuid=uuid)
    await Form.next()
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É, –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞, –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏ –∞–¥—Ä–µ—Å. –ß–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª 2024-07-10 10:00 15:00 —É–ª. –õ–µ–Ω–∏–Ω–∞, –¥. 1', reply_markup=types.ReplyKeyboardRemove())

@dp.message_handler(state=Form.call_request)
async def process_call_request(message: types.Message, state: FSMContext):
    data = message.text.split()
    date = data[0]
    time_begin = data[1]
    time_end = data[2]
    address = data[3]
    uuid = await state.get_data()
    from dublikat_zayavki import create_call_request
    import asyncio
    await asyncio.sleep(360)
    create = create_call_request(1, date, time_begin, time_end, address, uuid['uuid'])
    await message.answer(f'–ó–∞–ø—Ä–æ—Å –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω! {create}')
    await state.finish()





@dp.callback_query_handler(lambda c: c.data == 'go_back_menu')
async def go_back_menu(callback_query: types.CallbackQuery):
    await cmd_start1(callback_query.message)
@dp.message_handler(state=Form.npdc)
async def process_izmenit_za_dop(message: types.Message, state: FSMContext):
    try:
        from izmeneniya import nalozh_pay_dop_cbor
        text = message.text
        threshold, value, vat_sum, vat_rate = text[0], text[1], text[2], text[3]

        connection = sqlite3.connect('users.db')
        cursor = connection.cursor()

        cursor.execute('SELECT order_info FROM new_orders WHERE user_id = ?', (message.from_user.id,))
        order_info = cursor.fetchone()
        order_info_str = order_info[0]

        order_info_dict = ast.literal_eval(order_info_str)
        uuid = order_info_dict['entity']['uuid']
        result = nalozh_pay_dop_cbor(uuid, threshold, value, vat_sum, vat_rate)
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='go_back_menu')
        )
        await bot.send_message(message.from_user.id, f"–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.{result}", reply_markup=keyboard)
        await state.finish()
    except Exception as e:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='go_back_menu')
        )
        await bot.send_message(message.from_user.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}",
                               reply_markup=keyboard)
        await state.finish()
@dp.message_handler(state=Form.inpzt)
async def process_izmenit_za_tovar(message: types.Message, state: FSMContext):
    try:
        from izmeneniya import nalozh_pay
        text = message.text
        value, vat_sum, vat_rate = text[0], text[1], text[2]

        connection = sqlite3.connect('users.db')
        cursor = connection.cursor()

        cursor.execute('SELECT order_info FROM new_orders WHERE user_id = ?', (message.from_user.id,))
        order_info = cursor.fetchone()
        order_info_str = order_info[0]

        order_info_dict = ast.literal_eval(order_info_str)
        uuid = order_info_dict['entity']['uuid']
        result = nalozh_pay(uuid, value, vat_sum, vat_rate)
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='go_back_menu')
        )
        await bot.send_message(message.from_user.id, f"–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ.{result}", reply_markup=keyboard)
        await state.finish()
    except Exception as e:
        keyboard = InlineKeyboardMarkup()
        keyboard.add(
            InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='go_back_menu')
        )
        await bot.send_message(message.from_user.id, f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}",
                               reply_markup=keyboard)
        await state.finish()

@dp.message_handler(state=Form.order_number3)
async def process_list_offices(message: types.Message, state: FSMContext):
    city = message.text
    from spisok_ofise import city_info
    city_data = city_info(city)
    if city_data:
        response_text = f"–°–ø–∏—Å–æ–∫ –æ—Ñ–∏—Å–æ–≤ –≤ –≥–æ—Ä–æ–¥–µ {city}:\n\n"
        office_info = ""
        for office in city_data:
            office_info += f"üè¢ –û—Ñ–∏—Å: {office['name']}\n"
            office_info += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {office['phones'][0]['number']}\n"
            office_info += f"üïí –ß–∞—Å—ã —Ä–∞–±–æ—Ç—ã: {office['work_time']}\n"
            if 'address_comment' in office:
                office_info += f"üìç –ê–¥—Ä–µ—Å: {office['address_comment']}\n"
            office_info += "--------------------------------------\n"

        if len(response_text + office_info) <= 4096:  # Telegram message character limit
            response_text += office_info
            await message.answer(response_text)
        else:
            from datetime import datetime
            # Create a meaningful filename for the temporary file
            timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
            filename = f"office_info_{city}_{timestamp}.txt"

            # Save detailed information to the temporary file
            with open(filename, 'w', encoding='utf-8') as temp_file:
                temp_file.write(response_text + office_info)

            # Send the temporary file
            with open(filename, 'rb') as document:
                await message.answer_document(document)

            # Remove the temporary file
            os.remove(filename)
            # os.unlink(temp_file.name)

    else:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ñ–∏—Å–∞—Ö –≤ –¥–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
    await state.finish()

async def process_entering_info(message: types.Message, state: FSMContext, info_function):
    entered_text = message.text
    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()

    cursor.execute('SELECT order_info FROM new_orders WHERE user_id = ?', (message.from_user.id,))
    order_info = cursor.fetchone()

    if order_info:
        order_info_str = order_info[0]
        try:
            order_info_dict = ast.literal_eval(order_info_str)
            uuid = order_info_dict['entity']['uuid']
            result = info_function(uuid, entered_text)
            await bot.send_message(message.from_user.id, result)

        except (ValueError, SyntaxError) as e:
            print(f"Failed to evaluate order_info_str as dictionary: {e}")
    else:
        print("No order_info found for the user")

    connection.close()
    await state.finish()

@dp.message_handler(state=Form.fio)
async def process_entering_fullname(message: types.Message, state: FSMContext):
    from izmeneniya import fio
    await process_entering_info(message, state, fio)

@dp.message_handler(state=Form.tel)
async def process_entering_tel(message: types.Message, state: FSMContext):
    from izmeneniya import fone
    await process_entering_info(message, state, fone)

@dp.message_handler(state=Form.adr)
async def process_entering_adr(message: types.Message, state: FSMContext):
    from izmeneniya import adres
    await process_entering_info(message, state, adres)

@dp.message_handler(state=Form.cit)
async def process_entering_cit(message: types.Message, state: FSMContext):
    entered_text = message.text
    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()

    cursor.execute('SELECT order_info FROM new_orders WHERE user_id = ?', (message.from_user.id,))
    order_info = cursor.fetchone()

    if order_info:
        order_info_str = order_info[0]
        try:
            order_info_dict = ast.literal_eval(order_info_str)
            uuid = order_info_dict['entity']['uuid']
            from izmeneniya import change_city
            address_parts = entered_text.split(' ', 1)
            city = address_parts[0]
            address = "—É–ª–∏—Ü–∞ " + address_parts[1]

            result = change_city(uuid, city, address)
            await bot.send_message(message.from_user.id, result)

        except (ValueError, SyntaxError) as e:
            print(f"Failed to evaluate order_info_str as dictionary: {e}")
    else:
        print("No order_info found for the user")

    connection.close()
    await state.finish()

@dp.message_handler(state=Form.pwz)
async def process_entering_pwz(message: types.Message, state: FSMContext):
    # from izmeneniya import pwz
    # await process_entering_info(message, state, pwz)
    await message.answer("–ò–∑–≤–∏–Ω–∏—Ç–µ, —ç—Ç–æ—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await Form.next()




from aiogram import types
import ast
from aiogram import types

@dp.callback_query_handler(lambda c: c.data)
async def process_callback(callback_query: types.CallbackQuery):

    connection = sqlite3.connect('users.db')
    cursor = connection.cursor()
    if callback_query.data == 'track_parcel':
        # Fetch order info from the database
        cursor.execute("SELECT order_info FROM new_orders WHERE user_id = ? ORDER BY id DESC LIMIT 1", (callback_query.from_user.id,))
        order_info = cursor.fetchone()

        if order_info:
            order_info_str = order_info[0]
            print(f"Debug: Fetched order info: {order_info_str}")  # Debugging line

            try:
                order_info_dict = ast.literal_eval(order_info_str)  # Safely evaluate the string as a Python dictionary

                if 'entity' in order_info_dict and 'statuses' in order_info_dict['entity']:
                    statuses = order_info_dict['entity']['statuses']
                    statuses_reversed = []
                    for status in reversed(statuses):
                        date_time_str = status['date_time']
                        date_str, time_str = date_time_str.split('T')
                        time_str = time_str[:-5]  # remove the +0000 timezone offset
                        status_str = f"{status['name']} –≤ {status['city']} {date_str} {time_str}"
                        statuses_reversed.append(status_str)
                    status_text = "\n".join(statuses_reversed)
                    await bot.send_message(callback_query.from_user.id, status_text)
                else:
                    await bot.send_message(callback_query.from_user.id, "No status information available.")
            except (ValueError, SyntaxError) as e:
                await bot.send_message(callback_query.from_user.id, "Error decoding order information. Please try again later.")
                print(f"Error: {e}")
        else:
            await bot.send_message(callback_query.from_user.id, "No order information found.")


    elif callback_query.data == 'track_parcel2':
        # Fetch order info from the database
        cursor.execute("SELECT order_info FROM new_orders WHERE user_id = ? ORDER BY id DESC LIMIT 1", (callback_query.from_user.id,))
        order_info = cursor.fetchone()

        if order_info:
            order_info_str = order_info[0]
            print(f"Debug: Fetched order info: {order_info_str}")  # Debugging line

            try:
                order_info_dict = ast.literal_eval(order_info_str)  # Safely evaluate the string as a Python dictionary

                if 'entity' in order_info_dict and 'statuses' in order_info_dict['entity']:
                    statuses = order_info_dict['entity']['statuses']
                    status_text = "\n".join(f"{status['name']} –≤ {status['city']}" for status in statuses)
                    await bot.send_message(callback_query.from_user.id, status_text)
                else:
                    await bot.send_message(callback_query.from_user.id, "No status information available.")
            except (ValueError, SyntaxError) as e:
                await bot.send_message(callback_query.from_user.id, "Error decoding order information. Please try again later.")
                print(f"Error: {e}")
        else:
            await bot.send_message(callback_query.from_user.id, "No order information found.")



    elif callback_query.data == 'parcel_data':
        # Fetch order info from the database
        cursor.execute("SELECT order_info FROM new_orders WHERE user_id = ? ORDER BY id DESC LIMIT 1",
                       (callback_query.from_user.id,))
        order_info = cursor.fetchone()
        if order_info:
            order_info_str = order_info[0]
            print(f"Debug: Fetched order info: {order_info_str}")  # Debugging line
            try:
                order_info_dict = ast.literal_eval(order_info_str)  # Safely evaluate the string as a Python dictionary
                if 'entity' in order_info_dict:
                    entity_info = order_info_dict['entity']

                    # Format the output
                    entity_text = (
                        f"üì¶ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–∏:*\n"
                        f"üîë *UUID:* {entity_info.get('uuid', 'N/A')}\n"
                        f"üìù *–ù–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:* {entity_info.get('cdek_number', 'N/A')}\n"
                        f"üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {entity_info.get('comment', 'N/A')}\n"
                        f"üìç *–ü—É–Ω–∫—Ç –¥–æ—Å—Ç–∞–≤–∫–∏:* {entity_info.get('delivery_point', 'N/A')}\n"
                        f"üë• *–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:* {entity_info['sender'].get('company', 'N/A')} - {entity_info['sender'].get('name', 'N/A')}\n"
                        f"üë• *–ü–æ–ª—É—á–∞—Ç–µ–ª—å:* {entity_info['recipient'].get('company', 'N/A')} - {entity_info['recipient'].get('name', 'N/A')}\n"
                        f"üè† *–ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:* {entity_info['from_location'].get('address', 'N/A')}, {entity_info['from_location'].get('city', 'N/A')}\n"
                        f"üè† *–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è:* {entity_info['to_location'].get('city', 'N/A')}, {entity_info['to_location'].get('region', 'N/A')}\n"
                    )
                    # Add your code to process and send the entity information
                    keyboard = InlineKeyboardMarkup()
                    keyboard.add(
                        InlineKeyboardButton("–¢–µ–ª–µ—Ñ–æ–Ω –æ—Ñ–∏—Å–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞ –≤—Ä—É—á–µ–Ω–∏–µ –ø–æ—Å—ã–ª–∫–∏",
                                             callback_data='delivery_office_phone'),
                        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='go_back')
                    )
                    await bot.send_message(callback_query.from_user.id, entity_text, reply_markup=keyboard)
                else:
                    await bot.send_message(callback_query.from_user.id, "No entity information found in order data.")
            except (ValueError, SyntaxError) as e:
                await bot.send_message(callback_query.from_user.id, "Error decoding order information. Please try again later.")
                print(f"Error: {e}")
        else:
            await bot.send_message(callback_query.from_user.id, "No order information found.")

    elif callback_query.data == 'parcel_data2':
        # Fetch order info from the database
        cursor.execute("SELECT order_info FROM new_orders WHERE user_id = ? ORDER BY id DESC LIMIT 1",
                       (callback_query.from_user.id,))
        order_info = cursor.fetchone()
        if order_info:
            order_info_str = order_info[0]
            print(f"Debug: Fetched order info: {order_info_str}")  # Debugging line
            try:
                order_info_dict = ast.literal_eval(order_info_str)  # Safely evaluate the string as a Python dictionary
                if 'entity' in order_info_dict:
                    entity_info = order_info_dict['entity']

                    # Format the output
                    entity_text = (
                        f"üì¶ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–∏:*\n"
                        f"üîë *UUID:* {entity_info.get('uuid', 'N/A')}\n"
                        f"üìù *–ù–æ–º–µ—Ä –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏—è:* {entity_info.get('cdek_number', 'N/A')}\n"
                        f"üí¨ *–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:* {entity_info.get('comment', 'N/A')}\n"
                        f"üìç *–ü—É–Ω–∫—Ç –¥–æ—Å—Ç–∞–≤–∫–∏:* {entity_info.get('delivery_point', 'N/A')}\n"
                        f"üë• *–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å:* {entity_info['sender'].get('company', 'N/A')} - {entity_info['sender'].get('name', 'N/A')}\n"
                        f"üë• *–ü–æ–ª—É—á–∞—Ç–µ–ª—å:* {entity_info['recipient'].get('company', 'N/A')} - {entity_info['recipient'].get('name', 'N/A')}\n"
                        f"üè† *–ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è:* {entity_info['from_location'].get('address', 'N/A')}, {entity_info['from_location'].get('city', 'N/A')}\n"
                        f"üè† *–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è:* {entity_info['to_location'].get('city', 'N/A')}, {entity_info['to_location'].get('region', 'N/A')}\n"
                    )
                    # Add your code to process and send the entity information
                    keyboard = InlineKeyboardMarkup()
                    keyboard.add(
                        InlineKeyboardButton("–¢–µ–ª–µ—Ñ–æ–Ω –æ—Ñ–∏—Å–∞ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∑–∞ –≤—Ä—É—á–µ–Ω–∏–µ –ø–æ—Å—ã–ª–∫–∏",
                                             callback_data='delivery_office_phone'),
                        InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='go_back')
                    )
                    await bot.send_message(callback_query.from_user.id, entity_text, reply_markup=keyboard)
                else:
                    await bot.send_message(callback_query.from_user.id, "No entity information found in order data.")
            except (ValueError, SyntaxError) as e:
                await bot.send_message(callback_query.from_user.id, "Error decoding order information. Please try again later.")
                print(f"Error: {e}")
        else:
            await bot.send_message(callback_query.from_user.id, "No order information found.")








    elif callback_query.data == 'delivery_office_phone':
        cursor.execute("SELECT order_info FROM new_orders WHERE user_id = ? ORDER BY id DESC LIMIT 1",
                       (callback_query.from_user.id,))
        order_info = cursor.fetchone()
        if order_info:
            order_info_str = order_info[0]
            print(f"Debug: Fetched order info: {order_info_str}")  # Debugging line
            try:
                order_info_dict = ast.literal_eval(order_info_str)  # Safely evaluate the string as a Python dictionary
                if 'entity' in order_info_dict:
                    entity_info = order_info_dict['entity']
                    delivery_point_code = entity_info.get('delivery_point')
                    print(delivery_point_code)
                    from Delivery_Arrangement_Information import deliverypoints, format_deliverypoint_info
                    if delivery_point_code:
                        response = deliverypoints(delivery_point_code)
                        if response:
                            formatted_info = format_deliverypoint_info(response[0])
                            await callback_query.message.answer(
                                f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É:\n\n{formatted_info}")
                        else:
                            await callback_query.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—É–Ω–∫—Ç–µ –≤—ã–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                    else:
                        await callback_query.message.answer("–ö–æ–¥ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞.")
            except (SyntaxError, ValueError) as e:
                print(f"Error parsing order info: {e}")  # Debugging line
                await callback_query.message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞.")
        else:
            await callback_query.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")


    elif callback_query.data == 'go_back':

        await process_order_number(callback_query.message, state=None)




    elif callback_query.data == 'change_order':
        keyboard_markup = types.InlineKeyboardMarkup(row_width=1)
        buttons = [
            types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –§–ò–û –ø–æ–ª—É—á–∞—Ç–µ–ª—è", callback_data='change_fullname'),
            types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—É—á–∞—Ç–µ–ª—è", callback_data='change_phone'),
            types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è", callback_data='change_address')
        ]
        keyboard_markup.add(*buttons)
        await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å",
                               reply_markup=keyboard_markup)
    elif callback_query.data == 'change_address':
        keyboard_markup = types.InlineKeyboardMarkup(row_width=1)
        buttons = [
            types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è", callback_data='address'),
            types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ü–í–ó –≤ –≥–æ—Ä–æ–¥–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ", callback_data='change_pickup_point'),
            types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ–ª—É—á–∞—Ç–µ–ª—è", callback_data='change_city')
        ]
        keyboard_markup.add(*buttons)
        await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å",
                               reply_markup=keyboard_markup)

    elif callback_query.data == 'cancel_delivery':
        await bot.send_message(callback_query.from_user.id, "–§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")
    elif callback_query.data == 'change_delivery_date':
        await bot.send_message(callback_query.from_user.id, "–§—É–Ω–∫—Ü–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.")


    elif callback_query.data == 'edit_cod_amount':
        keyboard_markup = types.InlineKeyboardMarkup(row_width=1)
        buttons = [
            types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –≤—Å–µ –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏", callback_data='otmena_vcex_plat'),
            types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –∑–∞ —Ç–æ–≤–∞—Ä", callback_data='izmenit_za_tovar'),
            types.InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã–π –ø–ª–∞—Ç–µ–∂ –∑–∞ –¥–æ–ø. —Å–±–æ—Ä", callback_data='izmenit_za_dop')
        ]
        keyboard_markup.add(*buttons)
        await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å",
                               reply_markup=keyboard_markup)

    elif callback_query.data == 'otmena_vcex_plat':
        from izmeneniya import nalozh_pay_otmena_vse
        cursor.execute('SELECT order_info FROM new_orders WHERE user_id = ?', (callback_query.from_user.id,))
        order_info = cursor.fetchone()

        if order_info:
            order_info_str = order_info[0]

            order_info_dict = ast.literal_eval(order_info_str)
            uuid = order_info_dict['entity']['uuid']
            nalozh_pay_otmena = nalozh_pay_otmena_vse(uuid)
            await callback_query.message.answer(
                f"–û—Ç–º–µ–Ω–µ–Ω—ã –≤—Å–µ –Ω–∞–ª–æ–∂–µ–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏:\n\n{nalozh_pay_otmena}")




    elif callback_query.data == 'extend_storage':
        cursor.execute("SELECT order_info FROM new_orders WHERE user_id = ? ORDER BY id DESC LIMIT 1",
                       (callback_query.from_user.id,))
        order_info = cursor.fetchone()
        if order_info:
            order_info_str = order_info[0]
            print(f"Debug: Fetched order info: {order_info_str}")  # Debugging line
            try:
                order_info_dict = ast.literal_eval(order_info_str)  # Safely evaluate the string as a Python dictionary
                if 'entity' in order_info_dict:
                    entity_info = order_info_dict['entity']
                    delivery_point_code = entity_info.get('delivery_point')
                    print(delivery_point_code)
                    from Delivery_Arrangement_Information import deliverypoints, format_deliverypoint_info
                    if delivery_point_code:
                        response = deliverypoints(delivery_point_code)
                        if response:
                            formatted_info = format_deliverypoint_info(response[0])
                            await callback_query.message.answer(f"–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É:\n\n{formatted_info}")
                        else:
                            await callback_query.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—É–Ω–∫—Ç–µ –≤—ã–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                    else:
                        await callback_query.message.answer("–ö–æ–¥ –ø—É–Ω–∫—Ç–∞ –≤—ã–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞.")
            except (SyntaxError, ValueError) as e:
                print(f"Error parsing order info: {e}")  # Debugging line
                await callback_query.message.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞.")
        else:
            await callback_query.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")



    elif callback_query.data == 'list_regions_offices':
        # Create a new inline keyboard with three buttons
        inline_keyboard = InlineKeyboardMarkup(row_width=1)
        inline_keyboard.add(
            InlineKeyboardButton("–°–ø–∏—Å–∫–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤", callback_data='list_regions'),
            InlineKeyboardButton("–°–ø–∏—Å–∫–∏ –æ—Ñ–∏—Å–æ–≤", callback_data='list_offices'),
            InlineKeyboardButton("–°–ø–∏—Å–∫–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤", callback_data='list_settlements')
        )
        # Send the "–≤—ã–±–µ—Ä–µ—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞" message with the inline keyboard
        await bot.send_message(callback_query.from_user.id, "–í—ã–±–µ—Ä–µ—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=inline_keyboard)


    # You can implement specific logic for each callback data here
    elif callback_query.data == 'list_regions':
        from regions import region_code
        region = region_code()
        message = "üåç **–°–ø–∏—Å–∫–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤ üèûÔ∏è**:\n"
        for code, region in region.items():
            message += f"- {code}: '{region}'\n"

        await bot.send_message(callback_query.from_user.id, message)

    elif callback_query.data == 'list_offices':
        await bot.send_message(callback_query.from_user.id, "–°–ø–∏—Å–∫–∏ –æ—Ñ–∏—Å–æ–≤")


    elif callback_query.data == 'list_settlements':
        await bot.send_message(callback_query.from_user.id, "–°–ø–∏—Å–∫–∏ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤")


# async def process_order_number(user_id, state):
#     # Add logic to open the cmd_start1 menu
#     await cmd_start1(user_id)

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
